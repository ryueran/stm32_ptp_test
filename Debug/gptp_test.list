
gptp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015630  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e14  08015800  08015800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018614  08018614  0001a1cc  2**0
                  CONTENTS
  4 .ARM          00000008  08018614  08018614  00019614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801861c  0801861c  0001a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801861c  0801861c  0001961c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018620  08018620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08018624  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  080186b0  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08018750  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d8d4  200001cc  080187f0  0001a1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000daa0  080187f0  0001aaa0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001a1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003144c  00000000  00000000  0001a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007a1e  00000000  00000000  0004b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002620  00000000  00000000  00053068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001e25  00000000  00000000  00055688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037b0a  00000000  00000000  000574ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003b1bf  00000000  00000000  0008efb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e018  00000000  00000000  000ca176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e818e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a7e0  00000000  00000000  001e81d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001f29b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080157e8 	.word	0x080157e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	080157e8 	.word	0x080157e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005be:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	200001e8 	.word	0x200001e8
 80005d0:	2000023c 	.word	0x2000023c

080005d4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <SCB_EnableICache+0x48>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f2:	f3bf 8f6f 	isb	sy
}
 80005f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f8:	4b08      	ldr	r3, [pc, #32]	@ (800061c <SCB_EnableICache+0x48>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a07      	ldr	r2, [pc, #28]	@ (800061c <SCB_EnableICache+0x48>)
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000602:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000604:	f3bf 8f4f 	dsb	sy
}
 8000608:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060a:	f3bf 8f6f 	isb	sy
}
 800060e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <SCB_EnableDCache+0x84>)
 8000628:	2200      	movs	r2, #0
 800062a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800062e:	f3bf 8f4f 	dsb	sy
}
 8000632:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <SCB_EnableDCache+0x84>)
 8000636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800063a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	0b5b      	lsrs	r3, r3, #13
 8000640:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000644:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800064e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	015a      	lsls	r2, r3, #5
 8000654:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000658:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065e:	4911      	ldr	r1, [pc, #68]	@ (80006a4 <SCB_EnableDCache+0x84>)
 8000660:	4313      	orrs	r3, r2
 8000662:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	60ba      	str	r2, [r7, #8]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1ef      	bne.n	8000650 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	60fa      	str	r2, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1e5      	bne.n	8000646 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800067a:	f3bf 8f4f 	dsb	sy
}
 800067e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <SCB_EnableDCache+0x84>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a07      	ldr	r2, [pc, #28]	@ (80006a4 <SCB_EnableDCache+0x84>)
 8000686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800068a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800068c:	f3bf 8f4f 	dsb	sy
}
 8000690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000692:	f3bf 8f6f 	isb	sy
}
 8000696:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ae:	f000 fac3 	bl	8000c38 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b2:	f7ff ff8f 	bl	80005d4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b6:	f7ff ffb3 	bl	8000620 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fee5 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f823 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f9b5 	bl	8000a30 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c6:	f000 f955 	bl	8000974 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ca:	f000 f983 	bl	80009d4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80006ce:	f000 f8df 	bl	8000890 <MX_TIM2_Init>
  MX_RTC_Init();
 80006d2:	f000 f883 	bl	80007dc <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80006d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <main+0x58>)
 80006d8:	1d3c      	adds	r4, r7, #4
 80006da:	461d      	mov	r5, r3
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 fc94 	bl	800701a <osThreadCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a03      	ldr	r2, [pc, #12]	@ (8000704 <main+0x5c>)
 80006f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006f8:	f006 fc78 	bl	8006fec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <main+0x54>
 8000700:	0801580c 	.word	0x0801580c
 8000704:	20001838 	.word	0x20001838

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f014 f9c1 	bl	8014a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072c:	f002 fe52 	bl	80033d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000764:	2309      	movs	r3, #9
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000768:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000780:	2348      	movs	r3, #72	@ 0x48
 8000782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000788:	2303      	movs	r3, #3
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fe2f 	bl	80033f4 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800079c:	f000 fa78 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2102      	movs	r1, #2
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 f8bd 	bl	800393c <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c8:	f000 fa62 	bl	8000c90 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	@ 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_RTC_Init+0xac>)
 80007f6:	4a25      	ldr	r2, [pc, #148]	@ (800088c <MX_RTC_Init+0xb0>)
 80007f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_RTC_Init+0xac>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_RTC_Init+0xac>)
 8000802:	227f      	movs	r2, #127	@ 0x7f
 8000804:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_RTC_Init+0xac>)
 8000808:	22ff      	movs	r2, #255	@ 0xff
 800080a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_RTC_Init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_RTC_Init+0xac>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_RTC_Init+0xac>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800081e:	481a      	ldr	r0, [pc, #104]	@ (8000888 <MX_RTC_Init+0xac>)
 8000820:	f003 fea2 	bl	8004568 <HAL_RTC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 fa31 	bl	8000c90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800082e:	2300      	movs	r3, #0
 8000830:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000832:	2300      	movs	r3, #0
 8000834:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000836:	2300      	movs	r3, #0
 8000838:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	480f      	ldr	r0, [pc, #60]	@ (8000888 <MX_RTC_Init+0xac>)
 800084a:	f003 ff11 	bl	8004670 <HAL_RTC_SetTime>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 fa1c 	bl	8000c90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000858:	2301      	movs	r3, #1
 800085a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800085c:	2301      	movs	r3, #1
 800085e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000860:	2301      	movs	r3, #1
 8000862:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000864:	2300      	movs	r3, #0
 8000866:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_RTC_Init+0xac>)
 8000870:	f003 ff98 	bl	80047a4 <HAL_RTC_SetDate>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800087a:	f000 fa09 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000123c 	.word	0x2000123c
 800088c:	40002800 	.word	0x40002800

08000890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008be:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008d2:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e6:	4822      	ldr	r0, [pc, #136]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008e8:	f004 f882 	bl	80049f0 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80008f2:	f000 f9cd 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008f6:	481e      	ldr	r0, [pc, #120]	@ (8000970 <MX_TIM2_Init+0xe0>)
 80008f8:	f004 f8d1 	bl	8004a9e <HAL_TIM_IC_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000902:	f000 f9c5 	bl	8000c90 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000906:	2306      	movs	r3, #6
 8000908:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800090a:	2310      	movs	r3, #16
 800090c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4816      	ldr	r0, [pc, #88]	@ (8000970 <MX_TIM2_Init+0xe0>)
 8000916:	f004 f9bf 	bl	8004c98 <HAL_TIM_SlaveConfigSynchro>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000920:	f000 f9b6 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	480f      	ldr	r0, [pc, #60]	@ (8000970 <MX_TIM2_Init+0xe0>)
 8000934:	f004 fcd0 	bl	80052d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800093e:	f000 f9a7 	bl	8000c90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 8000946:	2303      	movs	r3, #3
 8000948:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	2204      	movs	r2, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_TIM2_Init+0xe0>)
 800095a:	f004 f901 	bl	8004b60 <HAL_TIM_IC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000964:	f000 f994 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3730      	adds	r7, #48	@ 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000125c 	.word	0x2000125c

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <MX_USART3_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART3_UART_Init+0x58>)
 80009b8:	f004 fd1c 	bl	80053f4 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f965 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200012a8 	.word	0x200012a8
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2206      	movs	r2, #6
 80009e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	f002 fb93 	bl	8003142 <HAL_PCD_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f935 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20001330 	.word	0x20001330

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	@ 0x30
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a46      	ldr	r2, [pc, #280]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b44      	ldr	r3, [pc, #272]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	4b41      	ldr	r3, [pc, #260]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a40      	ldr	r2, [pc, #256]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b3b      	ldr	r3, [pc, #236]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b38      	ldr	r3, [pc, #224]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a34      	ldr	r2, [pc, #208]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a28      	ldr	r2, [pc, #160]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0x134>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000adc:	4822      	ldr	r0, [pc, #136]	@ (8000b68 <MX_GPIO_Init+0x138>)
 8000ade:	f002 fb17 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2140      	movs	r1, #64	@ 0x40
 8000ae6:	4821      	ldr	r0, [pc, #132]	@ (8000b6c <MX_GPIO_Init+0x13c>)
 8000ae8:	f002 fb12 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	481b      	ldr	r0, [pc, #108]	@ (8000b70 <MX_GPIO_Init+0x140>)
 8000b04:	f002 f958 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b08:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <MX_GPIO_Init+0x138>)
 8000b22:	f002 f949 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b26:	2340      	movs	r3, #64	@ 0x40
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <MX_GPIO_Init+0x13c>)
 8000b3e:	f002 f93b 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_GPIO_Init+0x13c>)
 8000b56:	f002 f92f 	bl	8002db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	@ 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800

08000b74 <udp_server_recv_callback>:
	// �?��?到 UART
	HAL_UART_Transmit(&huart3, (uint8_t*)timestamp, strlen(timestamp), HAL_MAX_DELAY);
}

// UDP echo server callback function
static void udp_server_recv_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	603b      	str	r3, [r7, #0]
    // Process received UDP packet
    if (p != NULL) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d011      	beq.n	8000bac <udp_server_recv_callback+0x38>
        // Print received data (for demonstration purposes)
        printf("Received UDP packet from IP: %s, Port: %d\n", ip4addr_ntoa(addr), port);
 8000b88:	6838      	ldr	r0, [r7, #0]
 8000b8a:	f012 fd69 	bl	8013660 <ip4addr_ntoa>
 8000b8e:	4601      	mov	r1, r0
 8000b90:	8b3b      	ldrh	r3, [r7, #24]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4807      	ldr	r0, [pc, #28]	@ (8000bb4 <udp_server_recv_callback+0x40>)
 8000b96:	f013 ff1d 	bl	80149d4 <iprintf>

        // Echo the received data back to the client
        udp_sendto(pcb, p, addr, port);
 8000b9a:	8b3b      	ldrh	r3, [r7, #24]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f010 ff05 	bl	80119b0 <udp_sendto>

        // Free the received pbuf
        pbuf_free(p);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f00a ffc4 	bl	800bb34 <pbuf_free>
    }
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	08015854 	.word	0x08015854

08000bb8 <udp_thread>:

/*UDP Server function*/
static void udp_thread(void *arg)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	// Create a new UDP PCB (protocol control block) for the echo server
		    struct udp_pcb *udp_server_pcb = udp_new();
 8000bc0:	f011 f954 	bl	8011e6c <udp_new>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60fb      	str	r3, [r7, #12]
		    if (udp_server_pcb != NULL) {
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00e      	beq.n	8000bec <udp_thread+0x34>
		        // Bind the UDP PCB to the specified port
		        if (udp_bind(udp_server_pcb, IP_ADDR_ANY, 319) == ERR_OK) {
 8000bce:	f240 123f 	movw	r2, #319	@ 0x13f
 8000bd2:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <udp_thread+0x38>)
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f011 f8a1 	bl	8011d1c <udp_bind>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d105      	bne.n	8000bec <udp_thread+0x34>
		            // Set up the callback function for receiving UDP packets
		            udp_recv(udp_server_pcb, udp_server_recv_callback, NULL);
 8000be0:	2200      	movs	r2, #0
 8000be2:	4904      	ldr	r1, [pc, #16]	@ (8000bf4 <udp_thread+0x3c>)
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f011 f921 	bl	8011e2c <udp_recv>
		    } else {
		        // Error handling: failed to create UDP PCB
		    }

		    // Main loop (optional)
		    while (1) {
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <udp_thread+0x34>
 8000bf0:	08018518 	.word	0x08018518
 8000bf4:	08000b75 	.word	0x08000b75

08000bf8 <udpserver_init>:
		        // Main application logic goes here
		    }
}

void udpserver_init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af02      	add	r7, sp, #8
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c06:	2200      	movs	r2, #0
 8000c08:	4903      	ldr	r1, [pc, #12]	@ (8000c18 <udpserver_init+0x20>)
 8000c0a:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <udpserver_init+0x24>)
 8000c0c:	f013 fd9e 	bl	801474c <sys_thread_new>
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08000bb9 	.word	0x08000bb9
 8000c1c:	08015880 	.word	0x08015880

08000c20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c28:	f005 fb2a 	bl	8006280 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /*UDP Init*/
  udpserver_init();
 8000c2c:	f7ff ffe4 	bl	8000bf8 <udpserver_init>
  /* Infinite loop */
  for(;;)
  {
	  // print_timestamp();
    osDelay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f006 fa4a 	bl	80070ca <osDelay>
 8000c36:	e7fb      	b.n	8000c30 <StartDefaultTask+0x10>

08000c38 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c4a:	f000 fdbd 	bl	80017c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c5a:	231f      	movs	r3, #31
 8000c5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c5e:	2387      	movs	r3, #135	@ 0x87
 8000c60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c66:	2300      	movs	r3, #0
 8000c68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fddb 	bl	8001838 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c82:	2004      	movs	r0, #4
 8000c84:	f000 fdb8 	bl	80017f8 <HAL_MPU_Enable>

}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_MspInit+0x5c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	f06f 0001 	mvn.w	r0, #1
 8000cda:	f000 fd3e 	bl	800175a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2005      	movs	r0, #5
 8000ce4:	f000 fd39 	bl	800175a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ce8:	2005      	movs	r0, #5
 8000cea:	f000 fd52 	bl	8001792 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0a4      	sub	sp, #144	@ 0x90
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2284      	movs	r2, #132	@ 0x84
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f013 fec6 	bl	8014a9e <memset>
  if(hrtc->Instance==RTC)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <HAL_RTC_MspInit+0x54>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d114      	bne.n	8000d46 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d1c:	2320      	movs	r3, #32
 8000d1e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 f82c 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d36:	f7ff ffab 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_RTC_MspInit+0x58>)
 8000d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <HAL_RTC_MspInit+0x58>)
 8000d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d44:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3790      	adds	r7, #144	@ 0x90
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40002800 	.word	0x40002800
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d68:	d10b      	bne.n	8000d82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_TIM_Base_MspInit+0x38>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_TIM_Base_MspInit+0x38>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_TIM_Base_MspInit+0x38>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0aa      	sub	sp, #168	@ 0xa8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2284      	movs	r2, #132	@ 0x84
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f013 fe72 	bl	8014a9e <memset>
  if(huart->Instance==USART3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a22      	ldr	r2, [pc, #136]	@ (8000e48 <HAL_UART_MspInit+0xb4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d13c      	bne.n	8000e3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 ffd8 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dde:	f7ff ff57 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <HAL_UART_MspInit+0xb8>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a19      	ldr	r2, [pc, #100]	@ (8000e4c <HAL_UART_MspInit+0xb8>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <HAL_UART_MspInit+0xb8>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_UART_MspInit+0xb8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <HAL_UART_MspInit+0xb8>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_UART_MspInit+0xb8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_UART_MspInit+0xbc>)
 8000e3a:	f001 ffbd 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	37a8      	adds	r7, #168	@ 0xa8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020c00 	.word	0x40020c00

08000e54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	@ 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	2284      	movs	r2, #132	@ 0x84
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f013 fe12 	bl	8014a9e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e82:	d159      	bne.n	8000f38 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 ff77 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ea0:	f7ff fef6 	bl	8000c90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	4a25      	ldr	r2, [pc, #148]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb0:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ebc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4818      	ldr	r0, [pc, #96]	@ (8000f44 <HAL_PCD_MspInit+0xf0>)
 8000ee4:	f001 ff68 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ee8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f00:	4619      	mov	r1, r3
 8000f02:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <HAL_PCD_MspInit+0xf0>)
 8000f04:	f001 ff58 	bl	8002db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f12:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f14:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <HAL_PCD_MspInit+0xec>)
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	37b0      	adds	r7, #176	@ 0xb0
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 fabf 	bl	8001504 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f86:	f008 f9d9 	bl	800933c <xTaskGetSchedulerState>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d001      	beq.n	8000f94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f90:	f008 fdba 	bl	8009b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <ETH_IRQHandler+0x10>)
 8000fae:	f001 f82f 	bl	8002010 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20006224 	.word	0x20006224

08000fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_kill>:

int _kill(int pid, int sig)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <_kill+0x20>)
 8000fd8:	2216      	movs	r2, #22
 8000fda:	601a      	str	r2, [r3, #0]
  return -1;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	2000d950 	.word	0x2000d950

08000ff0 <_exit>:

void _exit (int status)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ffe5 	bl	8000fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <_exit+0x12>

08001006 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e00a      	b.n	800102e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001018:	f3af 8000 	nop.w
 800101c:	4601      	mov	r1, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	b2ca      	uxtb	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	dbf0      	blt.n	8001018 <_read+0x12>
  }

  return len;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e009      	b.n	8001066 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbf1      	blt.n	8001052 <_write+0x12>
  }
  return len;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_close>:

int _close(int file)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010a0:	605a      	str	r2, [r3, #4]
  return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_isatty>:

int _isatty(int file)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d205      	bcs.n	800111c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <_sbrk+0x6c>)
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20050000 	.word	0x20050000
 8001140:	00000400 	.word	0x00000400
 8001144:	2000183c 	.word	0x2000183c
 8001148:	2000daa0 	.word	0x2000daa0
 800114c:	2000d950 	.word	0x2000d950

08001150 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	@ (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	@ (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f013 fccb 	bl	8014b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff fa7f 	bl	80006a8 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80011b8:	08018624 	.word	0x08018624
  ldr r2, =_sbss
 80011bc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80011c0:	2000daa0 	.word	0x2000daa0

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>

080011c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <LAN8742_RegisterBusIO+0x28>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <LAN8742_RegisterBusIO+0x28>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <LAN8742_RegisterBusIO+0x28>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e014      	b.n	800121e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d17c      	bne.n	8001344 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2220      	movs	r2, #32
 800125c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e01c      	b.n	800129e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	2112      	movs	r1, #18
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	4798      	blx	r3
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	da03      	bge.n	8001280 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001278:	f06f 0304 	mvn.w	r3, #4
 800127c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800127e:	e00b      	b.n	8001298 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	d105      	bne.n	8001298 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
         break;
 8001296:	e005      	b.n	80012a4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2b1f      	cmp	r3, #31
 80012a2:	d9df      	bls.n	8001264 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b1f      	cmp	r3, #31
 80012aa:	d902      	bls.n	80012b2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012ac:	f06f 0302 	mvn.w	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d145      	bne.n	8001344 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6810      	ldr	r0, [r2, #0]
 80012c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012c4:	2100      	movs	r1, #0
 80012c6:	4798      	blx	r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db37      	blt.n	800133e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6810      	ldr	r0, [r2, #0]
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	2100      	movs	r1, #0
 80012dc:	4798      	blx	r3
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db28      	blt.n	8001336 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4798      	blx	r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012ee:	e01c      	b.n	800132a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4798      	blx	r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001302:	d80e      	bhi.n	8001322 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6810      	ldr	r0, [r2, #0]
 800130c:	f107 0208 	add.w	r2, r7, #8
 8001310:	2100      	movs	r1, #0
 8001312:	4798      	blx	r3
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	da07      	bge.n	800132a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800131a:	f06f 0304 	mvn.w	r3, #4
 800131e:	613b      	str	r3, [r7, #16]
                 break;
 8001320:	e010      	b.n	8001344 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001322:	f06f 0301 	mvn.w	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
               break;
 8001328:	e00c      	b.n	8001344 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1dd      	bne.n	80012f0 <LAN8742_Init+0xc6>
 8001334:	e006      	b.n	8001344 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001336:	f06f 0304 	mvn.w	r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	e002      	b.n	8001344 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800133e:	f06f 0303 	mvn.w	r3, #3
 8001342:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d112      	bne.n	8001370 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4798      	blx	r3
 8001350:	4603      	mov	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001354:	bf00      	nop
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4798      	blx	r3
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001368:	d9f5      	bls.n	8001356 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001370:	693b      	ldr	r3, [r7, #16]
 }
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6810      	ldr	r0, [r2, #0]
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	2101      	movs	r1, #1
 8001394:	4798      	blx	r3
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	da02      	bge.n	80013a2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800139c:	f06f 0304 	mvn.w	r3, #4
 80013a0:	e06e      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6810      	ldr	r0, [r2, #0]
 80013aa:	f107 020c 	add.w	r2, r7, #12
 80013ae:	2101      	movs	r1, #1
 80013b0:	4798      	blx	r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da02      	bge.n	80013be <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013b8:	f06f 0304 	mvn.w	r3, #4
 80013bc:	e060      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80013c8:	2301      	movs	r3, #1
 80013ca:	e059      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	2100      	movs	r1, #0
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da02      	bge.n	80013e8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013e2:	f06f 0304 	mvn.w	r3, #4
 80013e6:	e04b      	b.n	8001480 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11b      	bne.n	800142a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <LAN8742_GetLinkState+0x90>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001406:	2302      	movs	r3, #2
 8001408:	e03a      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001414:	2303      	movs	r3, #3
 8001416:	e033      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001422:	2304      	movs	r3, #4
 8001424:	e02c      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001426:	2305      	movs	r3, #5
 8001428:	e02a      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6810      	ldr	r0, [r2, #0]
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	211f      	movs	r1, #31
 8001438:	4798      	blx	r3
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	da02      	bge.n	8001446 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001440:	f06f 0304 	mvn.w	r3, #4
 8001444:	e01c      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001450:	2306      	movs	r3, #6
 8001452:	e015      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 031c 	and.w	r3, r3, #28
 800145a:	2b18      	cmp	r3, #24
 800145c:	d101      	bne.n	8001462 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800145e:	2302      	movs	r3, #2
 8001460:	e00e      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f003 031c 	and.w	r3, r3, #28
 8001468:	2b08      	cmp	r3, #8
 800146a:	d101      	bne.n	8001470 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800146c:	2303      	movs	r3, #3
 800146e:	e007      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 031c 	and.w	r3, r3, #28
 8001476:	2b14      	cmp	r3, #20
 8001478:	d101      	bne.n	800147e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800147a:	2304      	movs	r3, #4
 800147c:	e000      	b.n	8001480 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800147e:	2305      	movs	r3, #5
    }				
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f959 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f806 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fc00 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f973 	bl	80017ae <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f93b 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	20001840 	.word	0x20001840

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20001840 	.word	0x20001840

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffde 	bl	800152c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008

0800158c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_GetREVID+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0c1b      	lsrs	r3, r3, #16
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e0042000 	.word	0xe0042000

080015a4 <__NVIC_SetPriorityGrouping>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	05fa0000 	.word	0x05fa0000

080015ec <__NVIC_GetPriorityGrouping>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	@ (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	@ (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff3e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017cc:	f3bf 8f5f 	dmb	sy
}
 80017d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_MPU_Disable+0x28>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	4a06      	ldr	r2, [pc, #24]	@ (80017f0 <HAL_MPU_Disable+0x28>)
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017dc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_MPU_Disable+0x2c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	e000ed90 	.word	0xe000ed90

080017f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_MPU_Enable+0x38>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_MPU_Enable+0x3c>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	4a09      	ldr	r2, [pc, #36]	@ (8001834 <HAL_MPU_Enable+0x3c>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001814:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001816:	f3bf 8f4f 	dsb	sy
}
 800181a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181c:	f3bf 8f6f 	isb	sy
}
 8001820:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed90 	.word	0xe000ed90
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <HAL_MPU_ConfigRegion+0x84>)
 8001846:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d029      	beq.n	80018a4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001850:	4a1a      	ldr	r2, [pc, #104]	@ (80018bc <HAL_MPU_ConfigRegion+0x84>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7b1b      	ldrb	r3, [r3, #12]
 800185c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7adb      	ldrb	r3, [r3, #11]
 8001862:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7a9b      	ldrb	r3, [r3, #10]
 800186a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800186c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	7b5b      	ldrb	r3, [r3, #13]
 8001872:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001874:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7b9b      	ldrb	r3, [r3, #14]
 800187a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800187c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7bdb      	ldrb	r3, [r3, #15]
 8001882:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001884:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7a5b      	ldrb	r3, [r3, #9]
 800188a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800188c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7a1b      	ldrb	r3, [r3, #8]
 8001892:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001894:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800189e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80018a2:	e005      	b.n	80018b0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_MPU_ConfigRegion+0x84>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <HAL_MPU_ConfigRegion+0x84>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed90 	.word	0xe000ed90

080018c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e06a      	b.n	80019a8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2223      	movs	r2, #35	@ 0x23
 80018e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f005 f909 	bl	8006afc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <HAL_ETH_Init+0xf0>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	4a30      	ldr	r2, [pc, #192]	@ (80019b0 <HAL_ETH_Init+0xf0>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f6:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <HAL_ETH_Init+0xf0>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001902:	4b2c      	ldr	r3, [pc, #176]	@ (80019b4 <HAL_ETH_Init+0xf4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <HAL_ETH_Init+0xf4>)
 8001908:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800190c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800190e:	4b29      	ldr	r3, [pc, #164]	@ (80019b4 <HAL_ETH_Init+0xf4>)
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4927      	ldr	r1, [pc, #156]	@ (80019b4 <HAL_ETH_Init+0xf4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <HAL_ETH_Init+0xf4>)
 800191e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001936:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001938:	f7ff fdf8 	bl	800152c <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800193e:	e011      	b.n	8001964 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001940:	f7ff fdf4 	bl	800152c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800194e:	d909      	bls.n	8001964 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2204      	movs	r2, #4
 8001954:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	22e0      	movs	r2, #224	@ 0xe0
 800195c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      /* Return Error */
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e021      	b.n	80019a8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1e4      	bne.n	8001940 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 ff7a 	bl	8002870 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f001 f821 	bl	80029c4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f001 f877 	bl	8002a76 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	461a      	mov	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 ffdf 	bl	8002954 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  heth->gState = HAL_ETH_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2210      	movs	r2, #16
 80019a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40013800 	.word	0x40013800

080019b8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d17b      	bne.n	8001ac2 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2223      	movs	r2, #35	@ 0x23
 80019ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <HAL_ETH_Start_IT+0x114>)
 80019f6:	430b      	orrs	r3, r1
 80019f8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001a0c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2204      	movs	r2, #4
 8001a14:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f9fc 	bl	8001e14 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0208 	orr.w	r2, r2, #8
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fd85 	bl	8001544 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0204 	orr.w	r2, r2, #4
 8001a50:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff fd72 	bl	8001544 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fda2 	bl	80025b2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a84:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a9c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa6:	69d9      	ldr	r1, [r3, #28]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <HAL_ETH_Start_IT+0x118>)
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ab4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2223      	movs	r2, #35	@ 0x23
 8001aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	00020060 	.word	0x00020060
 8001ad0:	0001a0c1 	.word	0x0001a0c1

08001ad4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae2:	2b23      	cmp	r3, #35	@ 0x23
 8001ae4:	d16e      	bne.n	8001bc4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2223      	movs	r2, #35	@ 0x23
 8001aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af6:	69d9      	ldr	r1, [r3, #28]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <HAL_ETH_Stop_IT+0xfc>)
 8001afe:	400b      	ands	r3, r1
 8001b00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b04:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001b18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b1c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f023 0302 	bic.w	r3, r3, #2
 8001b30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b34:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0204 	bic.w	r2, r2, #4
 8001b44:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fcf8 	bl	8001544 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fd28 	bl	80025b2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0208 	bic.w	r2, r2, #8
 8001b70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff fce2 	bl	8001544 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00e      	b.n	8001bac <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	3212      	adds	r2, #18
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d9ed      	bls.n	8001b8e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Return function status */
    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e000      	b.n	8001bc6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
  }
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	fffe5f3e 	.word	0xfffe5f3e

08001bd4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e045      	b.n	8001c84 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfe:	2b23      	cmp	r3, #35	@ 0x23
 8001c00:	d13f      	bne.n	8001c82 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 ff9e 	bl	8002b50 <ETH_Prepare_Tx_Descriptors>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c20:	f043 0202 	orr.w	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e02a      	b.n	8001c84 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c2e:	f3bf 8f4f 	dsb	sy
}
 8001c32:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d904      	bls.n	8001c50 <HAL_ETH_Transmit_IT+0x7c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	1f1a      	subs	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00d      	beq.n	8001c7e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0a8      	b.n	8001e0a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cbe:	2b23      	cmp	r3, #35	@ 0x23
 8001cc0:	d001      	beq.n	8001cc6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0a1      	b.n	8001e0a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	3212      	adds	r2, #18
 8001cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cdc:	f1c3 0304 	rsb	r3, r3, #4
 8001ce0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ce2:	e06a      	b.n	8001dba <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d103      	bne.n	8001d14 <HAL_ETH_ReadData+0x88>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d040      	beq.n	8001d96 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0c1b      	lsrs	r3, r3, #16
 8001d44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d48:	3b04      	subs	r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d70:	461a      	mov	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f005 f88d 	bl	8006e94 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	441a      	add	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d902      	bls.n	8001da8 <HAL_ETH_ReadData+0x11c>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b04      	subs	r3, #4
 8001da6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	3212      	adds	r2, #18
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db06      	blt.n	8001dd0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d202      	bcs.n	8001dd0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d089      	beq.n	8001ce4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	441a      	add	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f815 	bl	8001e14 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d108      	bne.n	8001e08 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001e20:	2301      	movs	r3, #1
 8001e22:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e28:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	3212      	adds	r2, #18
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e3a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001e3c:	e040      	b.n	8001ec0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d112      	bne.n	8001e6c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fff2 	bl	8006e34 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	74fb      	strb	r3, [r7, #19]
 8001e5a:	e007      	b.n	8001e6c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	461a      	mov	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d026      	beq.n	8001ec0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <ETH_UpdateDescriptor+0xe4>)
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	e003      	b.n	8001e8a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001e88:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e8a:	f3bf 8f5f 	dmb	sy
}
 8001e8e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d902      	bls.n	8001eae <ETH_UpdateDescriptor+0x9a>
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	3212      	adds	r2, #18
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <ETH_UpdateDescriptor+0xb8>
 8001ec6:	7cfb      	ldrb	r3, [r7, #19]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1b8      	bne.n	8001e3e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d00c      	beq.n	8001ef0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	80004600 	.word	0x80004600

08001efc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3318      	adds	r3, #24
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	61bb      	str	r3, [r7, #24]
  uint8_t pktTxStatus = 1U;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
  uint8_t pktInUse;
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3384      	adds	r3, #132	@ 0x84
 8001f1e:	60fb      	str	r3, [r7, #12]
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f20:	e05f      	b.n	8001fe2 <HAL_ETH_ReleaseTxPacket+0xe6>
  {
    pktInUse = 1U;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75bb      	strb	r3, [r7, #22]
    numOfBuf--;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	3304      	adds	r3, #4
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d106      	bne.n	8001f4a <HAL_ETH_ReleaseTxPacket+0x4e>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	61bb      	str	r3, [r7, #24]
      pktInUse = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75bb      	strb	r3, [r7, #22]
    }

    if (pktInUse != 0U)
 8001f4a:	7dbb      	ldrb	r3, [r7, #22]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d048      	beq.n	8001fe2 <HAL_ETH_ReleaseTxPacket+0xe6>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68d9      	ldr	r1, [r3, #12]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db3b      	blt.n	8001fde <HAL_ETH_ReleaseTxPacket+0xe2>
      {
#ifdef HAL_ETH_USE_PTP
        /* Get timestamp low */
        timestamp->TimeStampLow = heth->Init.TxDesc[idx].DESC6;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68d9      	ldr	r1, [r3, #12]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]
        /* Get timestamp high */
        timestamp->TimeStampHigh = heth->Init.TxDesc[idx].DESC7;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68d9      	ldr	r1, [r3, #12]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
        heth->txFreeCallback(dmatxdesclist->PacketAddress[idx]);
#else
        /* Call callbacks */
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	3304      	adds	r3, #4
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f829 	bl	8001ff8 <HAL_ETH_TxPtpCallback>
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	3304      	adds	r3, #4
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 ffb0 	bl	8006f18 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	61bb      	str	r3, [r7, #24]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fdc:	e001      	b.n	8001fe2 <HAL_ETH_ReleaseTxPacket+0xe6>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_ETH_ReleaseTxPacket+0xf2>
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d199      	bne.n	8001f22 <HAL_ETH_ReleaseTxPacket+0x26>
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_ETH_TxPtpCallback>:
  * @brief  Tx Ptp callback.
  * @param  buff: pointer to application buffer
  * @retval None
  */
__weak void HAL_ETH_TxPtpCallback(uint32_t *buff, ETH_TimeStampTypeDef *timestamp)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxPtpCallback could be implemented in the user file
  */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002026:	2b40      	cmp	r3, #64	@ 0x40
 8002028:	d112      	bne.n	8002050 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002038:	2b40      	cmp	r3, #64	@ 0x40
 800203a:	d109      	bne.n	8002050 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002044:	461a      	mov	r2, r3
 8002046:	4b50      	ldr	r3, [pc, #320]	@ (8002188 <HAL_ETH_IRQHandler+0x178>)
 8002048:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f004 fa86 	bl	800655c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d113      	bne.n	800208a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10a      	bne.n	800208a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207c:	461a      	mov	r2, r3
 800207e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002082:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f004 fa79 	bl	800657c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800209c:	d14c      	bne.n	8002138 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020b0:	d142      	bne.n	8002138 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b8:	f043 0208 	orr.w	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020d4:	d11a      	bne.n	800210c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_ETH_IRQHandler+0x17c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80020fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002100:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	22e0      	movs	r2, #224	@ 0xe0
 8002106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800210a:	e012      	b.n	8002132 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	f248 6380 	movw	r3, #34432	@ 0x8680
 800211a:	4013      	ands	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800212a:	461a      	mov	r2, r3
 800212c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002130:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f004 fa32 	bl	800659c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d10e      	bne.n	8002164 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f81c 	bl	8002194 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_ETH_IRQHandler+0x180>)
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002170:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <HAL_ETH_IRQHandler+0x180>)
 8002172:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002176:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f815 	bl	80021a8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	00010040 	.word	0x00010040
 800218c:	007e2000 	.word	0x007e2000
 8002190:	40013c00 	.word	0x40013c00

08002194 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 031c 	and.w	r3, r3, #28
 80021d8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	02db      	lsls	r3, r3, #11
 80021de:	b29b      	uxth	r3, r3
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f023 0302 	bic.w	r3, r3, #2
 80021fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800220c:	f7ff f98e 	bl	800152c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002212:	e00d      	b.n	8002230 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002214:	f7ff f98a 	bl	800152c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002222:	d301      	bcc.n	8002228 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e010      	b.n	800224a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ec      	bne.n	8002214 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 031c 	and.w	r3, r3, #28
 800226e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	02db      	lsls	r3, r3, #11
 8002274:	b29b      	uxth	r3, r3
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	019b      	lsls	r3, r3, #6
 8002280:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ac:	f7ff f93e 	bl	800152c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022b2:	e00d      	b.n	80022d0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022b4:	f7ff f93a 	bl	800152c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c2:	d301      	bcc.n	80022c8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e009      	b.n	80022dc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ec      	bne.n	80022b4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0d9      	b.n	80024ac <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf0c      	ite	eq
 8002366:	2301      	moveq	r3, #1
 8002368:	2300      	movne	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bf0c      	ite	eq
 80023b6:	2301      	moveq	r3, #1
 80023b8:	2300      	movne	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	b29a      	uxth	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e00b      	b.n	80024e4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d105      	bne.n	80024e2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f88f 	bl	80025fc <ETH_SetMACConfig>

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 031c 	bic.w	r3, r3, #28
 8002502:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002504:	f001 fc0c 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8002508:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4a1d      	ldr	r2, [pc, #116]	@ (8002584 <HAL_ETH_SetMDIOClockRange+0x98>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d908      	bls.n	8002524 <HAL_ETH_SetMDIOClockRange+0x38>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4a1c      	ldr	r2, [pc, #112]	@ (8002588 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d804      	bhi.n	8002524 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e027      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4a18      	ldr	r2, [pc, #96]	@ (8002588 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d908      	bls.n	800253e <HAL_ETH_SetMDIOClockRange+0x52>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4a17      	ldr	r2, [pc, #92]	@ (800258c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d204      	bcs.n	800253e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f043 030c 	orr.w	r3, r3, #12
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e01a      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4a12      	ldr	r2, [pc, #72]	@ (800258c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d303      	bcc.n	800254e <HAL_ETH_SetMDIOClockRange+0x62>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4a11      	ldr	r2, [pc, #68]	@ (8002590 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d911      	bls.n	8002572 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4a0f      	ldr	r2, [pc, #60]	@ (8002590 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d908      	bls.n	8002568 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d804      	bhi.n	8002568 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	e005      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e000      	b.n	8002574 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002572:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	611a      	str	r2, [r3, #16]
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	01312cff 	.word	0x01312cff
 8002588:	02160ebf 	.word	0x02160ebf
 800258c:	03938700 	.word	0x03938700
 8002590:	05f5e0ff 	.word	0x05f5e0ff
 8002594:	08f0d17f 	.word	0x08f0d17f

08002598 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7fe ffae 	bl	8001544 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025f2:	6193      	str	r3, [r2, #24]
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <ETH_SetMACConfig+0x15c>)
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	7c1b      	ldrb	r3, [r3, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <ETH_SetMACConfig+0x28>
 800261e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002622:	e000      	b.n	8002626 <ETH_SetMACConfig+0x2a>
 8002624:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7c5b      	ldrb	r3, [r3, #17]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <ETH_SetMACConfig+0x38>
 800262e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002632:	e000      	b.n	8002636 <ETH_SetMACConfig+0x3a>
 8002634:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002636:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800263c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	7fdb      	ldrb	r3, [r3, #31]
 8002642:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002644:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800264a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	7f92      	ldrb	r2, [r2, #30]
 8002650:	2a00      	cmp	r2, #0
 8002652:	d102      	bne.n	800265a <ETH_SetMACConfig+0x5e>
 8002654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002658:	e000      	b.n	800265c <ETH_SetMACConfig+0x60>
 800265a:	2200      	movs	r2, #0
                        macconf->Speed |
 800265c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	7f1b      	ldrb	r3, [r3, #28]
 8002662:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002664:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800266a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	791b      	ldrb	r3, [r3, #4]
 8002670:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002672:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	f892 2020 	ldrb.w	r2, [r2, #32]
 800267a:	2a00      	cmp	r2, #0
 800267c:	d102      	bne.n	8002684 <ETH_SetMACConfig+0x88>
 800267e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002682:	e000      	b.n	8002686 <ETH_SetMACConfig+0x8a>
 8002684:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002686:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	7bdb      	ldrb	r3, [r3, #15]
 800268c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800268e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002694:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800269c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800269e:	4313      	orrs	r3, r2
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7fe ff44 	bl	8001544 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026da:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	d101      	bne.n	80026ea <ETH_SetMACConfig+0xee>
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	e000      	b.n	80026ec <ETH_SetMACConfig+0xf0>
 80026ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026ec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80026fa:	2a01      	cmp	r2, #1
 80026fc:	d101      	bne.n	8002702 <ETH_SetMACConfig+0x106>
 80026fe:	2208      	movs	r2, #8
 8002700:	e000      	b.n	8002704 <ETH_SetMACConfig+0x108>
 8002702:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002704:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800270c:	2a01      	cmp	r2, #1
 800270e:	d101      	bne.n	8002714 <ETH_SetMACConfig+0x118>
 8002710:	2204      	movs	r2, #4
 8002712:	e000      	b.n	8002716 <ETH_SetMACConfig+0x11a>
 8002714:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002716:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800271e:	2a01      	cmp	r2, #1
 8002720:	d101      	bne.n	8002726 <ETH_SetMACConfig+0x12a>
 8002722:	2202      	movs	r2, #2
 8002724:	e000      	b.n	8002728 <ETH_SetMACConfig+0x12c>
 8002726:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002728:	4313      	orrs	r3, r2
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002740:	2001      	movs	r0, #1
 8002742:	f7fe feff 	bl	8001544 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	ff20810f 	.word	0xff20810f

0800275c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <ETH_SetDMAConfig+0x110>)
 8002776:	4013      	ands	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	7b1b      	ldrb	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <ETH_SetDMAConfig+0x2c>
 8002782:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002786:	e000      	b.n	800278a <ETH_SetDMAConfig+0x2e>
 8002788:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7b5b      	ldrb	r3, [r3, #13]
 800278e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002790:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	7f52      	ldrb	r2, [r2, #29]
 8002796:	2a00      	cmp	r2, #0
 8002798:	d102      	bne.n	80027a0 <ETH_SetDMAConfig+0x44>
 800279a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800279e:	e000      	b.n	80027a2 <ETH_SetDMAConfig+0x46>
 80027a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	7b9b      	ldrb	r3, [r3, #14]
 80027a8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027aa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	7f1b      	ldrb	r3, [r3, #28]
 80027b6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7f9b      	ldrb	r3, [r3, #30]
 80027be:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027c0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027ce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027e0:	461a      	mov	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7fe fea6 	bl	8001544 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002800:	461a      	mov	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	791b      	ldrb	r3, [r3, #4]
 800280a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002810:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002816:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800281c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002824:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002826:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800282e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002834:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800283e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002842:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002850:	2001      	movs	r0, #1
 8002852:	f7fe fe77 	bl	8001544 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	f8de3f23 	.word	0xf8de3f23

08002870 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0a6      	sub	sp, #152	@ 0x98
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002884:	2300      	movs	r3, #0
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028ac:	2300      	movs	r3, #0
 80028ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fe86 	bl	80025fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028fe:	2301      	movs	r3, #1
 8002900:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002912:	2300      	movs	r3, #0
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800291c:	2301      	movs	r3, #1
 800291e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002920:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002924:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002926:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800292a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800292c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002930:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002938:	2300      	movs	r3, #0
 800293a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff08 	bl	800275c <ETH_SetDMAConfig>
}
 800294c:	bf00      	nop
 800294e:	3798      	adds	r7, #152	@ 0x98
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3305      	adds	r3, #5
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	3204      	adds	r2, #4
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <ETH_MACAddressConfig+0x68>)
 8002976:	4413      	add	r3, r2
 8002978:	461a      	mov	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3303      	adds	r3, #3
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	061a      	lsls	r2, r3, #24
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3302      	adds	r3, #2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3301      	adds	r3, #1
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	4313      	orrs	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <ETH_MACAddressConfig+0x6c>)
 80029a6:	4413      	add	r3, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	6013      	str	r3, [r2, #0]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40028040 	.word	0x40028040
 80029c0:	40028044 	.word	0x40028044

080029c4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e03e      	b.n	8002a50 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	3206      	adds	r2, #6
 8002a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d80c      	bhi.n	8002a34 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68d9      	ldr	r1, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	e004      	b.n	8002a3e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d9bd      	bls.n	80029d2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a68:	611a      	str	r2, [r3, #16]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e046      	b.n	8002b12 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6919      	ldr	r1, [r3, #16]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002ac8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	3212      	adds	r2, #18
 8002ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d80c      	bhi.n	8002b02 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6919      	ldr	r1, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	e004      	b.n	8002b0c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d9b5      	bls.n	8002a84 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b42:	60da      	str	r2, [r3, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b08d      	sub	sp, #52	@ 0x34
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3318      	adds	r3, #24
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b92:	d007      	beq.n	8002ba4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b98:	3304      	adds	r3, #4
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0ff      	b.n	8002da8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	3301      	adds	r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4b7d      	ldr	r3, [pc, #500]	@ (8002db4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	6852      	ldr	r2, [r2, #4]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c2a:	f3bf 8f5f 	dmb	sy
}
 8002c2e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c3c:	e082      	b.n	8002d44 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e005      	b.n	8002c6a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d902      	bls.n	8002c7c <ETH_Prepare_Tx_Descriptors+0x12c>
 8002c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c9e:	d007      	beq.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d029      	beq.n	8002d04 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cc2:	e019      	b.n	8002cf8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002cc4:	f3bf 8f5f 	dmb	sy
}
 8002cc8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd8:	3301      	adds	r3, #1
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d902      	bls.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x198>
 8002ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce4:	3b04      	subs	r3, #4
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3e1      	bcc.n	8002cc4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d00:	2302      	movs	r3, #2
 8002d02:	e051      	b.n	8002da8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	3301      	adds	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	6852      	ldr	r2, [r2, #4]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d32:	f3bf 8f5f 	dmb	sy
}
 8002d36:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f af78 	bne.w	8002c3e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e005      	b.n	8002d6e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	3304      	adds	r3, #4
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d90:	b672      	cpsid	i
}
 8002d92:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002da2:	b662      	cpsie	i
}
 8002da4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3734      	adds	r7, #52	@ 0x34
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	ffffe000 	.word	0xffffe000

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e175      	b.n	80030c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8164 	bne.w	80030be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d005      	beq.n	8002e0e <HAL_GPIO_Init+0x56>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d130      	bne.n	8002e70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e44:	2201      	movs	r2, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 0201 	and.w	r2, r3, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d017      	beq.n	8002eac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d123      	bne.n	8002f00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	08da      	lsrs	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3208      	adds	r2, #8
 8002ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	220f      	movs	r2, #15
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	08da      	lsrs	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3208      	adds	r2, #8
 8002efa:	69b9      	ldr	r1, [r7, #24]
 8002efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0203 	and.w	r2, r3, #3
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80be 	beq.w	80030be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b66      	ldr	r3, [pc, #408]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f4e:	4b63      	ldr	r3, [pc, #396]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f5a:	4a61      	ldr	r2, [pc, #388]	@ (80030e0 <HAL_GPIO_Init+0x328>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <HAL_GPIO_Init+0x32c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d037      	beq.n	8002ff6 <HAL_GPIO_Init+0x23e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a57      	ldr	r2, [pc, #348]	@ (80030e8 <HAL_GPIO_Init+0x330>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d031      	beq.n	8002ff2 <HAL_GPIO_Init+0x23a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a56      	ldr	r2, [pc, #344]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d02b      	beq.n	8002fee <HAL_GPIO_Init+0x236>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a55      	ldr	r2, [pc, #340]	@ (80030f0 <HAL_GPIO_Init+0x338>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d025      	beq.n	8002fea <HAL_GPIO_Init+0x232>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a54      	ldr	r2, [pc, #336]	@ (80030f4 <HAL_GPIO_Init+0x33c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01f      	beq.n	8002fe6 <HAL_GPIO_Init+0x22e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a53      	ldr	r2, [pc, #332]	@ (80030f8 <HAL_GPIO_Init+0x340>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d019      	beq.n	8002fe2 <HAL_GPIO_Init+0x22a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_GPIO_Init+0x344>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_GPIO_Init+0x226>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a51      	ldr	r2, [pc, #324]	@ (8003100 <HAL_GPIO_Init+0x348>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00d      	beq.n	8002fda <HAL_GPIO_Init+0x222>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a50      	ldr	r2, [pc, #320]	@ (8003104 <HAL_GPIO_Init+0x34c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <HAL_GPIO_Init+0x21e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8003108 <HAL_GPIO_Init+0x350>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_GPIO_Init+0x21a>
 8002fce:	2309      	movs	r3, #9
 8002fd0:	e012      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	e010      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	e00e      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e00c      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fde:	2306      	movs	r3, #6
 8002fe0:	e00a      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	e008      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fea:	2303      	movs	r3, #3
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003008:	4935      	ldr	r1, [pc, #212]	@ (80030e0 <HAL_GPIO_Init+0x328>)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003016:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <HAL_GPIO_Init+0x354>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303a:	4a34      	ldr	r2, [pc, #208]	@ (800310c <HAL_GPIO_Init+0x354>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003040:	4b32      	ldr	r3, [pc, #200]	@ (800310c <HAL_GPIO_Init+0x354>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003064:	4a29      	ldr	r2, [pc, #164]	@ (800310c <HAL_GPIO_Init+0x354>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306a:	4b28      	ldr	r3, [pc, #160]	@ (800310c <HAL_GPIO_Init+0x354>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800308e:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <HAL_GPIO_Init+0x354>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_GPIO_Init+0x354>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b8:	4a14      	ldr	r2, [pc, #80]	@ (800310c <HAL_GPIO_Init+0x354>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	f67f ae86 	bls.w	8002dd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	@ 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40021400 	.word	0x40021400
 80030fc:	40021800 	.word	0x40021800
 8003100:	40021c00 	.word	0x40021c00
 8003104:	40022000 	.word	0x40022000
 8003108:	40022400 	.word	0x40022400
 800310c:	40013c00 	.word	0x40013c00

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800312c:	e003      	b.n	8003136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	b08f      	sub	sp, #60	@ 0x3c
 8003146:	af0a      	add	r7, sp, #40	@ 0x28
 8003148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e116      	b.n	8003382 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fe70 	bl	8000e54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2203      	movs	r2, #3
 8003178:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f002 fdd8 	bl	8005d48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	687e      	ldr	r6, [r7, #4]
 80031a0:	466d      	mov	r5, sp
 80031a2:	f106 0410 	add.w	r4, r6, #16
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b6:	1d33      	adds	r3, r6, #4
 80031b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f002 fd6c 	bl	8005c98 <USB_CoreInit>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0d7      	b.n	8003382 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 fdc6 	bl	8005d6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	e04a      	b.n	800327a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	333d      	adds	r3, #61	@ 0x3d
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	333c      	adds	r3, #60	@ 0x3c
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	b298      	uxth	r0, r3
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3344      	adds	r3, #68	@ 0x44
 8003220:	4602      	mov	r2, r0
 8003222:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3340      	adds	r3, #64	@ 0x40
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	3348      	adds	r3, #72	@ 0x48
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	334c      	adds	r3, #76	@ 0x4c
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3354      	adds	r3, #84	@ 0x54
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	3301      	adds	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	d3af      	bcc.n	80031e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e044      	b.n	8003314 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	3301      	adds	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	429a      	cmp	r2, r3
 800331c:	d3b5      	bcc.n	800328a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	687e      	ldr	r6, [r7, #4]
 8003326:	466d      	mov	r5, sp
 8003328:	f106 0410 	add.w	r4, r6, #16
 800332c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003338:	e885 0003 	stmia.w	r5, {r0, r1}
 800333c:	1d33      	adds	r3, r6, #4
 800333e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003340:	6838      	ldr	r0, [r7, #0]
 8003342:	f002 fd5f 	bl	8005e04 <USB_DevInit>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e014      	b.n	8003382 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f80b 	bl	800338c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f002 ff1d 	bl	80061ba <USB_DevDisconnect>

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800338c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ba:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	10000003 	.word	0x10000003

080033d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40007000 	.word	0x40007000

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e291      	b.n	800392e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8087 	beq.w	8003526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003418:	4b96      	ldr	r3, [pc, #600]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b04      	cmp	r3, #4
 8003422:	d00c      	beq.n	800343e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003424:	4b93      	ldr	r3, [pc, #588]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d112      	bne.n	8003456 <HAL_RCC_OscConfig+0x62>
 8003430:	4b90      	ldr	r3, [pc, #576]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343c:	d10b      	bne.n	8003456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343e:	4b8d      	ldr	r3, [pc, #564]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d06c      	beq.n	8003524 <HAL_RCC_OscConfig+0x130>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d168      	bne.n	8003524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e26b      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x7a>
 8003460:	4b84      	ldr	r3, [pc, #528]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a83      	ldr	r2, [pc, #524]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	e02e      	b.n	80034cc <HAL_RCC_OscConfig+0xd8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x9c>
 8003476:	4b7f      	ldr	r3, [pc, #508]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7e      	ldr	r2, [pc, #504]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 800347c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b7c      	ldr	r3, [pc, #496]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7b      	ldr	r2, [pc, #492]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e01d      	b.n	80034cc <HAL_RCC_OscConfig+0xd8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 800349a:	4b76      	ldr	r3, [pc, #472]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a75      	ldr	r2, [pc, #468]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b73      	ldr	r3, [pc, #460]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a72      	ldr	r2, [pc, #456]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0xd8>
 80034b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe f82a 	bl	800152c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe f826 	bl	800152c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e21f      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b61      	ldr	r3, [pc, #388]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe f816 	bl	800152c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe f812 	bl	800152c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	@ 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e20b      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	4b57      	ldr	r3, [pc, #348]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x110>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d069      	beq.n	8003606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003532:	4b50      	ldr	r3, [pc, #320]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b4d      	ldr	r3, [pc, #308]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d11c      	bne.n	8003584 <HAL_RCC_OscConfig+0x190>
 800354a:	4b4a      	ldr	r3, [pc, #296]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	4b47      	ldr	r3, [pc, #284]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x17a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e1df      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356e:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	493d      	ldr	r1, [pc, #244]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	e040      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358c:	4b39      	ldr	r3, [pc, #228]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a38      	ldr	r2, [pc, #224]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fd ffc8 	bl	800152c <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fd ffc4 	bl	800152c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1bd      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b30      	ldr	r3, [pc, #192]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b2d      	ldr	r3, [pc, #180]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4929      	ldr	r1, [pc, #164]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
 80035d2:	e018      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d4:	4b27      	ldr	r3, [pc, #156]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a26      	ldr	r2, [pc, #152]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd ffa4 	bl	800152c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fd ffa0 	bl	800152c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e199      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d038      	beq.n	8003684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b16      	ldr	r3, [pc, #88]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 800361c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361e:	4a15      	ldr	r2, [pc, #84]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fd ff81 	bl	800152c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362e:	f7fd ff7d 	bl	800152c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e176      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x23a>
 800364c:	e01a      	b.n	8003684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003652:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <HAL_RCC_OscConfig+0x280>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365a:	f7fd ff67 	bl	800152c <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003662:	f7fd ff63 	bl	800152c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d903      	bls.n	8003678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e15c      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
 8003674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b91      	ldr	r3, [pc, #580]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ee      	bne.n	8003662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a4 	beq.w	80037da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003692:	4b8b      	ldr	r3, [pc, #556]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	4b88      	ldr	r3, [pc, #544]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	4a87      	ldr	r2, [pc, #540]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036aa:	4b85      	ldr	r3, [pc, #532]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ba:	4b82      	ldr	r3, [pc, #520]	@ (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036c6:	4b7f      	ldr	r3, [pc, #508]	@ (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7e      	ldr	r2, [pc, #504]	@ (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fd ff2b 	bl	800152c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fd ff27 	bl	800152c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	@ 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e120      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ec:	4b75      	ldr	r3, [pc, #468]	@ (80038c4 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x31a>
 8003700:	4b6f      	ldr	r3, [pc, #444]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a6e      	ldr	r2, [pc, #440]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
 800370c:	e02d      	b.n	800376a <HAL_RCC_OscConfig+0x376>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x33c>
 8003716:	4b6a      	ldr	r3, [pc, #424]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	4a69      	ldr	r2, [pc, #420]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6713      	str	r3, [r2, #112]	@ 0x70
 8003722:	4b67      	ldr	r3, [pc, #412]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a66      	ldr	r2, [pc, #408]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
 800372e:	e01c      	b.n	800376a <HAL_RCC_OscConfig+0x376>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d10c      	bne.n	8003752 <HAL_RCC_OscConfig+0x35e>
 8003738:	4b61      	ldr	r3, [pc, #388]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	4a60      	ldr	r2, [pc, #384]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6713      	str	r3, [r2, #112]	@ 0x70
 8003744:	4b5e      	ldr	r3, [pc, #376]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a5d      	ldr	r2, [pc, #372]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003750:	e00b      	b.n	800376a <HAL_RCC_OscConfig+0x376>
 8003752:	4b5b      	ldr	r3, [pc, #364]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003756:	4a5a      	ldr	r2, [pc, #360]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	@ 0x70
 800375e:	4b58      	ldr	r3, [pc, #352]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	4a57      	ldr	r2, [pc, #348]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fedb 	bl	800152c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fd fed7 	bl	800152c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0ce      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003790:	4b4b      	ldr	r3, [pc, #300]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ee      	beq.n	800377a <HAL_RCC_OscConfig+0x386>
 800379c:	e014      	b.n	80037c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fd fec5 	bl	800152c <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd fec1 	bl	800152c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0b8      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037bc:	4b40      	ldr	r3, [pc, #256]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b3c      	ldr	r3, [pc, #240]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	4a3b      	ldr	r2, [pc, #236]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a4 	beq.w	800392c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e4:	4b36      	ldr	r3, [pc, #216]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d06b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d149      	bne.n	800388c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f8:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a30      	ldr	r2, [pc, #192]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80037fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fe92 	bl	800152c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380c:	f7fd fe8e 	bl	800152c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e087      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	4b28      	ldr	r3, [pc, #160]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	061b      	lsls	r3, r3, #24
 800384e:	4313      	orrs	r3, r2
 8003850:	4a1b      	ldr	r2, [pc, #108]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003852:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003856:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800385e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fe62 	bl	800152c <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fd fe5e 	bl	800152c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e057      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x478>
 800388a:	e04f      	b.n	800392c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388c:	4b0c      	ldr	r3, [pc, #48]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0b      	ldr	r2, [pc, #44]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 8003892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fd fe48 	bl	800152c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd fe44 	bl	800152c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e03d      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <HAL_RCC_OscConfig+0x4cc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4ac>
 80038be:	e035      	b.n	800392c <HAL_RCC_OscConfig+0x538>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <HAL_RCC_OscConfig+0x544>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d028      	beq.n	8003928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d121      	bne.n	8003928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d11a      	bne.n	8003928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003900:	4293      	cmp	r3, r2
 8003902:	d111      	bne.n	8003928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	3b01      	subs	r3, #1
 8003912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d107      	bne.n	8003928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0d0      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003954:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d910      	bls.n	8003984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b67      	ldr	r3, [pc, #412]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 020f 	bic.w	r2, r3, #15
 800396a:	4965      	ldr	r1, [pc, #404]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b63      	ldr	r3, [pc, #396]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0b8      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800399c:	4b59      	ldr	r3, [pc, #356]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a58      	ldr	r2, [pc, #352]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b4:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a52      	ldr	r2, [pc, #328]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c0:	4b50      	ldr	r3, [pc, #320]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	494d      	ldr	r1, [pc, #308]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d040      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d115      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e07f      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e073      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e06b      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1e:	4b39      	ldr	r3, [pc, #228]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 0203 	bic.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4936      	ldr	r1, [pc, #216]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fd fd7c 	bl	800152c <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a38:	f7fd fd78 	bl	800152c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e053      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 020c 	and.w	r2, r3, #12
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d1eb      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a60:	4b27      	ldr	r3, [pc, #156]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d210      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	4922      	ldr	r1, [pc, #136]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e032      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4916      	ldr	r1, [pc, #88]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	490e      	ldr	r1, [pc, #56]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ace:	f000 f821 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	490a      	ldr	r1, [pc, #40]	@ (8003b08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_RCC_ClockConfig+0x1d4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fcd8 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40023c00 	.word	0x40023c00
 8003b04:	40023800 	.word	0x40023800
 8003b08:	080183e4 	.word	0x080183e4
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b094      	sub	sp, #80	@ 0x50
 8003b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b20:	2300      	movs	r3, #0
 8003b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b24:	2300      	movs	r3, #0
 8003b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b2c:	4b79      	ldr	r3, [pc, #484]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d00d      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0x40>
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	f200 80e1 	bhi.w	8003d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x34>
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b46:	e0db      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b73      	ldr	r3, [pc, #460]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b4c:	e0db      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b4e:	4b73      	ldr	r3, [pc, #460]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b52:	e0d8      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b54:	4b6f      	ldr	r3, [pc, #444]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d063      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	2200      	movs	r2, #0
 8003b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	f04f 0000 	mov.w	r0, #0
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	0159      	lsls	r1, r3, #5
 8003b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b98:	0150      	lsls	r0, r2, #5
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	1a51      	subs	r1, r2, r1
 8003ba2:	6139      	str	r1, [r7, #16]
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	018b      	lsls	r3, r1, #6
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	018a      	lsls	r2, r1, #6
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bcc:	4659      	mov	r1, fp
 8003bce:	eb63 0901 	sbc.w	r9, r3, r1
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be6:	4690      	mov	r8, r2
 8003be8:	4699      	mov	r9, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	eb18 0303 	adds.w	r3, r8, r3
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	eb49 0303 	adc.w	r3, r9, r3
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c06:	4629      	mov	r1, r5
 8003c08:	024b      	lsls	r3, r1, #9
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c10:	4621      	mov	r1, r4
 8003c12:	024a      	lsls	r2, r1, #9
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c24:	f7fc fb44 	bl	80002b0 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c30:	e058      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b38      	ldr	r3, [pc, #224]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	f04f 0000 	mov.w	r0, #0
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	0159      	lsls	r1, r3, #5
 8003c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5e:	0150      	lsls	r0, r2, #5
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4641      	mov	r1, r8
 8003c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c84:	ebb2 040a 	subs.w	r4, r2, sl
 8003c88:	eb63 050b 	sbc.w	r5, r3, fp
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	00eb      	lsls	r3, r5, #3
 8003c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c9a:	00e2      	lsls	r2, r4, #3
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	18e3      	adds	r3, r4, r3
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	eb45 0303 	adc.w	r3, r5, r3
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	028b      	lsls	r3, r1, #10
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	028a      	lsls	r2, r1, #10
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	61fa      	str	r2, [r7, #28]
 8003cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd8:	f7fc faea 	bl	80002b0 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3750      	adds	r7, #80	@ 0x50
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	080183f4 	.word	0x080183f4

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d64:	f7ff ffdc 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0b5b      	lsrs	r3, r3, #13
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	@ (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	080183f4 	.word	0x080183f4

08003d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db0:	4b69      	ldr	r3, [pc, #420]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4a68      	ldr	r2, [pc, #416]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	4b66      	ldr	r3, [pc, #408]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc4:	4964      	ldr	r1, [pc, #400]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d017      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003de8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	4959      	ldr	r1, [pc, #356]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	494a      	ldr	r1, [pc, #296]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 808b 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	4a39      	ldr	r2, [pc, #228]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e78:	4b37      	ldr	r3, [pc, #220]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e84:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a34      	ldr	r2, [pc, #208]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd fb4c 	bl	800152c <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd fb48 	bl	800152c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e357      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eb6:	4b28      	ldr	r3, [pc, #160]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d035      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d02e      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed4:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003edc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ede:	4b1e      	ldr	r3, [pc, #120]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eea:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003efc:	4b16      	ldr	r3, [pc, #88]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d114      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fb10 	bl	800152c <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd fb0c 	bl	800152c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e319      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	4901      	ldr	r1, [pc, #4]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	0ffffcff 	.word	0x0ffffcff
 8003f64:	4baa      	ldr	r3, [pc, #680]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4aa9      	ldr	r2, [pc, #676]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	4ba7      	ldr	r3, [pc, #668]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	49a4      	ldr	r1, [pc, #656]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f8e:	4ba0      	ldr	r3, [pc, #640]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f94:	4a9e      	ldr	r2, [pc, #632]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	4999      	ldr	r1, [pc, #612]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fbc:	4b94      	ldr	r3, [pc, #592]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fca:	4991      	ldr	r1, [pc, #580]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fde:	4b8c      	ldr	r3, [pc, #560]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fec:	4988      	ldr	r1, [pc, #544]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004000:	4b83      	ldr	r3, [pc, #524]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800400e:	4980      	ldr	r1, [pc, #512]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004022:	4b7b      	ldr	r3, [pc, #492]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	4977      	ldr	r1, [pc, #476]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004044:	4b72      	ldr	r3, [pc, #456]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	496f      	ldr	r1, [pc, #444]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004066:	4b6a      	ldr	r3, [pc, #424]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f023 020c 	bic.w	r2, r3, #12
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004074:	4966      	ldr	r1, [pc, #408]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004088:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004096:	495e      	ldr	r1, [pc, #376]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040aa:	4b59      	ldr	r3, [pc, #356]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b8:	4955      	ldr	r1, [pc, #340]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040cc:	4b50      	ldr	r3, [pc, #320]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040da:	494d      	ldr	r1, [pc, #308]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040ee:	4b48      	ldr	r3, [pc, #288]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	4944      	ldr	r1, [pc, #272]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004110:	4b3f      	ldr	r3, [pc, #252]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411e:	493c      	ldr	r1, [pc, #240]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004140:	4933      	ldr	r1, [pc, #204]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004154:	4b2e      	ldr	r3, [pc, #184]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004162:	492b      	ldr	r1, [pc, #172]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004184:	4922      	ldr	r1, [pc, #136]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004194:	d101      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b6:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c4:	4912      	ldr	r1, [pc, #72]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e8:	4909      	ldr	r1, [pc, #36]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d006      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80d9 	beq.w	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004204:	4b02      	ldr	r3, [pc, #8]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a01      	ldr	r2, [pc, #4]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800420e:	e001      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004210:	40023800 	.word	0x40023800
 8004214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004216:	f7fd f989 	bl	800152c <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800421e:	f7fd f985 	bl	800152c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	@ 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e194      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004230:	4b6c      	ldr	r3, [pc, #432]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d021      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11d      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004250:	4b64      	ldr	r3, [pc, #400]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800425e:	4b61      	ldr	r3, [pc, #388]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004264:	0e1b      	lsrs	r3, r3, #24
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	019a      	lsls	r2, r3, #6
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	071b      	lsls	r3, r3, #28
 8004284:	4957      	ldr	r1, [pc, #348]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d02e      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b6:	d129      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042b8:	4b4a      	ldr	r3, [pc, #296]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c6:	4b47      	ldr	r3, [pc, #284]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042cc:	0f1b      	lsrs	r3, r3, #28
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	019a      	lsls	r2, r3, #6
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	071b      	lsls	r3, r3, #28
 80042ec:	493d      	ldr	r1, [pc, #244]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042f4:	4b3b      	ldr	r3, [pc, #236]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042fa:	f023 021f 	bic.w	r2, r3, #31
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	3b01      	subs	r3, #1
 8004304:	4937      	ldr	r1, [pc, #220]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01d      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004318:	4b32      	ldr	r3, [pc, #200]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800431e:	0e1b      	lsrs	r3, r3, #24
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004326:	4b2f      	ldr	r3, [pc, #188]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432c:	0f1b      	lsrs	r3, r3, #28
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	019a      	lsls	r2, r3, #6
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	431a      	orrs	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	071b      	lsls	r3, r3, #28
 800434c:	4925      	ldr	r1, [pc, #148]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d011      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	019a      	lsls	r2, r3, #6
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	071b      	lsls	r3, r3, #28
 800437c:	4919      	ldr	r1, [pc, #100]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004384:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a16      	ldr	r2, [pc, #88]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800438e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004390:	f7fd f8cc 	bl	800152c <HAL_GetTick>
 8004394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004398:	f7fd f8c8 	bl	800152c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0d7      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043aa:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	f040 80cd 	bne.w	8004558 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043be:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a08      	ldr	r2, [pc, #32]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ca:	f7fd f8af 	bl	800152c <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043d2:	f7fd f8ab 	bl	800152c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b64      	cmp	r3, #100	@ 0x64
 80043de:	d903      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0ba      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043f4:	d0ed      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02e      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d12a      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800441e:	4b51      	ldr	r3, [pc, #324]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800442c:	4b4d      	ldr	r3, [pc, #308]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	0f1b      	lsrs	r3, r3, #28
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	071b      	lsls	r3, r3, #28
 8004452:	4944      	ldr	r1, [pc, #272]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800445a:	4b42      	ldr	r3, [pc, #264]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004460:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	493d      	ldr	r1, [pc, #244]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d022      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004488:	d11d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800448a:	4b36      	ldr	r3, [pc, #216]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	0e1b      	lsrs	r3, r3, #24
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004498:	4b32      	ldr	r3, [pc, #200]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449e:	0f1b      	lsrs	r3, r3, #28
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	019a      	lsls	r2, r3, #6
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	431a      	orrs	r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	4929      	ldr	r1, [pc, #164]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e0:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	019a      	lsls	r2, r3, #6
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	431a      	orrs	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	061b      	lsls	r3, r3, #24
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	071b      	lsls	r3, r3, #28
 8004506:	4917      	ldr	r1, [pc, #92]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800450e:	4b15      	ldr	r3, [pc, #84]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	4911      	ldr	r1, [pc, #68]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004524:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0e      	ldr	r2, [pc, #56]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800452a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fc fffc 	bl	800152c <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004536:	e008      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004538:	f7fc fff8 	bl	800152c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	@ 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e007      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004556:	d1ef      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800

08004568 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e071      	b.n	8004662 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7f5b      	ldrb	r3, [r3, #29]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fbb4 	bl	8000cfc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d053      	beq.n	8004650 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	22ca      	movs	r2, #202	@ 0xca
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2253      	movs	r2, #83	@ 0x53
 80045b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f99f 	bl	80048fc <RTC_EnterInitMode>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d12a      	bne.n	800461e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b26      	ldr	r3, [pc, #152]	@ (800466c <HAL_RTC_Init+0x104>)
 80045d4:	400b      	ands	r3, r1
 80045d6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6899      	ldr	r1, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6919      	ldr	r1, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	041a      	lsls	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f9a8 	bl	800496a <RTC_ExitInitMode>
 800461a:	4603      	mov	r3, r0
 800461c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d110      	bne.n	8004646 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0208 	bic.w	r2, r2, #8
 8004632:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	22ff      	movs	r2, #255	@ 0xff
 800464c:	625a      	str	r2, [r3, #36]	@ 0x24
 800464e:	e001      	b.n	8004654 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	ff8fffbf 	.word	0xff8fffbf

08004670 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	7f1b      	ldrb	r3, [r3, #28]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_RTC_SetTime+0x1c>
 8004688:	2302      	movs	r3, #2
 800468a:	e085      	b.n	8004798 <HAL_RTC_SetTime+0x128>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2202      	movs	r2, #2
 8004696:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d126      	bne.n	80046ec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f97c 	bl	80049b4 <RTC_ByteToBcd2>
 80046bc:	4603      	mov	r3, r0
 80046be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f975 	bl	80049b4 <RTC_ByteToBcd2>
 80046ca:	4603      	mov	r3, r0
 80046cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	789b      	ldrb	r3, [r3, #2]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 f96d 	bl	80049b4 <RTC_ByteToBcd2>
 80046da:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e018      	b.n	800471e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800470c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004712:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	78db      	ldrb	r3, [r3, #3]
 8004718:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	22ca      	movs	r2, #202	@ 0xca
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2253      	movs	r2, #83	@ 0x53
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f8e4 	bl	80048fc <RTC_EnterInitMode>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11e      	bne.n	800477c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	6979      	ldr	r1, [r7, #20]
 8004744:	4b16      	ldr	r3, [pc, #88]	@ (80047a0 <HAL_RTC_SetTime+0x130>)
 8004746:	400b      	ands	r3, r1
 8004748:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004758:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6899      	ldr	r1, [r3, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f8f9 	bl	800496a <RTC_ExitInitMode>
 8004778:	4603      	mov	r3, r0
 800477a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	22ff      	movs	r2, #255	@ 0xff
 800478e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	771a      	strb	r2, [r3, #28]

  return status;
 8004796:	7cfb      	ldrb	r3, [r7, #19]
}
 8004798:	4618      	mov	r0, r3
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd90      	pop	{r4, r7, pc}
 80047a0:	007f7f7f 	.word	0x007f7f7f

080047a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	7f1b      	ldrb	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_RTC_SetDate+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e06f      	b.n	80048a0 <HAL_RTC_SetDate+0xfc>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2202      	movs	r2, #2
 80047ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10e      	bne.n	80047f0 <HAL_RTC_SetDate+0x4c>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	785b      	ldrb	r3, [r3, #1]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	f023 0310 	bic.w	r3, r3, #16
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	330a      	adds	r3, #10
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11c      	bne.n	8004830 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	78db      	ldrb	r3, [r3, #3]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f8da 	bl	80049b4 <RTC_ByteToBcd2>
 8004800:	4603      	mov	r3, r0
 8004802:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f8d3 	bl	80049b4 <RTC_ByteToBcd2>
 800480e:	4603      	mov	r3, r0
 8004810:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004812:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	789b      	ldrb	r3, [r3, #2]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f8cb 	bl	80049b4 <RTC_ByteToBcd2>
 800481e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004820:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e00e      	b.n	800484e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	78db      	ldrb	r3, [r3, #3]
 8004834:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800483c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004842:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	22ca      	movs	r2, #202	@ 0xca
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2253      	movs	r2, #83	@ 0x53
 800485c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f84c 	bl	80048fc <RTC_EnterInitMode>
 8004864:	4603      	mov	r3, r0
 8004866:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	6979      	ldr	r1, [r7, #20]
 8004874:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <HAL_RTC_SetDate+0x104>)
 8004876:	400b      	ands	r3, r1
 8004878:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f875 	bl	800496a <RTC_ExitInitMode>
 8004880:	4603      	mov	r3, r0
 8004882:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	22ff      	movs	r2, #255	@ 0xff
 8004896:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	771a      	strb	r2, [r3, #28]

  return status;
 800489e:	7cfb      	ldrb	r3, [r7, #19]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd90      	pop	{r4, r7, pc}
 80048a8:	00ffff3f 	.word	0x00ffff3f

080048ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048c8:	f7fc fe30 	bl	800152c <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048ce:	e009      	b.n	80048e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048d0:	f7fc fe2c 	bl	800152c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048de:	d901      	bls.n	80048e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e007      	b.n	80048f4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0ee      	beq.n	80048d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d122      	bne.n	8004960 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004928:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800492a:	f7fc fdff 	bl	800152c <HAL_GetTick>
 800492e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004930:	e00c      	b.n	800494c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004932:	f7fc fdfb 	bl	800152c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004940:	d904      	bls.n	800494c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2204      	movs	r2, #4
 8004946:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <RTC_EnterInitMode+0x64>
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d1e8      	bne.n	8004932 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004960:	7bfb      	ldrb	r3, [r7, #15]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004984:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff ff89 	bl	80048ac <HAL_RTC_WaitForSynchro>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2204      	movs	r2, #4
 80049a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80049c2:	e005      	b.n	80049d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	3b0a      	subs	r3, #10
 80049ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	d8f6      	bhi.n	80049c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b2db      	uxtb	r3, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e049      	b.n	8004a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc f99e 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 f974 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e049      	b.n	8004b44 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f841 	bl	8004b4c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f000 f91d 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e088      	b.n	8004c90 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004b9c:	f000 f9f2 	bl	8004f84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 020c 	bic.w	r2, r2, #12
 8004bae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6999      	ldr	r1, [r3, #24]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	619a      	str	r2, [r3, #24]
 8004bc2:	e060      	b.n	8004c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d11c      	bne.n	8004c04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004bda:	f000 fa76 	bl	80050ca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004bec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6999      	ldr	r1, [r3, #24]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	021a      	lsls	r2, r3, #8
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	619a      	str	r2, [r3, #24]
 8004c02:	e040      	b.n	8004c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d11b      	bne.n	8004c42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004c1a:	f000 fac3 	bl	80051a4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 020c 	bic.w	r2, r2, #12
 8004c2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69d9      	ldr	r1, [r3, #28]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	61da      	str	r2, [r3, #28]
 8004c40:	e021      	b.n	8004c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d11c      	bne.n	8004c82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004c58:	f000 fae0 	bl	800521c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69d9      	ldr	r1, [r3, #28]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	021a      	lsls	r2, r3, #8
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	61da      	str	r2, [r3, #28]
 8004c80:	e001      	b.n	8004c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e031      	b.n	8004d14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8ca 	bl	8004e5c <TIM_SlaveTimer_SetConfig>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e018      	b.n	8004d14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a40      	ldr	r2, [pc, #256]	@ (8004e30 <TIM_Base_SetConfig+0x114>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3a:	d00f      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e34 <TIM_Base_SetConfig+0x118>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3c      	ldr	r2, [pc, #240]	@ (8004e38 <TIM_Base_SetConfig+0x11c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8004e3c <TIM_Base_SetConfig+0x120>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a3a      	ldr	r2, [pc, #232]	@ (8004e40 <TIM_Base_SetConfig+0x124>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d108      	bne.n	8004d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2f      	ldr	r2, [pc, #188]	@ (8004e30 <TIM_Base_SetConfig+0x114>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d02b      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7c:	d027      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2c      	ldr	r2, [pc, #176]	@ (8004e34 <TIM_Base_SetConfig+0x118>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d023      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2b      	ldr	r2, [pc, #172]	@ (8004e38 <TIM_Base_SetConfig+0x11c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01f      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <TIM_Base_SetConfig+0x120>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01b      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a29      	ldr	r2, [pc, #164]	@ (8004e40 <TIM_Base_SetConfig+0x124>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d017      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a28      	ldr	r2, [pc, #160]	@ (8004e44 <TIM_Base_SetConfig+0x128>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a27      	ldr	r2, [pc, #156]	@ (8004e48 <TIM_Base_SetConfig+0x12c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00f      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a26      	ldr	r2, [pc, #152]	@ (8004e4c <TIM_Base_SetConfig+0x130>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a25      	ldr	r2, [pc, #148]	@ (8004e50 <TIM_Base_SetConfig+0x134>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a24      	ldr	r2, [pc, #144]	@ (8004e54 <TIM_Base_SetConfig+0x138>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a23      	ldr	r2, [pc, #140]	@ (8004e58 <TIM_Base_SetConfig+0x13c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d108      	bne.n	8004de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <TIM_Base_SetConfig+0x114>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0xf8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e40 <TIM_Base_SetConfig+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d103      	bne.n	8004e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	615a      	str	r2, [r3, #20]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800
 8004e50:	40001800 	.word	0x40001800
 8004e54:	40001c00 	.word	0x40001c00
 8004e58:	40002000 	.word	0x40002000

08004e5c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e78:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4b3e      	ldr	r3, [pc, #248]	@ (8004f80 <TIM_SlaveTimer_SetConfig+0x124>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b70      	cmp	r3, #112	@ 0x70
 8004ea4:	d01a      	beq.n	8004edc <TIM_SlaveTimer_SetConfig+0x80>
 8004ea6:	2b70      	cmp	r3, #112	@ 0x70
 8004ea8:	d860      	bhi.n	8004f6c <TIM_SlaveTimer_SetConfig+0x110>
 8004eaa:	2b60      	cmp	r3, #96	@ 0x60
 8004eac:	d054      	beq.n	8004f58 <TIM_SlaveTimer_SetConfig+0xfc>
 8004eae:	2b60      	cmp	r3, #96	@ 0x60
 8004eb0:	d85c      	bhi.n	8004f6c <TIM_SlaveTimer_SetConfig+0x110>
 8004eb2:	2b50      	cmp	r3, #80	@ 0x50
 8004eb4:	d046      	beq.n	8004f44 <TIM_SlaveTimer_SetConfig+0xe8>
 8004eb6:	2b50      	cmp	r3, #80	@ 0x50
 8004eb8:	d858      	bhi.n	8004f6c <TIM_SlaveTimer_SetConfig+0x110>
 8004eba:	2b40      	cmp	r3, #64	@ 0x40
 8004ebc:	d019      	beq.n	8004ef2 <TIM_SlaveTimer_SetConfig+0x96>
 8004ebe:	2b40      	cmp	r3, #64	@ 0x40
 8004ec0:	d854      	bhi.n	8004f6c <TIM_SlaveTimer_SetConfig+0x110>
 8004ec2:	2b30      	cmp	r3, #48	@ 0x30
 8004ec4:	d055      	beq.n	8004f72 <TIM_SlaveTimer_SetConfig+0x116>
 8004ec6:	2b30      	cmp	r3, #48	@ 0x30
 8004ec8:	d850      	bhi.n	8004f6c <TIM_SlaveTimer_SetConfig+0x110>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d051      	beq.n	8004f72 <TIM_SlaveTimer_SetConfig+0x116>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d84c      	bhi.n	8004f6c <TIM_SlaveTimer_SetConfig+0x110>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d04d      	beq.n	8004f72 <TIM_SlaveTimer_SetConfig+0x116>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d04b      	beq.n	8004f72 <TIM_SlaveTimer_SetConfig+0x116>
 8004eda:	e047      	b.n	8004f6c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004eec:	f000 f9d3 	bl	8005296 <TIM_ETR_SetConfig>
      break;
 8004ef0:	e040      	b.n	8004f74 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d101      	bne.n	8004efe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e03b      	b.n	8004f76 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f24:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
      break;
 8004f42:	e017      	b.n	8004f74 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f50:	461a      	mov	r2, r3
 8004f52:	f000 f88b 	bl	800506c <TIM_TI1_ConfigInputStage>
      break;
 8004f56:	e00d      	b.n	8004f74 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f64:	461a      	mov	r2, r3
 8004f66:	f000 f8ed 	bl	8005144 <TIM_TI2_ConfigInputStage>
      break;
 8004f6a:	e003      	b.n	8004f74 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f70:	e000      	b.n	8004f74 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004f72:	bf00      	nop
  }

  return status;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	fffefff8 	.word	0xfffefff8

08004f84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a28      	ldr	r2, [pc, #160]	@ (8005050 <TIM_TI1_SetConfig+0xcc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01b      	beq.n	8004fea <TIM_TI1_SetConfig+0x66>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb8:	d017      	beq.n	8004fea <TIM_TI1_SetConfig+0x66>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a25      	ldr	r2, [pc, #148]	@ (8005054 <TIM_TI1_SetConfig+0xd0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <TIM_TI1_SetConfig+0x66>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4a24      	ldr	r2, [pc, #144]	@ (8005058 <TIM_TI1_SetConfig+0xd4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00f      	beq.n	8004fea <TIM_TI1_SetConfig+0x66>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a23      	ldr	r2, [pc, #140]	@ (800505c <TIM_TI1_SetConfig+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <TIM_TI1_SetConfig+0x66>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <TIM_TI1_SetConfig+0xdc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <TIM_TI1_SetConfig+0x66>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a21      	ldr	r2, [pc, #132]	@ (8005064 <TIM_TI1_SetConfig+0xe0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_TI1_SetConfig+0x66>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	@ (8005068 <TIM_TI1_SetConfig+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d101      	bne.n	8004fee <TIM_TI1_SetConfig+0x6a>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <TIM_TI1_SetConfig+0x6c>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	e003      	b.n	800500e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	b2db      	uxtb	r3, r3
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 030a 	and.w	r3, r3, #10
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40010400 	.word	0x40010400
 8005064:	40014000 	.word	0x40014000
 8005068:	40001800 	.word	0x40001800

0800506c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 030a 	bic.w	r3, r3, #10
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b087      	sub	sp, #28
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f023 0210 	bic.w	r2, r3, #16
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	b29b      	uxth	r3, r3
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800511c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 0210 	bic.w	r2, r3, #16
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800516e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	031b      	lsls	r3, r3, #12
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80051f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005248:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800525a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	031b      	lsls	r3, r3, #12
 8005260:	b29b      	uxth	r3, r3
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800526e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	031b      	lsls	r3, r3, #12
 8005274:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	021a      	lsls	r2, r3, #8
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	609a      	str	r2, [r3, #8]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e06d      	b.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a30      	ldr	r2, [pc, #192]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2f      	ldr	r2, [pc, #188]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800532a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800533c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a20      	ldr	r2, [pc, #128]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d022      	beq.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005362:	d01d      	beq.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a15      	ldr	r2, [pc, #84]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a16      	ldr	r2, [pc, #88]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a15      	ldr	r2, [pc, #84]	@ (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10c      	bne.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e040      	b.n	8005488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fb fcbc 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	@ 0x24
 8005420:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f82c 	bl	8005490 <UART_SetConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fa84 	bl	8005958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800545e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800546e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb0b 	bl	8005a9c <UART_CheckIdleState>
 8005486:	4603      	mov	r3, r0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4ba6      	ldr	r3, [pc, #664]	@ (8005754 <UART_SetConfig+0x2c4>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	6979      	ldr	r1, [r7, #20]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	430a      	orrs	r2, r1
 8005500:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a94      	ldr	r2, [pc, #592]	@ (8005758 <UART_SetConfig+0x2c8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d120      	bne.n	800554e <UART_SetConfig+0xbe>
 800550c:	4b93      	ldr	r3, [pc, #588]	@ (800575c <UART_SetConfig+0x2cc>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b03      	cmp	r3, #3
 8005518:	d816      	bhi.n	8005548 <UART_SetConfig+0xb8>
 800551a:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <UART_SetConfig+0x90>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005531 	.word	0x08005531
 8005524:	0800553d 	.word	0x0800553d
 8005528:	08005537 	.word	0x08005537
 800552c:	08005543 	.word	0x08005543
 8005530:	2301      	movs	r3, #1
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e150      	b.n	80057d8 <UART_SetConfig+0x348>
 8005536:	2302      	movs	r3, #2
 8005538:	77fb      	strb	r3, [r7, #31]
 800553a:	e14d      	b.n	80057d8 <UART_SetConfig+0x348>
 800553c:	2304      	movs	r3, #4
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e14a      	b.n	80057d8 <UART_SetConfig+0x348>
 8005542:	2308      	movs	r3, #8
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e147      	b.n	80057d8 <UART_SetConfig+0x348>
 8005548:	2310      	movs	r3, #16
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e144      	b.n	80057d8 <UART_SetConfig+0x348>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a83      	ldr	r2, [pc, #524]	@ (8005760 <UART_SetConfig+0x2d0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d132      	bne.n	80055be <UART_SetConfig+0x12e>
 8005558:	4b80      	ldr	r3, [pc, #512]	@ (800575c <UART_SetConfig+0x2cc>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d828      	bhi.n	80055b8 <UART_SetConfig+0x128>
 8005566:	a201      	add	r2, pc, #4	@ (adr r2, 800556c <UART_SetConfig+0xdc>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	080055a1 	.word	0x080055a1
 8005570:	080055b9 	.word	0x080055b9
 8005574:	080055b9 	.word	0x080055b9
 8005578:	080055b9 	.word	0x080055b9
 800557c:	080055ad 	.word	0x080055ad
 8005580:	080055b9 	.word	0x080055b9
 8005584:	080055b9 	.word	0x080055b9
 8005588:	080055b9 	.word	0x080055b9
 800558c:	080055a7 	.word	0x080055a7
 8005590:	080055b9 	.word	0x080055b9
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055b9 	.word	0x080055b9
 800559c:	080055b3 	.word	0x080055b3
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e118      	b.n	80057d8 <UART_SetConfig+0x348>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e115      	b.n	80057d8 <UART_SetConfig+0x348>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e112      	b.n	80057d8 <UART_SetConfig+0x348>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e10f      	b.n	80057d8 <UART_SetConfig+0x348>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e10c      	b.n	80057d8 <UART_SetConfig+0x348>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a68      	ldr	r2, [pc, #416]	@ (8005764 <UART_SetConfig+0x2d4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d120      	bne.n	800560a <UART_SetConfig+0x17a>
 80055c8:	4b64      	ldr	r3, [pc, #400]	@ (800575c <UART_SetConfig+0x2cc>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055d2:	2b30      	cmp	r3, #48	@ 0x30
 80055d4:	d013      	beq.n	80055fe <UART_SetConfig+0x16e>
 80055d6:	2b30      	cmp	r3, #48	@ 0x30
 80055d8:	d814      	bhi.n	8005604 <UART_SetConfig+0x174>
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d009      	beq.n	80055f2 <UART_SetConfig+0x162>
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d810      	bhi.n	8005604 <UART_SetConfig+0x174>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <UART_SetConfig+0x15c>
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	d006      	beq.n	80055f8 <UART_SetConfig+0x168>
 80055ea:	e00b      	b.n	8005604 <UART_SetConfig+0x174>
 80055ec:	2300      	movs	r3, #0
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e0f2      	b.n	80057d8 <UART_SetConfig+0x348>
 80055f2:	2302      	movs	r3, #2
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e0ef      	b.n	80057d8 <UART_SetConfig+0x348>
 80055f8:	2304      	movs	r3, #4
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e0ec      	b.n	80057d8 <UART_SetConfig+0x348>
 80055fe:	2308      	movs	r3, #8
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e0e9      	b.n	80057d8 <UART_SetConfig+0x348>
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e0e6      	b.n	80057d8 <UART_SetConfig+0x348>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a56      	ldr	r2, [pc, #344]	@ (8005768 <UART_SetConfig+0x2d8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d120      	bne.n	8005656 <UART_SetConfig+0x1c6>
 8005614:	4b51      	ldr	r3, [pc, #324]	@ (800575c <UART_SetConfig+0x2cc>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800561e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005620:	d013      	beq.n	800564a <UART_SetConfig+0x1ba>
 8005622:	2bc0      	cmp	r3, #192	@ 0xc0
 8005624:	d814      	bhi.n	8005650 <UART_SetConfig+0x1c0>
 8005626:	2b80      	cmp	r3, #128	@ 0x80
 8005628:	d009      	beq.n	800563e <UART_SetConfig+0x1ae>
 800562a:	2b80      	cmp	r3, #128	@ 0x80
 800562c:	d810      	bhi.n	8005650 <UART_SetConfig+0x1c0>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <UART_SetConfig+0x1a8>
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d006      	beq.n	8005644 <UART_SetConfig+0x1b4>
 8005636:	e00b      	b.n	8005650 <UART_SetConfig+0x1c0>
 8005638:	2300      	movs	r3, #0
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e0cc      	b.n	80057d8 <UART_SetConfig+0x348>
 800563e:	2302      	movs	r3, #2
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e0c9      	b.n	80057d8 <UART_SetConfig+0x348>
 8005644:	2304      	movs	r3, #4
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e0c6      	b.n	80057d8 <UART_SetConfig+0x348>
 800564a:	2308      	movs	r3, #8
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e0c3      	b.n	80057d8 <UART_SetConfig+0x348>
 8005650:	2310      	movs	r3, #16
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e0c0      	b.n	80057d8 <UART_SetConfig+0x348>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a44      	ldr	r2, [pc, #272]	@ (800576c <UART_SetConfig+0x2dc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d125      	bne.n	80056ac <UART_SetConfig+0x21c>
 8005660:	4b3e      	ldr	r3, [pc, #248]	@ (800575c <UART_SetConfig+0x2cc>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800566a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800566e:	d017      	beq.n	80056a0 <UART_SetConfig+0x210>
 8005670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005674:	d817      	bhi.n	80056a6 <UART_SetConfig+0x216>
 8005676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567a:	d00b      	beq.n	8005694 <UART_SetConfig+0x204>
 800567c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005680:	d811      	bhi.n	80056a6 <UART_SetConfig+0x216>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <UART_SetConfig+0x1fe>
 8005686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800568a:	d006      	beq.n	800569a <UART_SetConfig+0x20a>
 800568c:	e00b      	b.n	80056a6 <UART_SetConfig+0x216>
 800568e:	2300      	movs	r3, #0
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e0a1      	b.n	80057d8 <UART_SetConfig+0x348>
 8005694:	2302      	movs	r3, #2
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e09e      	b.n	80057d8 <UART_SetConfig+0x348>
 800569a:	2304      	movs	r3, #4
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e09b      	b.n	80057d8 <UART_SetConfig+0x348>
 80056a0:	2308      	movs	r3, #8
 80056a2:	77fb      	strb	r3, [r7, #31]
 80056a4:	e098      	b.n	80057d8 <UART_SetConfig+0x348>
 80056a6:	2310      	movs	r3, #16
 80056a8:	77fb      	strb	r3, [r7, #31]
 80056aa:	e095      	b.n	80057d8 <UART_SetConfig+0x348>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005770 <UART_SetConfig+0x2e0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d125      	bne.n	8005702 <UART_SetConfig+0x272>
 80056b6:	4b29      	ldr	r3, [pc, #164]	@ (800575c <UART_SetConfig+0x2cc>)
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056c4:	d017      	beq.n	80056f6 <UART_SetConfig+0x266>
 80056c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ca:	d817      	bhi.n	80056fc <UART_SetConfig+0x26c>
 80056cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d0:	d00b      	beq.n	80056ea <UART_SetConfig+0x25a>
 80056d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d6:	d811      	bhi.n	80056fc <UART_SetConfig+0x26c>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <UART_SetConfig+0x254>
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e0:	d006      	beq.n	80056f0 <UART_SetConfig+0x260>
 80056e2:	e00b      	b.n	80056fc <UART_SetConfig+0x26c>
 80056e4:	2301      	movs	r3, #1
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e076      	b.n	80057d8 <UART_SetConfig+0x348>
 80056ea:	2302      	movs	r3, #2
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	e073      	b.n	80057d8 <UART_SetConfig+0x348>
 80056f0:	2304      	movs	r3, #4
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e070      	b.n	80057d8 <UART_SetConfig+0x348>
 80056f6:	2308      	movs	r3, #8
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e06d      	b.n	80057d8 <UART_SetConfig+0x348>
 80056fc:	2310      	movs	r3, #16
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e06a      	b.n	80057d8 <UART_SetConfig+0x348>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1b      	ldr	r2, [pc, #108]	@ (8005774 <UART_SetConfig+0x2e4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d138      	bne.n	800577e <UART_SetConfig+0x2ee>
 800570c:	4b13      	ldr	r3, [pc, #76]	@ (800575c <UART_SetConfig+0x2cc>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005712:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005716:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800571a:	d017      	beq.n	800574c <UART_SetConfig+0x2bc>
 800571c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005720:	d82a      	bhi.n	8005778 <UART_SetConfig+0x2e8>
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005726:	d00b      	beq.n	8005740 <UART_SetConfig+0x2b0>
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800572c:	d824      	bhi.n	8005778 <UART_SetConfig+0x2e8>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <UART_SetConfig+0x2aa>
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005736:	d006      	beq.n	8005746 <UART_SetConfig+0x2b6>
 8005738:	e01e      	b.n	8005778 <UART_SetConfig+0x2e8>
 800573a:	2300      	movs	r3, #0
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e04b      	b.n	80057d8 <UART_SetConfig+0x348>
 8005740:	2302      	movs	r3, #2
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e048      	b.n	80057d8 <UART_SetConfig+0x348>
 8005746:	2304      	movs	r3, #4
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e045      	b.n	80057d8 <UART_SetConfig+0x348>
 800574c:	2308      	movs	r3, #8
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e042      	b.n	80057d8 <UART_SetConfig+0x348>
 8005752:	bf00      	nop
 8005754:	efff69f3 	.word	0xefff69f3
 8005758:	40011000 	.word	0x40011000
 800575c:	40023800 	.word	0x40023800
 8005760:	40004400 	.word	0x40004400
 8005764:	40004800 	.word	0x40004800
 8005768:	40004c00 	.word	0x40004c00
 800576c:	40005000 	.word	0x40005000
 8005770:	40011400 	.word	0x40011400
 8005774:	40007800 	.word	0x40007800
 8005778:	2310      	movs	r3, #16
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e02c      	b.n	80057d8 <UART_SetConfig+0x348>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a72      	ldr	r2, [pc, #456]	@ (800594c <UART_SetConfig+0x4bc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d125      	bne.n	80057d4 <UART_SetConfig+0x344>
 8005788:	4b71      	ldr	r3, [pc, #452]	@ (8005950 <UART_SetConfig+0x4c0>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005792:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005796:	d017      	beq.n	80057c8 <UART_SetConfig+0x338>
 8005798:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800579c:	d817      	bhi.n	80057ce <UART_SetConfig+0x33e>
 800579e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a2:	d00b      	beq.n	80057bc <UART_SetConfig+0x32c>
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a8:	d811      	bhi.n	80057ce <UART_SetConfig+0x33e>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <UART_SetConfig+0x326>
 80057ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057b2:	d006      	beq.n	80057c2 <UART_SetConfig+0x332>
 80057b4:	e00b      	b.n	80057ce <UART_SetConfig+0x33e>
 80057b6:	2300      	movs	r3, #0
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e00d      	b.n	80057d8 <UART_SetConfig+0x348>
 80057bc:	2302      	movs	r3, #2
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e00a      	b.n	80057d8 <UART_SetConfig+0x348>
 80057c2:	2304      	movs	r3, #4
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e007      	b.n	80057d8 <UART_SetConfig+0x348>
 80057c8:	2308      	movs	r3, #8
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e004      	b.n	80057d8 <UART_SetConfig+0x348>
 80057ce:	2310      	movs	r3, #16
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e001      	b.n	80057d8 <UART_SetConfig+0x348>
 80057d4:	2310      	movs	r3, #16
 80057d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e0:	d15b      	bne.n	800589a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d828      	bhi.n	800583a <UART_SetConfig+0x3aa>
 80057e8:	a201      	add	r2, pc, #4	@ (adr r2, 80057f0 <UART_SetConfig+0x360>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005815 	.word	0x08005815
 80057f4:	0800581d 	.word	0x0800581d
 80057f8:	08005825 	.word	0x08005825
 80057fc:	0800583b 	.word	0x0800583b
 8005800:	0800582b 	.word	0x0800582b
 8005804:	0800583b 	.word	0x0800583b
 8005808:	0800583b 	.word	0x0800583b
 800580c:	0800583b 	.word	0x0800583b
 8005810:	08005833 	.word	0x08005833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fe fa90 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005818:	61b8      	str	r0, [r7, #24]
        break;
 800581a:	e013      	b.n	8005844 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800581c:	f7fe faa0 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8005820:	61b8      	str	r0, [r7, #24]
        break;
 8005822:	e00f      	b.n	8005844 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005824:	4b4b      	ldr	r3, [pc, #300]	@ (8005954 <UART_SetConfig+0x4c4>)
 8005826:	61bb      	str	r3, [r7, #24]
        break;
 8005828:	e00c      	b.n	8005844 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582a:	f7fe f973 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 800582e:	61b8      	str	r0, [r7, #24]
        break;
 8005830:	e008      	b.n	8005844 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005836:	61bb      	str	r3, [r7, #24]
        break;
 8005838:	e004      	b.n	8005844 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	77bb      	strb	r3, [r7, #30]
        break;
 8005842:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d074      	beq.n	8005934 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	005a      	lsls	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	441a      	add	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	d916      	bls.n	8005894 <UART_SetConfig+0x404>
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586c:	d212      	bcs.n	8005894 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f023 030f 	bic.w	r3, r3, #15
 8005876:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	b29b      	uxth	r3, r3
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	b29a      	uxth	r2, r3
 8005884:	89fb      	ldrh	r3, [r7, #14]
 8005886:	4313      	orrs	r3, r2
 8005888:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	89fa      	ldrh	r2, [r7, #14]
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	e04f      	b.n	8005934 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	77bb      	strb	r3, [r7, #30]
 8005898:	e04c      	b.n	8005934 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800589a:	7ffb      	ldrb	r3, [r7, #31]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d828      	bhi.n	80058f2 <UART_SetConfig+0x462>
 80058a0:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <UART_SetConfig+0x418>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058f3 	.word	0x080058f3
 80058b8:	080058e3 	.word	0x080058e3
 80058bc:	080058f3 	.word	0x080058f3
 80058c0:	080058f3 	.word	0x080058f3
 80058c4:	080058f3 	.word	0x080058f3
 80058c8:	080058eb 	.word	0x080058eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058cc:	f7fe fa34 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 80058d0:	61b8      	str	r0, [r7, #24]
        break;
 80058d2:	e013      	b.n	80058fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d4:	f7fe fa44 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 80058d8:	61b8      	str	r0, [r7, #24]
        break;
 80058da:	e00f      	b.n	80058fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <UART_SetConfig+0x4c4>)
 80058de:	61bb      	str	r3, [r7, #24]
        break;
 80058e0:	e00c      	b.n	80058fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fe f917 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 80058e6:	61b8      	str	r0, [r7, #24]
        break;
 80058e8:	e008      	b.n	80058fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ee:	61bb      	str	r3, [r7, #24]
        break;
 80058f0:	e004      	b.n	80058fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	77bb      	strb	r3, [r7, #30]
        break;
 80058fa:	bf00      	nop
    }

    if (pclk != 0U)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	085a      	lsrs	r2, r3, #1
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	441a      	add	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b0f      	cmp	r3, #15
 800591a:	d909      	bls.n	8005930 <UART_SetConfig+0x4a0>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005922:	d205      	bcs.n	8005930 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e001      	b.n	8005934 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005940:	7fbb      	ldrb	r3, [r7, #30]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40007c00 	.word	0x40007c00
 8005950:	40023800 	.word	0x40023800
 8005954:	00f42400 	.word	0x00f42400

08005958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a56:	d10a      	bne.n	8005a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aac:	f7fb fd3e 	bl	800152c <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d10e      	bne.n	8005ade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f81b 	bl	8005b0a <UART_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e011      	b.n	8005b02 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b09c      	sub	sp, #112	@ 0x70
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	4613      	mov	r3, r2
 8005b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1a:	e0a7      	b.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	f000 80a3 	beq.w	8005c6c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b26:	f7fb fd01 	bl	800152c <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d302      	bcc.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x32>
 8005b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d13f      	bne.n	8005bbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b4c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b50:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005b60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b8e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005b90:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e068      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d050      	beq.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd8:	d148      	bne.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005be2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c04:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e6      	bne.n	8005be4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	613b      	str	r3, [r7, #16]
   return(result);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005c36:	623a      	str	r2, [r7, #32]
 8005c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	69f9      	ldr	r1, [r7, #28]
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e5      	bne.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e010      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69da      	ldr	r2, [r3, #28]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4013      	ands	r3, r2
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	f43f af48 	beq.w	8005b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3770      	adds	r7, #112	@ 0x70
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	f107 001c 	add.w	r0, r7, #28
 8005ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d120      	bne.n	8005cf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	4b20      	ldr	r3, [pc, #128]	@ (8005d44 <USB_CoreInit+0xac>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa96 	bl	8006218 <USB_CoreReset>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e010      	b.n	8005d14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa8a 	bl	8006218 <USB_CoreReset>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10b      	bne.n	8005d32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f043 0206 	orr.w	r2, r3, #6
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d3e:	b004      	add	sp, #16
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	ffbdffbf 	.word	0xffbdffbf

08005d48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f023 0201 	bic.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	460b      	mov	r3, r1
 8005d74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d115      	bne.n	8005db8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d98:	2001      	movs	r0, #1
 8005d9a:	f7fb fbd3 	bl	8001544 <HAL_Delay>
      ms++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fa29 	bl	80061fc <USB_GetMode>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d01e      	beq.n	8005dee <USB_SetCurrentMode+0x84>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b31      	cmp	r3, #49	@ 0x31
 8005db4:	d9f0      	bls.n	8005d98 <USB_SetCurrentMode+0x2e>
 8005db6:	e01a      	b.n	8005dee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d115      	bne.n	8005dea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f7fb fbba 	bl	8001544 <HAL_Delay>
      ms++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa10 	bl	80061fc <USB_GetMode>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <USB_SetCurrentMode+0x84>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b31      	cmp	r3, #49	@ 0x31
 8005de6:	d9f0      	bls.n	8005dca <USB_SetCurrentMode+0x60>
 8005de8:	e001      	b.n	8005dee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e005      	b.n	8005dfa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b32      	cmp	r3, #50	@ 0x32
 8005df2:	d101      	bne.n	8005df8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e04:	b084      	sub	sp, #16
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	e009      	b.n	8005e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3340      	adds	r3, #64	@ 0x40
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3301      	adds	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b0e      	cmp	r3, #14
 8005e3c:	d9f2      	bls.n	8005e24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11c      	bne.n	8005e7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e52:	f043 0302 	orr.w	r3, r3, #2
 8005e56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e005      	b.n	8005e8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	680b      	ldr	r3, [r1, #0]
 8005ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10c      	bne.n	8005eca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f965 	bl	8006188 <USB_SetDevSpeed>
 8005ebe:	e008      	b.n	8005ed2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f960 	bl	8006188 <USB_SetDevSpeed>
 8005ec8:	e003      	b.n	8005ed2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005eca:	2103      	movs	r1, #3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f95b 	bl	8006188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f8f3 	bl	80060c0 <USB_FlushTxFifo>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f91f 	bl	8006128 <USB_FlushRxFifo>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efa:	461a      	mov	r2, r3
 8005efc:	2300      	movs	r3, #0
 8005efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f06:	461a      	mov	r2, r3
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f12:	461a      	mov	r2, r3
 8005f14:	2300      	movs	r3, #0
 8005f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e043      	b.n	8005fa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f34:	d118      	bne.n	8005f68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	e013      	b.n	8005f7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e008      	b.n	8005f7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f74:	461a      	mov	r2, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f86:	461a      	mov	r2, r3
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d3b7      	bcc.n	8005f1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e043      	b.n	800603c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fca:	d118      	bne.n	8005ffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10a      	bne.n	8005fe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e013      	b.n	8006010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e008      	b.n	8006010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600a:	461a      	mov	r2, r3
 800600c:	2300      	movs	r3, #0
 800600e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601c:	461a      	mov	r2, r3
 800601e:	2300      	movs	r3, #0
 8006020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602e:	461a      	mov	r2, r3
 8006030:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	3301      	adds	r3, #1
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	429a      	cmp	r2, r3
 8006042:	d3b7      	bcc.n	8005fb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	2b00      	cmp	r3, #0
 800606a:	d105      	bne.n	8006078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f043 0210 	orr.w	r2, r3, #16
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	4b0e      	ldr	r3, [pc, #56]	@ (80060b8 <USB_DevInit+0x2b4>)
 800607e:	4313      	orrs	r3, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f043 0208 	orr.w	r2, r3, #8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <USB_DevInit+0x2b8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b4:	b004      	add	sp, #16
 80060b6:	4770      	bx	lr
 80060b8:	803c3800 	.word	0x803c3800
 80060bc:	40000004 	.word	0x40000004

080060c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a13      	ldr	r2, [pc, #76]	@ (8006124 <USB_FlushTxFifo+0x64>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e01b      	b.n	8006118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	daf2      	bge.n	80060ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	019b      	lsls	r3, r3, #6
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a08      	ldr	r2, [pc, #32]	@ (8006124 <USB_FlushTxFifo+0x64>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e006      	b.n	8006118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b20      	cmp	r3, #32
 8006114:	d0f0      	beq.n	80060f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	00030d40 	.word	0x00030d40

08006128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a11      	ldr	r2, [pc, #68]	@ (8006184 <USB_FlushRxFifo+0x5c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e018      	b.n	8006178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	daf2      	bge.n	8006134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2210      	movs	r2, #16
 8006156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a08      	ldr	r2, [pc, #32]	@ (8006184 <USB_FlushRxFifo+0x5c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e006      	b.n	8006178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	2b10      	cmp	r3, #16
 8006174:	d0f0      	beq.n	8006158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	00030d40 	.word	0x00030d40

08006188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	68f9      	ldr	r1, [r7, #12]
 80061a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061a8:	4313      	orrs	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0301 	and.w	r3, r3, #1
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a13      	ldr	r2, [pc, #76]	@ (800627c <USB_CoreReset+0x64>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e01b      	b.n	800626e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	daf2      	bge.n	8006224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f043 0201 	orr.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a09      	ldr	r2, [pc, #36]	@ (800627c <USB_CoreReset+0x64>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e006      	b.n	800626e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d0f0      	beq.n	800624e <USB_CoreReset+0x36>

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	00030d40 	.word	0x00030d40

08006280 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006280:	b5b0      	push	{r4, r5, r7, lr}
 8006282:	b08c      	sub	sp, #48	@ 0x30
 8006284:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006286:	4b8f      	ldr	r3, [pc, #572]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006288:	22c0      	movs	r2, #192	@ 0xc0
 800628a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800628c:	4b8d      	ldr	r3, [pc, #564]	@ (80064c4 <MX_LWIP_Init+0x244>)
 800628e:	22a8      	movs	r2, #168	@ 0xa8
 8006290:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8006292:	4b8c      	ldr	r3, [pc, #560]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006294:	2201      	movs	r2, #1
 8006296:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 108;
 8006298:	4b8a      	ldr	r3, [pc, #552]	@ (80064c4 <MX_LWIP_Init+0x244>)
 800629a:	226c      	movs	r2, #108	@ 0x6c
 800629c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800629e:	4b8a      	ldr	r3, [pc, #552]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80062a0:	22ff      	movs	r2, #255	@ 0xff
 80062a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80062a4:	4b88      	ldr	r3, [pc, #544]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80062a6:	22ff      	movs	r2, #255	@ 0xff
 80062a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80062aa:	4b87      	ldr	r3, [pc, #540]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80062ac:	22ff      	movs	r2, #255	@ 0xff
 80062ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80062b0:	4b85      	ldr	r3, [pc, #532]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80062b6:	4b85      	ldr	r3, [pc, #532]	@ (80064cc <MX_LWIP_Init+0x24c>)
 80062b8:	22c0      	movs	r2, #192	@ 0xc0
 80062ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80062bc:	4b83      	ldr	r3, [pc, #524]	@ (80064cc <MX_LWIP_Init+0x24c>)
 80062be:	22a8      	movs	r2, #168	@ 0xa8
 80062c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80062c2:	4b82      	ldr	r3, [pc, #520]	@ (80064cc <MX_LWIP_Init+0x24c>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80062c8:	4b80      	ldr	r3, [pc, #512]	@ (80064cc <MX_LWIP_Init+0x24c>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80062ce:	2100      	movs	r1, #0
 80062d0:	2000      	movs	r0, #0
 80062d2:	f003 fff3 	bl	800a2bc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80062d6:	4b7b      	ldr	r3, [pc, #492]	@ (80064c4 <MX_LWIP_Init+0x244>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	061a      	lsls	r2, r3, #24
 80062dc:	4b79      	ldr	r3, [pc, #484]	@ (80064c4 <MX_LWIP_Init+0x244>)
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	431a      	orrs	r2, r3
 80062e4:	4b77      	ldr	r3, [pc, #476]	@ (80064c4 <MX_LWIP_Init+0x244>)
 80062e6:	789b      	ldrb	r3, [r3, #2]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	4313      	orrs	r3, r2
 80062ec:	4a75      	ldr	r2, [pc, #468]	@ (80064c4 <MX_LWIP_Init+0x244>)
 80062ee:	78d2      	ldrb	r2, [r2, #3]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	061a      	lsls	r2, r3, #24
 80062f4:	4b73      	ldr	r3, [pc, #460]	@ (80064c4 <MX_LWIP_Init+0x244>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	0619      	lsls	r1, r3, #24
 80062fa:	4b72      	ldr	r3, [pc, #456]	@ (80064c4 <MX_LWIP_Init+0x244>)
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	041b      	lsls	r3, r3, #16
 8006300:	4319      	orrs	r1, r3
 8006302:	4b70      	ldr	r3, [pc, #448]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006304:	789b      	ldrb	r3, [r3, #2]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	430b      	orrs	r3, r1
 800630a:	496e      	ldr	r1, [pc, #440]	@ (80064c4 <MX_LWIP_Init+0x244>)
 800630c:	78c9      	ldrb	r1, [r1, #3]
 800630e:	430b      	orrs	r3, r1
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006316:	431a      	orrs	r2, r3
 8006318:	4b6a      	ldr	r3, [pc, #424]	@ (80064c4 <MX_LWIP_Init+0x244>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	0619      	lsls	r1, r3, #24
 800631e:	4b69      	ldr	r3, [pc, #420]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	4319      	orrs	r1, r3
 8006326:	4b67      	ldr	r3, [pc, #412]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006328:	789b      	ldrb	r3, [r3, #2]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	430b      	orrs	r3, r1
 800632e:	4965      	ldr	r1, [pc, #404]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006330:	78c9      	ldrb	r1, [r1, #3]
 8006332:	430b      	orrs	r3, r1
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800633a:	431a      	orrs	r2, r3
 800633c:	4b61      	ldr	r3, [pc, #388]	@ (80064c4 <MX_LWIP_Init+0x244>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	0619      	lsls	r1, r3, #24
 8006342:	4b60      	ldr	r3, [pc, #384]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	4319      	orrs	r1, r3
 800634a:	4b5e      	ldr	r3, [pc, #376]	@ (80064c4 <MX_LWIP_Init+0x244>)
 800634c:	789b      	ldrb	r3, [r3, #2]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	430b      	orrs	r3, r1
 8006352:	495c      	ldr	r1, [pc, #368]	@ (80064c4 <MX_LWIP_Init+0x244>)
 8006354:	78c9      	ldrb	r1, [r1, #3]
 8006356:	430b      	orrs	r3, r1
 8006358:	0e1b      	lsrs	r3, r3, #24
 800635a:	4313      	orrs	r3, r2
 800635c:	4a5c      	ldr	r2, [pc, #368]	@ (80064d0 <MX_LWIP_Init+0x250>)
 800635e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006360:	4b59      	ldr	r3, [pc, #356]	@ (80064c8 <MX_LWIP_Init+0x248>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	061a      	lsls	r2, r3, #24
 8006366:	4b58      	ldr	r3, [pc, #352]	@ (80064c8 <MX_LWIP_Init+0x248>)
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	431a      	orrs	r2, r3
 800636e:	4b56      	ldr	r3, [pc, #344]	@ (80064c8 <MX_LWIP_Init+0x248>)
 8006370:	789b      	ldrb	r3, [r3, #2]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	4313      	orrs	r3, r2
 8006376:	4a54      	ldr	r2, [pc, #336]	@ (80064c8 <MX_LWIP_Init+0x248>)
 8006378:	78d2      	ldrb	r2, [r2, #3]
 800637a:	4313      	orrs	r3, r2
 800637c:	061a      	lsls	r2, r3, #24
 800637e:	4b52      	ldr	r3, [pc, #328]	@ (80064c8 <MX_LWIP_Init+0x248>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	0619      	lsls	r1, r3, #24
 8006384:	4b50      	ldr	r3, [pc, #320]	@ (80064c8 <MX_LWIP_Init+0x248>)
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	4319      	orrs	r1, r3
 800638c:	4b4e      	ldr	r3, [pc, #312]	@ (80064c8 <MX_LWIP_Init+0x248>)
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	430b      	orrs	r3, r1
 8006394:	494c      	ldr	r1, [pc, #304]	@ (80064c8 <MX_LWIP_Init+0x248>)
 8006396:	78c9      	ldrb	r1, [r1, #3]
 8006398:	430b      	orrs	r3, r1
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063a0:	431a      	orrs	r2, r3
 80063a2:	4b49      	ldr	r3, [pc, #292]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	0619      	lsls	r1, r3, #24
 80063a8:	4b47      	ldr	r3, [pc, #284]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	4319      	orrs	r1, r3
 80063b0:	4b45      	ldr	r3, [pc, #276]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063b2:	789b      	ldrb	r3, [r3, #2]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	430b      	orrs	r3, r1
 80063b8:	4943      	ldr	r1, [pc, #268]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063ba:	78c9      	ldrb	r1, [r1, #3]
 80063bc:	430b      	orrs	r3, r1
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063c4:	431a      	orrs	r2, r3
 80063c6:	4b40      	ldr	r3, [pc, #256]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	0619      	lsls	r1, r3, #24
 80063cc:	4b3e      	ldr	r3, [pc, #248]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	4319      	orrs	r1, r3
 80063d4:	4b3c      	ldr	r3, [pc, #240]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063d6:	789b      	ldrb	r3, [r3, #2]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	430b      	orrs	r3, r1
 80063dc:	493a      	ldr	r1, [pc, #232]	@ (80064c8 <MX_LWIP_Init+0x248>)
 80063de:	78c9      	ldrb	r1, [r1, #3]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	0e1b      	lsrs	r3, r3, #24
 80063e4:	4313      	orrs	r3, r2
 80063e6:	4a3b      	ldr	r2, [pc, #236]	@ (80064d4 <MX_LWIP_Init+0x254>)
 80063e8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80063ea:	4b38      	ldr	r3, [pc, #224]	@ (80064cc <MX_LWIP_Init+0x24c>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	061a      	lsls	r2, r3, #24
 80063f0:	4b36      	ldr	r3, [pc, #216]	@ (80064cc <MX_LWIP_Init+0x24c>)
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	431a      	orrs	r2, r3
 80063f8:	4b34      	ldr	r3, [pc, #208]	@ (80064cc <MX_LWIP_Init+0x24c>)
 80063fa:	789b      	ldrb	r3, [r3, #2]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	4313      	orrs	r3, r2
 8006400:	4a32      	ldr	r2, [pc, #200]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006402:	78d2      	ldrb	r2, [r2, #3]
 8006404:	4313      	orrs	r3, r2
 8006406:	061a      	lsls	r2, r3, #24
 8006408:	4b30      	ldr	r3, [pc, #192]	@ (80064cc <MX_LWIP_Init+0x24c>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	0619      	lsls	r1, r3, #24
 800640e:	4b2f      	ldr	r3, [pc, #188]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	4319      	orrs	r1, r3
 8006416:	4b2d      	ldr	r3, [pc, #180]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006418:	789b      	ldrb	r3, [r3, #2]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	430b      	orrs	r3, r1
 800641e:	492b      	ldr	r1, [pc, #172]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006420:	78c9      	ldrb	r1, [r1, #3]
 8006422:	430b      	orrs	r3, r1
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800642a:	431a      	orrs	r2, r3
 800642c:	4b27      	ldr	r3, [pc, #156]	@ (80064cc <MX_LWIP_Init+0x24c>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	0619      	lsls	r1, r3, #24
 8006432:	4b26      	ldr	r3, [pc, #152]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	041b      	lsls	r3, r3, #16
 8006438:	4319      	orrs	r1, r3
 800643a:	4b24      	ldr	r3, [pc, #144]	@ (80064cc <MX_LWIP_Init+0x24c>)
 800643c:	789b      	ldrb	r3, [r3, #2]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	430b      	orrs	r3, r1
 8006442:	4922      	ldr	r1, [pc, #136]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006444:	78c9      	ldrb	r1, [r1, #3]
 8006446:	430b      	orrs	r3, r1
 8006448:	0a1b      	lsrs	r3, r3, #8
 800644a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800644e:	431a      	orrs	r2, r3
 8006450:	4b1e      	ldr	r3, [pc, #120]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	0619      	lsls	r1, r3, #24
 8006456:	4b1d      	ldr	r3, [pc, #116]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	041b      	lsls	r3, r3, #16
 800645c:	4319      	orrs	r1, r3
 800645e:	4b1b      	ldr	r3, [pc, #108]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006460:	789b      	ldrb	r3, [r3, #2]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	430b      	orrs	r3, r1
 8006466:	4919      	ldr	r1, [pc, #100]	@ (80064cc <MX_LWIP_Init+0x24c>)
 8006468:	78c9      	ldrb	r1, [r1, #3]
 800646a:	430b      	orrs	r3, r1
 800646c:	0e1b      	lsrs	r3, r3, #24
 800646e:	4313      	orrs	r3, r2
 8006470:	4a19      	ldr	r2, [pc, #100]	@ (80064d8 <MX_LWIP_Init+0x258>)
 8006472:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006474:	4b19      	ldr	r3, [pc, #100]	@ (80064dc <MX_LWIP_Init+0x25c>)
 8006476:	9302      	str	r3, [sp, #8]
 8006478:	4b19      	ldr	r3, [pc, #100]	@ (80064e0 <MX_LWIP_Init+0x260>)
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4b15      	ldr	r3, [pc, #84]	@ (80064d8 <MX_LWIP_Init+0x258>)
 8006482:	4a14      	ldr	r2, [pc, #80]	@ (80064d4 <MX_LWIP_Init+0x254>)
 8006484:	4912      	ldr	r1, [pc, #72]	@ (80064d0 <MX_LWIP_Init+0x250>)
 8006486:	4817      	ldr	r0, [pc, #92]	@ (80064e4 <MX_LWIP_Init+0x264>)
 8006488:	f004 fce2 	bl	800ae50 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800648c:	4815      	ldr	r0, [pc, #84]	@ (80064e4 <MX_LWIP_Init+0x264>)
 800648e:	f004 fe91 	bl	800b1b4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006492:	4814      	ldr	r0, [pc, #80]	@ (80064e4 <MX_LWIP_Init+0x264>)
 8006494:	f004 fe9e 	bl	800b1d4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006498:	4913      	ldr	r1, [pc, #76]	@ (80064e8 <MX_LWIP_Init+0x268>)
 800649a:	4812      	ldr	r0, [pc, #72]	@ (80064e4 <MX_LWIP_Init+0x264>)
 800649c:	f004 ff9c 	bl	800b3d8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80064a0:	4b12      	ldr	r3, [pc, #72]	@ (80064ec <MX_LWIP_Init+0x26c>)
 80064a2:	1d3c      	adds	r4, r7, #4
 80064a4:	461d      	mov	r5, r3
 80064a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80064ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	490b      	ldr	r1, [pc, #44]	@ (80064e4 <MX_LWIP_Init+0x264>)
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fdaf 	bl	800701a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80064bc:	bf00      	nop
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bdb0      	pop	{r4, r5, r7, pc}
 80064c4:	20001884 	.word	0x20001884
 80064c8:	20001888 	.word	0x20001888
 80064cc:	2000188c 	.word	0x2000188c
 80064d0:	20001878 	.word	0x20001878
 80064d4:	2000187c 	.word	0x2000187c
 80064d8:	20001880 	.word	0x20001880
 80064dc:	0800a1f9 	.word	0x0800a1f9
 80064e0:	08006a51 	.word	0x08006a51
 80064e4:	20001844 	.word	0x20001844
 80064e8:	080064f1 	.word	0x080064f1
 80064ec:	08015894 	.word	0x08015894

080064f0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <SCB_InvalidateDCache_by_Addr>:
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006516:	2320      	movs	r3, #32
 8006518:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800651a:	f3bf 8f4f 	dsb	sy
}
 800651e:	bf00      	nop
    while (op_size > 0) {
 8006520:	e00b      	b.n	800653a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006522:	4a0d      	ldr	r2, [pc, #52]	@ (8006558 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4413      	add	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	dcf0      	bgt.n	8006522 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006540:	f3bf 8f4f 	dsb	sy
}
 8006544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006546:	f3bf 8f6f 	isb	sy
}
 800654a:	bf00      	nop
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	e000ed00 	.word	0xe000ed00

0800655c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006564:	4b04      	ldr	r3, [pc, #16]	@ (8006578 <HAL_ETH_RxCpltCallback+0x1c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fedf 	bl	800732c <osSemaphoreRelease>
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	2000621c 	.word	0x2000621c

0800657c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006584:	4b04      	ldr	r3, [pc, #16]	@ (8006598 <HAL_ETH_TxCpltCallback+0x1c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fecf 	bl	800732c <osSemaphoreRelease>
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20006220 	.word	0x20006220

0800659c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fb fff7 	bl	8002598 <HAL_ETH_GetDMAError>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b0:	2b80      	cmp	r3, #128	@ 0x80
 80065b2:	d104      	bne.n	80065be <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80065b4:	4b04      	ldr	r3, [pc, #16]	@ (80065c8 <HAL_ETH_ErrorCallback+0x2c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 feb7 	bl	800732c <osSemaphoreRelease>
  }
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	2000621c 	.word	0x2000621c

080065cc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80065cc:	b5b0      	push	{r4, r5, r7, lr}
 80065ce:	b0b4      	sub	sp, #208	@ 0xd0
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 80065e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80065ea:	2264      	movs	r2, #100	@ 0x64
 80065ec:	2100      	movs	r1, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f00e fa55 	bl	8014a9e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80065f4:	4b9b      	ldr	r3, [pc, #620]	@ (8006864 <low_level_init+0x298>)
 80065f6:	4a9c      	ldr	r2, [pc, #624]	@ (8006868 <low_level_init+0x29c>)
 80065f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8006606:	23e1      	movs	r3, #225	@ 0xe1
 8006608:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 800660c:	2300      	movs	r3, #0
 800660e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8006612:	2300      	movs	r3, #0
 8006614:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8006618:	2300      	movs	r3, #0
 800661a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800661e:	4a91      	ldr	r2, [pc, #580]	@ (8006864 <low_level_init+0x298>)
 8006620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006624:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006626:	4b8f      	ldr	r3, [pc, #572]	@ (8006864 <low_level_init+0x298>)
 8006628:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800662c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800662e:	4b8d      	ldr	r3, [pc, #564]	@ (8006864 <low_level_init+0x298>)
 8006630:	4a8e      	ldr	r2, [pc, #568]	@ (800686c <low_level_init+0x2a0>)
 8006632:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006634:	4b8b      	ldr	r3, [pc, #556]	@ (8006864 <low_level_init+0x298>)
 8006636:	4a8e      	ldr	r2, [pc, #568]	@ (8006870 <low_level_init+0x2a4>)
 8006638:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800663a:	4b8a      	ldr	r3, [pc, #552]	@ (8006864 <low_level_init+0x298>)
 800663c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006640:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006642:	4888      	ldr	r0, [pc, #544]	@ (8006864 <low_level_init+0x298>)
 8006644:	f7fb f93c 	bl	80018c0 <HAL_ETH_Init>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800664e:	2238      	movs	r2, #56	@ 0x38
 8006650:	2100      	movs	r1, #0
 8006652:	4888      	ldr	r0, [pc, #544]	@ (8006874 <low_level_init+0x2a8>)
 8006654:	f00e fa23 	bl	8014a9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006658:	4b86      	ldr	r3, [pc, #536]	@ (8006874 <low_level_init+0x2a8>)
 800665a:	2221      	movs	r2, #33	@ 0x21
 800665c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800665e:	4b85      	ldr	r3, [pc, #532]	@ (8006874 <low_level_init+0x2a8>)
 8006660:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8006664:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006666:	4b83      	ldr	r3, [pc, #524]	@ (8006874 <low_level_init+0x2a8>)
 8006668:	2200      	movs	r2, #0
 800666a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800666c:	4882      	ldr	r0, [pc, #520]	@ (8006878 <low_level_init+0x2ac>)
 800666e:	f004 faa9 	bl	800abc4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2206      	movs	r2, #6
 8006676:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800667a:	4b7a      	ldr	r3, [pc, #488]	@ (8006864 <low_level_init+0x298>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	781a      	ldrb	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006686:	4b77      	ldr	r3, [pc, #476]	@ (8006864 <low_level_init+0x298>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	785a      	ldrb	r2, [r3, #1]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006692:	4b74      	ldr	r3, [pc, #464]	@ (8006864 <low_level_init+0x298>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	789a      	ldrb	r2, [r3, #2]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800669e:	4b71      	ldr	r3, [pc, #452]	@ (8006864 <low_level_init+0x298>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	78da      	ldrb	r2, [r3, #3]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80066aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006864 <low_level_init+0x298>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	791a      	ldrb	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80066b6:	4b6b      	ldr	r3, [pc, #428]	@ (8006864 <low_level_init+0x298>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	795a      	ldrb	r2, [r3, #5]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80066c8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80066d0:	f043 030a 	orr.w	r3, r3, #10
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80066dc:	2300      	movs	r3, #0
 80066de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066e0:	2300      	movs	r3, #0
 80066e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80066e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fd9e 	bl	800722c <osSemaphoreCreate>
 80066f0:	4603      	mov	r3, r0
 80066f2:	4a62      	ldr	r2, [pc, #392]	@ (800687c <low_level_init+0x2b0>)
 80066f4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80066f6:	2300      	movs	r3, #0
 80066f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066fa:	2300      	movs	r3, #0
 80066fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80066fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fd91 	bl	800722c <osSemaphoreCreate>
 800670a:	4603      	mov	r3, r0
 800670c:	4a5c      	ldr	r2, [pc, #368]	@ (8006880 <low_level_init+0x2b4>)
 800670e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006710:	4b5a      	ldr	r3, [pc, #360]	@ (800687c <low_level_init+0x2b0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fdba 	bl	8007290 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800671c:	4b58      	ldr	r3, [pc, #352]	@ (8006880 <low_level_init+0x2b4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2100      	movs	r1, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fdb4 	bl	8007290 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006728:	4b56      	ldr	r3, [pc, #344]	@ (8006884 <low_level_init+0x2b8>)
 800672a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800672e:	461d      	mov	r5, r3
 8006730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800673c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fc69 	bl	800701a <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006748:	494f      	ldr	r1, [pc, #316]	@ (8006888 <low_level_init+0x2bc>)
 800674a:	4850      	ldr	r0, [pc, #320]	@ (800688c <low_level_init+0x2c0>)
 800674c:	f7fa fd3b 	bl	80011c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006750:	484e      	ldr	r0, [pc, #312]	@ (800688c <low_level_init+0x2c0>)
 8006752:	f7fa fd6a 	bl	800122a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006756:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800675a:	2b00      	cmp	r3, #0
 800675c:	d165      	bne.n	800682a <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800675e:	484b      	ldr	r0, [pc, #300]	@ (800688c <low_level_init+0x2c0>)
 8006760:	f7fa fe0b 	bl	800137a <LAN8742_GetLinkState>
 8006764:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800676c:	2b01      	cmp	r3, #1
 800676e:	dc06      	bgt.n	800677e <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f004 fe01 	bl	800b378 <netif_set_link_down>
      netif_set_down(netif);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f004 fd98 	bl	800b2ac <netif_set_down>
 800677c:	e057      	b.n	800682e <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 800677e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006782:	3b02      	subs	r3, #2
 8006784:	2b03      	cmp	r3, #3
 8006786:	d82b      	bhi.n	80067e0 <low_level_init+0x214>
 8006788:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <low_level_init+0x1c4>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067b3 	.word	0x080067b3
 8006798:	080067c3 	.word	0x080067c3
 800679c:	080067d3 	.word	0x080067d3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80067a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80067a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80067b0:	e01f      	b.n	80067f2 <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80067b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80067c0:	e017      	b.n	80067f2 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80067c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80067ca:	2300      	movs	r3, #0
 80067cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80067d0:	e00f      	b.n	80067f2 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80067d8:	2300      	movs	r3, #0
 80067da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80067de:	e008      	b.n	80067f2 <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80067e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80067e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80067f0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80067f2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80067f6:	4619      	mov	r1, r3
 80067f8:	481a      	ldr	r0, [pc, #104]	@ (8006864 <low_level_init+0x298>)
 80067fa:	f7fb fd73 	bl	80022e4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80067fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006802:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8006804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006808:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800680a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800680e:	4619      	mov	r1, r3
 8006810:	4814      	ldr	r0, [pc, #80]	@ (8006864 <low_level_init+0x298>)
 8006812:	f7fb fe51 	bl	80024b8 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8006816:	4813      	ldr	r0, [pc, #76]	@ (8006864 <low_level_init+0x298>)
 8006818:	f7fb f8ce 	bl	80019b8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f004 fcd9 	bl	800b1d4 <netif_set_up>
    netif_set_link_up(netif);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f004 fd74 	bl	800b310 <netif_set_link_up>
 8006828:	e001      	b.n	800682e <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 800682a:	f7fa fa31 	bl	8000c90 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 800682e:	f7fa fead 	bl	800158c <HAL_GetREVID>
 8006832:	4603      	mov	r3, r0
 8006834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006838:	d10f      	bne.n	800685a <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800683a:	4b15      	ldr	r3, [pc, #84]	@ (8006890 <low_level_init+0x2c4>)
 800683c:	f107 040c 	add.w	r4, r7, #12
 8006840:	461d      	mov	r5, r3
 8006842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006846:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800684a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fbe0 	bl	800701a <osThreadCreate>
  }
}
 800685a:	bf00      	nop
 800685c:	37d0      	adds	r7, #208	@ 0xd0
 800685e:	46bd      	mov	sp, r7
 8006860:	bdb0      	pop	{r4, r5, r7, pc}
 8006862:	bf00      	nop
 8006864:	20006224 	.word	0x20006224
 8006868:	40028000 	.word	0x40028000
 800686c:	2000012c 	.word	0x2000012c
 8006870:	2000008c 	.word	0x2000008c
 8006874:	200062dc 	.word	0x200062dc
 8006878:	080183fc 	.word	0x080183fc
 800687c:	2000621c 	.word	0x2000621c
 8006880:	20006220 	.word	0x20006220
 8006884:	080158b8 	.word	0x080158b8
 8006888:	2000000c 	.word	0x2000000c
 800688c:	20006314 	.word	0x20006314
 8006890:	080158e4 	.word	0x080158e4

08006894 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b092      	sub	sp, #72	@ 0x48
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80068ac:	f107 030c 	add.w	r3, r7, #12
 80068b0:	2230      	movs	r2, #48	@ 0x30
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f00e f8f2 	bl	8014a9e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80068ba:	f107 030c 	add.w	r3, r7, #12
 80068be:	2230      	movs	r2, #48	@ 0x30
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f00e f8eb 	bl	8014a9e <memset>

  for(q = p; q != NULL; q = q->next)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80068cc:	e045      	b.n	800695a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80068ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d902      	bls.n	80068da <low_level_output+0x46>
      return ERR_IF;
 80068d4:	f06f 030b 	mvn.w	r3, #11
 80068d8:	e06c      	b.n	80069b4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80068da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068dc:	6859      	ldr	r1, [r3, #4]
 80068de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	3348      	adds	r3, #72	@ 0x48
 80068ea:	443b      	add	r3, r7
 80068ec:	3b3c      	subs	r3, #60	@ 0x3c
 80068ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80068f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068f2:	895b      	ldrh	r3, [r3, #10]
 80068f4:	4619      	mov	r1, r3
 80068f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068f8:	4613      	mov	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	3348      	adds	r3, #72	@ 0x48
 8006902:	443b      	add	r3, r7
 8006904:	3b38      	subs	r3, #56	@ 0x38
 8006906:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800690a:	2b00      	cmp	r3, #0
 800690c:	d011      	beq.n	8006932 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800690e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006910:	1e5a      	subs	r2, r3, #1
 8006912:	f107 000c 	add.w	r0, r7, #12
 8006916:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006918:	460b      	mov	r3, r1
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	440b      	add	r3, r1
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	18c1      	adds	r1, r0, r3
 8006922:	4613      	mov	r3, r2
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	3348      	adds	r3, #72	@ 0x48
 800692c:	443b      	add	r3, r7
 800692e:	3b34      	subs	r3, #52	@ 0x34
 8006930:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800693a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800693c:	4613      	mov	r3, r2
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	3348      	adds	r3, #72	@ 0x48
 8006946:	443b      	add	r3, r7
 8006948:	3b34      	subs	r3, #52	@ 0x34
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800694e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006950:	3301      	adds	r3, #1
 8006952:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	643b      	str	r3, [r7, #64]	@ 0x40
 800695a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1b6      	bne.n	80068ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	891b      	ldrh	r3, [r3, #8]
 8006964:	461a      	mov	r2, r3
 8006966:	4b15      	ldr	r3, [pc, #84]	@ (80069bc <low_level_output+0x128>)
 8006968:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800696a:	4a14      	ldr	r2, [pc, #80]	@ (80069bc <low_level_output+0x128>)
 800696c:	f107 030c 	add.w	r3, r7, #12
 8006970:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006972:	4a12      	ldr	r2, [pc, #72]	@ (80069bc <low_level_output+0x128>)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006978:	6838      	ldr	r0, [r7, #0]
 800697a:	f005 f981 	bl	800bc80 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800697e:	490f      	ldr	r1, [pc, #60]	@ (80069bc <low_level_output+0x128>)
 8006980:	480f      	ldr	r0, [pc, #60]	@ (80069c0 <low_level_output+0x12c>)
 8006982:	f7fb f927 	bl	8001bd4 <HAL_ETH_Transmit_IT>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10e      	bne.n	80069aa <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800698c:	bf00      	nop
 800698e:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <low_level_output+0x130>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f04f 31ff 	mov.w	r1, #4294967295
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fc7a 	bl	8007290 <osSemaphoreWait>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f5      	bne.n	800698e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 80069a2:	4807      	ldr	r0, [pc, #28]	@ (80069c0 <low_level_output+0x12c>)
 80069a4:	f7fb faaa 	bl	8001efc <HAL_ETH_ReleaseTxPacket>
 80069a8:	e002      	b.n	80069b0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 80069aa:	6838      	ldr	r0, [r7, #0]
 80069ac:	f005 f8c2 	bl	800bb34 <pbuf_free>
  }

  return errval;
 80069b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3748      	adds	r7, #72	@ 0x48
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	200062dc 	.word	0x200062dc
 80069c0:	20006224 	.word	0x20006224
 80069c4:	20006220 	.word	0x20006220

080069c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80069d4:	4b07      	ldr	r3, [pc, #28]	@ (80069f4 <low_level_input+0x2c>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d105      	bne.n	80069e8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80069dc:	f107 030c 	add.w	r3, r7, #12
 80069e0:	4619      	mov	r1, r3
 80069e2:	4805      	ldr	r0, [pc, #20]	@ (80069f8 <low_level_input+0x30>)
 80069e4:	f7fb f952 	bl	8001c8c <HAL_ETH_ReadData>
  }

  return p;
 80069e8:	68fb      	ldr	r3, [r7, #12]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20006218 	.word	0x20006218
 80069f8:	20006224 	.word	0x20006224

080069fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a4c <ethernetif_input+0x50>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f04f 31ff 	mov.w	r1, #4294967295
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fc3b 	bl	8007290 <osSemaphoreWait>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f5      	bne.n	8006a0c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006a20:	68b8      	ldr	r0, [r7, #8]
 8006a22:	f7ff ffd1 	bl	80069c8 <low_level_input>
 8006a26:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	4798      	blx	r3
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f005 f878 	bl	800bb34 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ea      	bne.n	8006a20 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006a4a:	e7df      	b.n	8006a0c <ethernetif_input+0x10>
 8006a4c:	2000621c 	.word	0x2000621c

08006a50 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <ethernetif_init+0x1c>
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a98 <ethernetif_init+0x48>)
 8006a60:	f240 2202 	movw	r2, #514	@ 0x202
 8006a64:	490d      	ldr	r1, [pc, #52]	@ (8006a9c <ethernetif_init+0x4c>)
 8006a66:	480e      	ldr	r0, [pc, #56]	@ (8006aa0 <ethernetif_init+0x50>)
 8006a68:	f00d ffb4 	bl	80149d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2273      	movs	r2, #115	@ 0x73
 8006a70:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2274      	movs	r2, #116	@ 0x74
 8006a78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a09      	ldr	r2, [pc, #36]	@ (8006aa4 <ethernetif_init+0x54>)
 8006a80:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a08      	ldr	r2, [pc, #32]	@ (8006aa8 <ethernetif_init+0x58>)
 8006a86:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff fd9f 	bl	80065cc <low_level_init>

  return ERR_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	08015900 	.word	0x08015900
 8006a9c:	0801591c 	.word	0x0801591c
 8006aa0:	0801592c 	.word	0x0801592c
 8006aa4:	08012795 	.word	0x08012795
 8006aa8:	08006895 	.word	0x08006895

08006aac <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006ab8:	68f9      	ldr	r1, [r7, #12]
 8006aba:	4809      	ldr	r0, [pc, #36]	@ (8006ae0 <pbuf_free_custom+0x34>)
 8006abc:	f004 f972 	bl	800ada4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006ac0:	4b08      	ldr	r3, [pc, #32]	@ (8006ae4 <pbuf_free_custom+0x38>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d107      	bne.n	8006ad8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006ac8:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <pbuf_free_custom+0x38>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006ace:	4b06      	ldr	r3, [pc, #24]	@ (8006ae8 <pbuf_free_custom+0x3c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fc2a 	bl	800732c <osSemaphoreRelease>
  }
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	080183fc 	.word	0x080183fc
 8006ae4:	20006218 	.word	0x20006218
 8006ae8:	2000621c 	.word	0x2000621c

08006aec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006af0:	f7fa fd1c 	bl	800152c <HAL_GetTick>
 8006af4:	4603      	mov	r3, r0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	@ 0x38
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a52      	ldr	r2, [pc, #328]	@ (8006c64 <HAL_ETH_MspInit+0x168>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	f040 809e 	bne.w	8006c5c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006b20:	4b51      	ldr	r3, [pc, #324]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b24:	4a50      	ldr	r2, [pc, #320]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b34:	623b      	str	r3, [r7, #32]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	4b4b      	ldr	r3, [pc, #300]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b44:	4b48      	ldr	r3, [pc, #288]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4b45      	ldr	r3, [pc, #276]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b54:	4a44      	ldr	r2, [pc, #272]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b5c:	4b42      	ldr	r3, [pc, #264]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b68:	4b3f      	ldr	r3, [pc, #252]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b6e:	f043 0304 	orr.w	r3, r3, #4
 8006b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b74:	4b3c      	ldr	r3, [pc, #240]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b80:	4b39      	ldr	r3, [pc, #228]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b84:	4a38      	ldr	r2, [pc, #224]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b8c:	4b36      	ldr	r3, [pc, #216]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	613b      	str	r3, [r7, #16]
 8006b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b98:	4b33      	ldr	r3, [pc, #204]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9c:	4a32      	ldr	r2, [pc, #200]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006b9e:	f043 0302 	orr.w	r3, r3, #2
 8006ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ba4:	4b30      	ldr	r3, [pc, #192]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <HAL_ETH_MspInit+0x16c>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PG8     ------> ETH_PPS_OUT
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006bc8:	2332      	movs	r3, #50	@ 0x32
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006bd8:	230b      	movs	r3, #11
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006be0:	4619      	mov	r1, r3
 8006be2:	4822      	ldr	r0, [pc, #136]	@ (8006c6c <HAL_ETH_MspInit+0x170>)
 8006be4:	f7fc f8e8 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006be8:	2386      	movs	r3, #134	@ 0x86
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bec:	2302      	movs	r3, #2
 8006bee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006bf8:	230b      	movs	r3, #11
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c00:	4619      	mov	r1, r3
 8006c02:	481b      	ldr	r0, [pc, #108]	@ (8006c70 <HAL_ETH_MspInit+0x174>)
 8006c04:	f7fc f8d8 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8006c08:	f242 0301 	movw	r3, #8193	@ 0x2001
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c16:	2303      	movs	r3, #3
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c1a:	230b      	movs	r3, #11
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c22:	4619      	mov	r1, r3
 8006c24:	4813      	ldr	r0, [pc, #76]	@ (8006c74 <HAL_ETH_MspInit+0x178>)
 8006c26:	f7fc f8c7 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006c2a:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c30:	2302      	movs	r3, #2
 8006c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006c3c:	230b      	movs	r3, #11
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c44:	4619      	mov	r1, r3
 8006c46:	480c      	ldr	r0, [pc, #48]	@ (8006c78 <HAL_ETH_MspInit+0x17c>)
 8006c48:	f7fc f8b6 	bl	8002db8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2105      	movs	r1, #5
 8006c50:	203d      	movs	r0, #61	@ 0x3d
 8006c52:	f7fa fd82 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006c56:	203d      	movs	r0, #61	@ 0x3d
 8006c58:	f7fa fd9b 	bl	8001792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	3738      	adds	r7, #56	@ 0x38
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40028000 	.word	0x40028000
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	40020800 	.word	0x40020800
 8006c70:	40020000 	.word	0x40020000
 8006c74:	40020400 	.word	0x40020400
 8006c78:	40021800 	.word	0x40021800

08006c7c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006c80:	4802      	ldr	r0, [pc, #8]	@ (8006c8c <ETH_PHY_IO_Init+0x10>)
 8006c82:	f7fb fc33 	bl	80024ec <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20006224 	.word	0x20006224

08006c90 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return 0;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	68f9      	ldr	r1, [r7, #12]
 8006cb2:	4807      	ldr	r0, [pc, #28]	@ (8006cd0 <ETH_PHY_IO_ReadReg+0x30>)
 8006cb4:	f7fb fa82 	bl	80021bc <HAL_ETH_ReadPHYRegister>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc2:	e000      	b.n	8006cc6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20006224 	.word	0x20006224

08006cd4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	68f9      	ldr	r1, [r7, #12]
 8006ce6:	4807      	ldr	r0, [pc, #28]	@ (8006d04 <ETH_PHY_IO_WriteReg+0x30>)
 8006ce8:	f7fb fab3 	bl	8002252 <HAL_ETH_WritePHYRegister>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	e000      	b.n	8006cfa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20006224 	.word	0x20006224

08006d08 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006d0c:	f7fa fc0e 	bl	800152c <HAL_GetTick>
 8006d10:	4603      	mov	r3, r0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b0a0      	sub	sp, #128	@ 0x80
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006d20:	f107 0308 	add.w	r3, r7, #8
 8006d24:	2264      	movs	r2, #100	@ 0x64
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f00d feb8 	bl	8014a9e <memset>
  int32_t PHYLinkState = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d36:	2300      	movs	r3, #0
 8006d38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006d42:	483a      	ldr	r0, [pc, #232]	@ (8006e2c <ethernet_link_thread+0x114>)
 8006d44:	f7fa fb19 	bl	800137a <LAN8742_GetLinkState>
 8006d48:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00c      	beq.n	8006d76 <ethernet_link_thread+0x5e>
 8006d5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	dc09      	bgt.n	8006d76 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006d62:	4833      	ldr	r0, [pc, #204]	@ (8006e30 <ethernet_link_thread+0x118>)
 8006d64:	f7fa feb6 	bl	8001ad4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006d68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d6a:	f004 fa9f 	bl	800b2ac <netif_set_down>
    netif_set_link_down(netif);
 8006d6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d70:	f004 fb02 	bl	800b378 <netif_set_link_down>
 8006d74:	e055      	b.n	8006e22 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d14e      	bne.n	8006e22 <ethernet_link_thread+0x10a>
 8006d84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	dd4b      	ble.n	8006e22 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d8c:	3b02      	subs	r3, #2
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d82a      	bhi.n	8006de8 <ethernet_link_thread+0xd0>
 8006d92:	a201      	add	r2, pc, #4	@ (adr r2, 8006d98 <ethernet_link_thread+0x80>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006dbb 	.word	0x08006dbb
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	08006ddb 	.word	0x08006ddb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006da8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006dac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006dae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006db2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006db4:	2301      	movs	r3, #1
 8006db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006db8:	e017      	b.n	8006dea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006dbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006dc2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006dc8:	e00f      	b.n	8006dea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006dca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006dce:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006dd8:	e007      	b.n	8006dea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006dde:	2300      	movs	r3, #0
 8006de0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006de2:	2301      	movs	r3, #1
 8006de4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006de6:	e000      	b.n	8006dea <ethernet_link_thread+0xd2>
    default:
      break;
 8006de8:	bf00      	nop
    }

    if(linkchanged)
 8006dea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d018      	beq.n	8006e22 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006df0:	f107 0308 	add.w	r3, r7, #8
 8006df4:	4619      	mov	r1, r3
 8006df6:	480e      	ldr	r0, [pc, #56]	@ (8006e30 <ethernet_link_thread+0x118>)
 8006df8:	f7fb fa74 	bl	80022e4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dfe:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e02:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4809      	ldr	r0, [pc, #36]	@ (8006e30 <ethernet_link_thread+0x118>)
 8006e0c:	f7fb fb54 	bl	80024b8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006e10:	4807      	ldr	r0, [pc, #28]	@ (8006e30 <ethernet_link_thread+0x118>)
 8006e12:	f7fa fdd1 	bl	80019b8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006e16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e18:	f004 f9dc 	bl	800b1d4 <netif_set_up>
      netif_set_link_up(netif);
 8006e1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e1e:	f004 fa77 	bl	800b310 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006e22:	2064      	movs	r0, #100	@ 0x64
 8006e24:	f000 f951 	bl	80070ca <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006e28:	e78b      	b.n	8006d42 <ethernet_link_thread+0x2a>
 8006e2a:	bf00      	nop
 8006e2c:	20006314 	.word	0x20006314
 8006e30:	20006224 	.word	0x20006224

08006e34 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006e3c:	4812      	ldr	r0, [pc, #72]	@ (8006e88 <HAL_ETH_RxAllocateCallback+0x54>)
 8006e3e:	f003 ff3d 	bl	800acbc <memp_malloc_pool>
 8006e42:	60f8      	str	r0, [r7, #12]
  if (p)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f103 0220 	add.w	r2, r3, #32
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a0d      	ldr	r2, [pc, #52]	@ (8006e8c <HAL_ETH_RxAllocateCallback+0x58>)
 8006e58:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006e62:	9201      	str	r2, [sp, #4]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2241      	movs	r2, #65	@ 0x41
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f004 fca7 	bl	800b7c0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006e72:	e005      	b.n	8006e80 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006e74:	4b06      	ldr	r3, [pc, #24]	@ (8006e90 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]
}
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	080183fc 	.word	0x080183fc
 8006e8c:	08006aad 	.word	0x08006aad
 8006e90:	20006218 	.word	0x20006218

08006e94 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3b20      	subs	r3, #32
 8006eb2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	887a      	ldrh	r2, [r7, #2]
 8006ec4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e003      	b.n	8006ede <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	e009      	b.n	8006f00 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	891a      	ldrh	r2, [r3, #8]
 8006ef0:	887b      	ldrh	r3, [r7, #2]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f2      	bne.n	8006eec <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006f06:	887b      	ldrh	r3, [r7, #2]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fafa 	bl	8006504 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006f10:	bf00      	nop
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f004 fe07 	bl	800bb34 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8006f38:	4b15      	ldr	r3, [pc, #84]	@ (8006f90 <RMII_Thread+0x60>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8006f44:	2000      	movs	r0, #0
 8006f46:	f000 f8b4 	bl	80070b2 <osThreadTerminate>
 8006f4a:	e7f5      	b.n	8006f38 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8006f4c:	4b10      	ldr	r3, [pc, #64]	@ (8006f90 <RMII_Thread+0x60>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8006f54:	2b0a      	cmp	r3, #10
 8006f56:	d916      	bls.n	8006f86 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8006f58:	4b0e      	ldr	r3, [pc, #56]	@ (8006f94 <RMII_Thread+0x64>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006f94 <RMII_Thread+0x64>)
 8006f5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f62:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8006f64:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <RMII_Thread+0x64>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4a0a      	ldr	r2, [pc, #40]	@ (8006f94 <RMII_Thread+0x64>)
 8006f6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f6e:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8006f70:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <RMII_Thread+0x60>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006f78:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <RMII_Thread+0x60>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 0201 	orr.w	r2, r2, #1
 8006f80:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006f84:	e7d8      	b.n	8006f38 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8006f86:	20c8      	movs	r0, #200	@ 0xc8
 8006f88:	f000 f89f 	bl	80070ca <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8006f8c:	e7d4      	b.n	8006f38 <RMII_Thread+0x8>
 8006f8e:	bf00      	nop
 8006f90:	20006224 	.word	0x20006224
 8006f94:	40013800 	.word	0x40013800

08006f98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006faa:	2b84      	cmp	r3, #132	@ 0x84
 8006fac:	d005      	beq.n	8006fba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006fae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3303      	adds	r3, #3
 8006fb8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fba:	68fb      	ldr	r3, [r7, #12]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fce:	f3ef 8305 	mrs	r3, IPSR
 8006fd2:	607b      	str	r3, [r7, #4]
  return(result);
 8006fd4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf14      	ite	ne
 8006fda:	2301      	movne	r3, #1
 8006fdc:	2300      	moveq	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ff0:	f001 fd64 	bl	8008abc <vTaskStartScheduler>
  
  return osOK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006ffe:	f7ff ffe3 	bl	8006fc8 <inHandlerMode>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007008:	f001 fe7c 	bl	8008d04 <xTaskGetTickCountFromISR>
 800700c:	4603      	mov	r3, r0
 800700e:	e002      	b.n	8007016 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007010:	f001 fe68 	bl	8008ce4 <xTaskGetTickCount>
 8007014:	4603      	mov	r3, r0
  }
}
 8007016:	4618      	mov	r0, r3
 8007018:	bd80      	pop	{r7, pc}

0800701a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800701a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701c:	b089      	sub	sp, #36	@ 0x24
 800701e:	af04      	add	r7, sp, #16
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d020      	beq.n	800706e <osThreadCreate+0x54>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01c      	beq.n	800706e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685c      	ldr	r4, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691e      	ldr	r6, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff ffa6 	bl	8006f98 <makeFreeRtosPriority>
 800704c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007056:	9202      	str	r2, [sp, #8]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	9100      	str	r1, [sp, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	4632      	mov	r2, r6
 8007060:	4629      	mov	r1, r5
 8007062:	4620      	mov	r0, r4
 8007064:	f001 fac0 	bl	80085e8 <xTaskCreateStatic>
 8007068:	4603      	mov	r3, r0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	e01c      	b.n	80070a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685c      	ldr	r4, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800707a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff ff88 	bl	8006f98 <makeFreeRtosPriority>
 8007088:	4602      	mov	r2, r0
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	9200      	str	r2, [sp, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	4632      	mov	r2, r6
 8007096:	4629      	mov	r1, r5
 8007098:	4620      	mov	r0, r4
 800709a:	f001 fb0b 	bl	80086b4 <xTaskCreate>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d001      	beq.n	80070a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070b2 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 fc34 	bl	8008928 <vTaskDelete>
  return osOK;
 80070c0:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <osDelay+0x16>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	e000      	b.n	80070e2 <osDelay+0x18>
 80070e0:	2301      	movs	r3, #1
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 fcb2 	bl	8008a4c <vTaskDelay>
  
  return osOK;
 80070e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	2001      	movs	r0, #1
 800710a:	f000 fc5c 	bl	80079c6 <xQueueCreateMutexStatic>
 800710e:	4603      	mov	r3, r0
 8007110:	e003      	b.n	800711a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007112:	2001      	movs	r0, #1
 8007114:	f000 fc3f 	bl	8007996 <xQueueCreateMutex>
 8007118:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800712e:	2300      	movs	r3, #0
 8007130:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <osMutexWait+0x18>
    return osErrorParameter;
 8007138:	2380      	movs	r3, #128	@ 0x80
 800713a:	e03a      	b.n	80071b2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d103      	bne.n	8007150 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	e009      	b.n	8007164 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d006      	beq.n	8007164 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <osMutexWait+0x40>
      ticks = 1;
 8007160:	2301      	movs	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007164:	f7ff ff30 	bl	8006fc8 <inHandlerMode>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d017      	beq.n	800719e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	461a      	mov	r2, r3
 8007174:	2100      	movs	r1, #0
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 f886 	bl	8008288 <xQueueReceiveFromISR>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d001      	beq.n	8007186 <osMutexWait+0x62>
      return osErrorOS;
 8007182:	23ff      	movs	r3, #255	@ 0xff
 8007184:	e015      	b.n	80071b2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d011      	beq.n	80071b0 <osMutexWait+0x8c>
 800718c:	4b0b      	ldr	r3, [pc, #44]	@ (80071bc <osMutexWait+0x98>)
 800718e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	e008      	b.n	80071b0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 ff59 	bl	8008058 <xQueueSemaphoreTake>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d001      	beq.n	80071b0 <osMutexWait+0x8c>
    return osErrorOS;
 80071ac:	23ff      	movs	r3, #255	@ 0xff
 80071ae:	e000      	b.n	80071b2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80071d0:	f7ff fefa 	bl	8006fc8 <inHandlerMode>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fdb8 	bl	8007d56 <xQueueGiveFromISR>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d001      	beq.n	80071f0 <osMutexRelease+0x30>
      return osErrorOS;
 80071ec:	23ff      	movs	r3, #255	@ 0xff
 80071ee:	e017      	b.n	8007220 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <osMutexRelease+0x5e>
 80071f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <osMutexRelease+0x68>)
 80071f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	e00a      	b.n	800721e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007208:	2300      	movs	r3, #0
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fbf4 	bl	80079fc <xQueueGenericSend>
 8007214:	4603      	mov	r3, r0
 8007216:	2b01      	cmp	r3, #1
 8007218:	d001      	beq.n	800721e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800721a:	23ff      	movs	r3, #255	@ 0xff
 800721c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800721e:	68fb      	ldr	r3, [r7, #12]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af02      	add	r7, sp, #8
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00f      	beq.n	800725e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d10a      	bne.n	800725a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2203      	movs	r2, #3
 800724a:	9200      	str	r2, [sp, #0]
 800724c:	2200      	movs	r2, #0
 800724e:	2100      	movs	r1, #0
 8007250:	2001      	movs	r0, #1
 8007252:	f000 fa9d 	bl	8007790 <xQueueGenericCreateStatic>
 8007256:	4603      	mov	r3, r0
 8007258:	e016      	b.n	8007288 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	e014      	b.n	8007288 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d110      	bne.n	8007286 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007264:	2203      	movs	r2, #3
 8007266:	2100      	movs	r1, #0
 8007268:	2001      	movs	r0, #1
 800726a:	f000 fb18 	bl	800789e <xQueueGenericCreate>
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <osSemaphoreCreate+0x56>
 8007276:	2300      	movs	r3, #0
 8007278:	2200      	movs	r2, #0
 800727a:	2100      	movs	r1, #0
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fbbd 	bl	80079fc <xQueueGenericSend>
      return sema;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	e000      	b.n	8007288 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007286:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800729a:	2300      	movs	r3, #0
 800729c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80072a4:	2380      	movs	r3, #128	@ 0x80
 80072a6:	e03a      	b.n	800731e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d103      	bne.n	80072bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	e009      	b.n	80072d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d006      	beq.n	80072d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <osSemaphoreWait+0x40>
      ticks = 1;
 80072cc:	2301      	movs	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80072d0:	f7ff fe7a 	bl	8006fc8 <inHandlerMode>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d017      	beq.n	800730a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80072da:	f107 0308 	add.w	r3, r7, #8
 80072de:	461a      	mov	r2, r3
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 ffd0 	bl	8008288 <xQueueReceiveFromISR>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d001      	beq.n	80072f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80072ee:	23ff      	movs	r3, #255	@ 0xff
 80072f0:	e015      	b.n	800731e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d011      	beq.n	800731c <osSemaphoreWait+0x8c>
 80072f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <osSemaphoreWait+0x98>)
 80072fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	e008      	b.n	800731c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fea3 	bl	8008058 <xQueueSemaphoreTake>
 8007312:	4603      	mov	r3, r0
 8007314:	2b01      	cmp	r3, #1
 8007316:	d001      	beq.n	800731c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007318:	23ff      	movs	r3, #255	@ 0xff
 800731a:	e000      	b.n	800731e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800733c:	f7ff fe44 	bl	8006fc8 <inHandlerMode>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d016      	beq.n	8007374 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007346:	f107 0308 	add.w	r3, r7, #8
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fd02 	bl	8007d56 <xQueueGiveFromISR>
 8007352:	4603      	mov	r3, r0
 8007354:	2b01      	cmp	r3, #1
 8007356:	d001      	beq.n	800735c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007358:	23ff      	movs	r3, #255	@ 0xff
 800735a:	e017      	b.n	800738c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d013      	beq.n	800738a <osSemaphoreRelease+0x5e>
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <osSemaphoreRelease+0x68>)
 8007364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	e00a      	b.n	800738a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007374:	2300      	movs	r3, #0
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb3e 	bl	80079fc <xQueueGenericSend>
 8007380:	4603      	mov	r3, r0
 8007382:	2b01      	cmp	r3, #1
 8007384:	d001      	beq.n	800738a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007386:	23ff      	movs	r3, #255	@ 0xff
 8007388:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800738a:	68fb      	ldr	r3, [r7, #12]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	e000ed04 	.word	0xe000ed04

08007398 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b085      	sub	sp, #20
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d011      	beq.n	80073ce <osMessageCreate+0x36>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2400      	movs	r4, #0
 80073c4:	9400      	str	r4, [sp, #0]
 80073c6:	f000 f9e3 	bl	8007790 <xQueueGenericCreateStatic>
 80073ca:	4603      	mov	r3, r0
 80073cc:	e008      	b.n	80073e0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	4619      	mov	r1, r3
 80073da:	f000 fa60 	bl	800789e <xQueueGenericCreate>
 80073de:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd90      	pop	{r4, r7, pc}

080073e8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <osMessagePut+0x1e>
    ticks = 1;
 8007402:	2301      	movs	r3, #1
 8007404:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007406:	f7ff fddf 	bl	8006fc8 <inHandlerMode>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d018      	beq.n	8007442 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007410:	f107 0210 	add.w	r2, r7, #16
 8007414:	f107 0108 	add.w	r1, r7, #8
 8007418:	2300      	movs	r3, #0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fbf8 	bl	8007c10 <xQueueGenericSendFromISR>
 8007420:	4603      	mov	r3, r0
 8007422:	2b01      	cmp	r3, #1
 8007424:	d001      	beq.n	800742a <osMessagePut+0x42>
      return osErrorOS;
 8007426:	23ff      	movs	r3, #255	@ 0xff
 8007428:	e018      	b.n	800745c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d014      	beq.n	800745a <osMessagePut+0x72>
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <osMessagePut+0x7c>)
 8007432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	e00b      	b.n	800745a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007442:	f107 0108 	add.w	r1, r7, #8
 8007446:	2300      	movs	r3, #0
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 fad6 	bl	80079fc <xQueueGenericSend>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d001      	beq.n	800745a <osMessagePut+0x72>
      return osErrorOS;
 8007456:	23ff      	movs	r3, #255	@ 0xff
 8007458:	e000      	b.n	800745c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b08b      	sub	sp, #44	@ 0x2c
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	617b      	str	r3, [r7, #20]
    return event;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	461c      	mov	r4, r3
 800748a:	f107 0314 	add.w	r3, r7, #20
 800748e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007496:	e054      	b.n	8007542 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007498:	2300      	movs	r3, #0
 800749a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a6:	d103      	bne.n	80074b0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80074a8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ae:	e009      	b.n	80074c4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d006      	beq.n	80074c4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <osMessageGet+0x5c>
      ticks = 1;
 80074c0:	2301      	movs	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80074c4:	f7ff fd80 	bl	8006fc8 <inHandlerMode>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01c      	beq.n	8007508 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80074ce:	f107 0220 	add.w	r2, r7, #32
 80074d2:	f107 0314 	add.w	r3, r7, #20
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	68b8      	ldr	r0, [r7, #8]
 80074dc:	f000 fed4 	bl	8008288 <xQueueReceiveFromISR>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d102      	bne.n	80074ec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80074e6:	2310      	movs	r3, #16
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e001      	b.n	80074f0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01d      	beq.n	8007532 <osMessageGet+0xca>
 80074f6:	4b15      	ldr	r3, [pc, #84]	@ (800754c <osMessageGet+0xe4>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	e014      	b.n	8007532 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	3304      	adds	r3, #4
 800750e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007510:	4619      	mov	r1, r3
 8007512:	68b8      	ldr	r0, [r7, #8]
 8007514:	f000 fcb8 	bl	8007e88 <xQueueReceive>
 8007518:	4603      	mov	r3, r0
 800751a:	2b01      	cmp	r3, #1
 800751c:	d102      	bne.n	8007524 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800751e:	2310      	movs	r3, #16
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	e006      	b.n	8007532 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <osMessageGet+0xc6>
 800752a:	2300      	movs	r3, #0
 800752c:	e000      	b.n	8007530 <osMessageGet+0xc8>
 800752e:	2340      	movs	r3, #64	@ 0x40
 8007530:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	461c      	mov	r4, r3
 8007536:	f107 0314 	add.w	r3, r7, #20
 800753a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800753e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	372c      	adds	r7, #44	@ 0x2c
 8007546:	46bd      	mov	sp, r7
 8007548:	bd90      	pop	{r4, r7, pc}
 800754a:	bf00      	nop
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 0208 	add.w	r2, r3, #8
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f04f 32ff 	mov.w	r2, #4294967295
 8007568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f103 0208 	add.w	r2, r3, #8
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f103 0208 	add.w	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d103      	bne.n	8007612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e00c      	b.n	800762c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3308      	adds	r3, #8
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	e002      	b.n	8007620 <vListInsert+0x2e>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	429a      	cmp	r2, r3
 800762a:	d2f6      	bcs.n	800761a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6892      	ldr	r2, [r2, #8]
 800767a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6852      	ldr	r2, [r2, #4]
 8007684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d103      	bne.n	8007698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	1e5a      	subs	r2, r3, #1
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10d      	bne.n	80076e8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d0:	b672      	cpsid	i
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	b662      	cpsie	i
 80076e0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80076e8:	f002 f978 	bl	80099dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f4:	68f9      	ldr	r1, [r7, #12]
 80076f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80076f8:	fb01 f303 	mul.w	r3, r1, r3
 80076fc:	441a      	add	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007718:	3b01      	subs	r3, #1
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	441a      	add	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	22ff      	movs	r2, #255	@ 0xff
 800772c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	22ff      	movs	r2, #255	@ 0xff
 8007734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d114      	bne.n	8007768 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d01a      	beq.n	800777c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3310      	adds	r3, #16
 800774a:	4618      	mov	r0, r3
 800774c:	f001 fc2e 	bl	8008fac <xTaskRemoveFromEventList>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <xQueueGenericReset+0xd4>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	e009      	b.n	800777c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3310      	adds	r3, #16
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff feef 	bl	8007550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3324      	adds	r3, #36	@ 0x24
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff feea 	bl	8007550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800777c:	f002 f964 	bl	8009a48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007780:	2301      	movs	r3, #1
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	e000ed04 	.word	0xe000ed04

08007790 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08e      	sub	sp, #56	@ 0x38
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10d      	bne.n	80077c0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a8:	b672      	cpsid	i
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	b662      	cpsie	i
 80077b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10d      	bne.n	80077e2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	b672      	cpsid	i
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	b662      	cpsie	i
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	e7fd      	b.n	80077de <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <xQueueGenericCreateStatic+0x5e>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <xQueueGenericCreateStatic+0x62>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <xQueueGenericCreateStatic+0x64>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10d      	bne.n	8007814 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	b672      	cpsid	i
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	b662      	cpsie	i
 800780c:	623b      	str	r3, [r7, #32]
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <xQueueGenericCreateStatic+0x90>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <xQueueGenericCreateStatic+0x94>
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <xQueueGenericCreateStatic+0x96>
 8007824:	2300      	movs	r3, #0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782e:	b672      	cpsid	i
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	b662      	cpsie	i
 800783e:	61fb      	str	r3, [r7, #28]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007846:	2348      	movs	r3, #72	@ 0x48
 8007848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b48      	cmp	r3, #72	@ 0x48
 800784e:	d00d      	beq.n	800786c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	b672      	cpsid	i
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	b662      	cpsie	i
 8007864:	61bb      	str	r3, [r7, #24]
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	e7fd      	b.n	8007868 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800786c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00d      	beq.n	8007894 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007880:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f848 	bl	8007924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007896:	4618      	mov	r0, r3
 8007898:	3730      	adds	r7, #48	@ 0x30
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b08a      	sub	sp, #40	@ 0x28
 80078a2:	af02      	add	r7, sp, #8
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10d      	bne.n	80078ce <xQueueGenericCreate+0x30>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	b672      	cpsid	i
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	b662      	cpsie	i
 80078c6:	613b      	str	r3, [r7, #16]
}
 80078c8:	bf00      	nop
 80078ca:	bf00      	nop
 80078cc:	e7fd      	b.n	80078ca <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d102      	bne.n	80078da <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
 80078d8:	e004      	b.n	80078e4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	fb02 f303 	mul.w	r3, r2, r3
 80078e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3348      	adds	r3, #72	@ 0x48
 80078e8:	4618      	mov	r0, r3
 80078ea:	f002 f9a5 	bl	8009c38 <pvPortMalloc>
 80078ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d011      	beq.n	800791a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	3348      	adds	r3, #72	@ 0x48
 80078fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007908:	79fa      	ldrb	r2, [r7, #7]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	4613      	mov	r3, r2
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f805 	bl	8007924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800791a:	69bb      	ldr	r3, [r7, #24]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e002      	b.n	8007946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007952:	2101      	movs	r1, #1
 8007954:	69b8      	ldr	r0, [r7, #24]
 8007956:	f7ff feaf 	bl	80076b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00e      	beq.n	800798e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007982:	2300      	movs	r3, #0
 8007984:	2200      	movs	r2, #0
 8007986:	2100      	movs	r1, #0
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f837 	bl	80079fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007996:	b580      	push	{r7, lr}
 8007998:	b086      	sub	sp, #24
 800799a:	af00      	add	r7, sp, #0
 800799c:	4603      	mov	r3, r0
 800799e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6939      	ldr	r1, [r7, #16]
 80079ae:	6978      	ldr	r0, [r7, #20]
 80079b0:	f7ff ff75 	bl	800789e <xQueueGenericCreate>
 80079b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff ffd3 	bl	8007962 <prvInitialiseMutex>

		return xNewQueue;
 80079bc:	68fb      	ldr	r3, [r7, #12]
	}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b088      	sub	sp, #32
 80079ca:	af02      	add	r7, sp, #8
 80079cc:	4603      	mov	r3, r0
 80079ce:	6039      	str	r1, [r7, #0]
 80079d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80079d2:	2301      	movs	r3, #1
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	2300      	movs	r3, #0
 80079d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	6939      	ldr	r1, [r7, #16]
 80079e4:	6978      	ldr	r0, [r7, #20]
 80079e6:	f7ff fed3 	bl	8007790 <xQueueGenericCreateStatic>
 80079ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7ff ffb8 	bl	8007962 <prvInitialiseMutex>

		return xNewQueue;
 80079f2:	68fb      	ldr	r3, [r7, #12]
	}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08e      	sub	sp, #56	@ 0x38
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10d      	bne.n	8007a34 <xQueueGenericSend+0x38>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	b672      	cpsid	i
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	b662      	cpsie	i
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <xQueueGenericSend+0x46>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <xQueueGenericSend+0x4a>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <xQueueGenericSend+0x4c>
 8007a46:	2300      	movs	r3, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10d      	bne.n	8007a68 <xQueueGenericSend+0x6c>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a50:	b672      	cpsid	i
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	b662      	cpsie	i
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d103      	bne.n	8007a76 <xQueueGenericSend+0x7a>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <xQueueGenericSend+0x7e>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <xQueueGenericSend+0x80>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10d      	bne.n	8007a9c <xQueueGenericSend+0xa0>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	b672      	cpsid	i
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	b662      	cpsie	i
 8007a94:	623b      	str	r3, [r7, #32]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a9c:	f001 fc4e 	bl	800933c <xTaskGetSchedulerState>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <xQueueGenericSend+0xb0>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <xQueueGenericSend+0xb4>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <xQueueGenericSend+0xb6>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10d      	bne.n	8007ad2 <xQueueGenericSend+0xd6>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	b672      	cpsid	i
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	b662      	cpsie	i
 8007aca:	61fb      	str	r3, [r7, #28]
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	e7fd      	b.n	8007ace <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ad2:	f001 ff83 	bl	80099dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d302      	bcc.n	8007ae8 <xQueueGenericSend+0xec>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d129      	bne.n	8007b3c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aee:	f000 fc6b 	bl	80083c8 <prvCopyDataToQueue>
 8007af2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d010      	beq.n	8007b1e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afe:	3324      	adds	r3, #36	@ 0x24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 fa53 	bl	8008fac <xTaskRemoveFromEventList>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d013      	beq.n	8007b34 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8007c0c <xQueueGenericSend+0x210>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	e00a      	b.n	8007b34 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b24:	4b39      	ldr	r3, [pc, #228]	@ (8007c0c <xQueueGenericSend+0x210>)
 8007b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b34:	f001 ff88 	bl	8009a48 <vPortExitCritical>
				return pdPASS;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e063      	b.n	8007c04 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b42:	f001 ff81 	bl	8009a48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e05c      	b.n	8007c04 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b50:	f107 0314 	add.w	r3, r7, #20
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 fa8f 	bl	8009078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b5e:	f001 ff73 	bl	8009a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b62:	f001 f811 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b66:	f001 ff39 	bl	80099dc <vPortEnterCritical>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d103      	bne.n	8007b80 <xQueueGenericSend+0x184>
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d103      	bne.n	8007b96 <xQueueGenericSend+0x19a>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b96:	f001 ff57 	bl	8009a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b9a:	1d3a      	adds	r2, r7, #4
 8007b9c:	f107 0314 	add.w	r3, r7, #20
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fa7e 	bl	80090a4 <xTaskCheckForTimeOut>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d124      	bne.n	8007bf8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bb0:	f000 fd02 	bl	80085b8 <prvIsQueueFull>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d018      	beq.n	8007bec <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f9ca 	bl	8008f5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bca:	f000 fc8d 	bl	80084e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bce:	f000 ffe9 	bl	8008ba4 <xTaskResumeAll>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f af7c 	bne.w	8007ad2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007bda:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <xQueueGenericSend+0x210>)
 8007bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	e772      	b.n	8007ad2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bee:	f000 fc7b 	bl	80084e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bf2:	f000 ffd7 	bl	8008ba4 <xTaskResumeAll>
 8007bf6:	e76c      	b.n	8007ad2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007bfa:	f000 fc75 	bl	80084e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bfe:	f000 ffd1 	bl	8008ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3738      	adds	r7, #56	@ 0x38
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	e000ed04 	.word	0xe000ed04

08007c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08e      	sub	sp, #56	@ 0x38
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10d      	bne.n	8007c44 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2c:	b672      	cpsid	i
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	b662      	cpsie	i
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c3e:	bf00      	nop
 8007c40:	bf00      	nop
 8007c42:	e7fd      	b.n	8007c40 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <xQueueGenericSendFromISR+0x42>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <xQueueGenericSendFromISR+0x46>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <xQueueGenericSendFromISR+0x48>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10d      	bne.n	8007c78 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c60:	b672      	cpsid	i
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	b662      	cpsie	i
 8007c70:	623b      	str	r3, [r7, #32]
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	e7fd      	b.n	8007c74 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d103      	bne.n	8007c86 <xQueueGenericSendFromISR+0x76>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <xQueueGenericSendFromISR+0x7a>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <xQueueGenericSendFromISR+0x7c>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10d      	bne.n	8007cac <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	61fb      	str	r3, [r7, #28]
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cac:	f001 ff7e 	bl	8009bac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007cb0:	f3ef 8211 	mrs	r2, BASEPRI
 8007cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb8:	b672      	cpsid	i
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	b662      	cpsie	i
 8007cc8:	61ba      	str	r2, [r7, #24]
 8007cca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ccc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d302      	bcc.n	8007ce2 <xQueueGenericSendFromISR+0xd2>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d12c      	bne.n	8007d3c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cf2:	f000 fb69 	bl	80083c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d112      	bne.n	8007d26 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d016      	beq.n	8007d36 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0a:	3324      	adds	r3, #36	@ 0x24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 f94d 	bl	8008fac <xTaskRemoveFromEventList>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00b      	beq.n	8007d36 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e007      	b.n	8007d36 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	b25a      	sxtb	r2, r3
 8007d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d36:	2301      	movs	r3, #1
 8007d38:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007d3a:	e001      	b.n	8007d40 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3738      	adds	r7, #56	@ 0x38
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b08e      	sub	sp, #56	@ 0x38
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <xQueueGiveFromISR+0x30>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6e:	b672      	cpsid	i
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	b662      	cpsie	i
 8007d7e:	623b      	str	r3, [r7, #32]
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	e7fd      	b.n	8007d82 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00d      	beq.n	8007daa <xQueueGiveFromISR+0x54>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	b672      	cpsid	i
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	b662      	cpsie	i
 8007da2:	61fb      	str	r3, [r7, #28]
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop
 8007da8:	e7fd      	b.n	8007da6 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d103      	bne.n	8007dba <xQueueGiveFromISR+0x64>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <xQueueGiveFromISR+0x68>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <xQueueGiveFromISR+0x6a>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10d      	bne.n	8007de0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	b672      	cpsid	i
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	b662      	cpsie	i
 8007dd8:	61bb      	str	r3, [r7, #24]
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	e7fd      	b.n	8007ddc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007de0:	f001 fee4 	bl	8009bac <vPortValidateInterruptPriority>
	__asm volatile
 8007de4:	f3ef 8211 	mrs	r2, BASEPRI
 8007de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dec:	b672      	cpsid	i
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	b662      	cpsie	i
 8007dfc:	617a      	str	r2, [r7, #20]
 8007dfe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007e00:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e08:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d22b      	bcs.n	8007e6c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d112      	bne.n	8007e56 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d016      	beq.n	8007e66 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	3324      	adds	r3, #36	@ 0x24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 f8b5 	bl	8008fac <xTaskRemoveFromEventList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00e      	beq.n	8007e66 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00b      	beq.n	8007e66 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2201      	movs	r2, #1
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e007      	b.n	8007e66 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	b25a      	sxtb	r2, r3
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e66:	2301      	movs	r3, #1
 8007e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6a:	e001      	b.n	8007e70 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e72:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f383 8811 	msr	BASEPRI, r3
}
 8007e7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3738      	adds	r7, #56	@ 0x38
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08c      	sub	sp, #48	@ 0x30
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10d      	bne.n	8007ebe <xQueueReceive+0x36>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	b672      	cpsid	i
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	b662      	cpsie	i
 8007eb6:	623b      	str	r3, [r7, #32]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d103      	bne.n	8007ecc <xQueueReceive+0x44>
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <xQueueReceive+0x48>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e000      	b.n	8007ed2 <xQueueReceive+0x4a>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10d      	bne.n	8007ef2 <xQueueReceive+0x6a>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	b672      	cpsid	i
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	b662      	cpsie	i
 8007eea:	61fb      	str	r3, [r7, #28]
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	e7fd      	b.n	8007eee <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef2:	f001 fa23 	bl	800933c <xTaskGetSchedulerState>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <xQueueReceive+0x7a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <xQueueReceive+0x7e>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <xQueueReceive+0x80>
 8007f06:	2300      	movs	r3, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10d      	bne.n	8007f28 <xQueueReceive+0xa0>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	61bb      	str	r3, [r7, #24]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f28:	f001 fd58 	bl	80099dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01f      	beq.n	8007f78 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f3c:	f000 faae 	bl	800849c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	1e5a      	subs	r2, r3, #1
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00f      	beq.n	8007f70 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f52:	3310      	adds	r3, #16
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 f829 	bl	8008fac <xTaskRemoveFromEventList>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d007      	beq.n	8007f70 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f60:	4b3c      	ldr	r3, [pc, #240]	@ (8008054 <xQueueReceive+0x1cc>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f70:	f001 fd6a 	bl	8009a48 <vPortExitCritical>
				return pdPASS;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e069      	b.n	800804c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f7e:	f001 fd63 	bl	8009a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e062      	b.n	800804c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f8c:	f107 0310 	add.w	r3, r7, #16
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 f871 	bl	8009078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f9a:	f001 fd55 	bl	8009a48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f9e:	f000 fdf3 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fa2:	f001 fd1b 	bl	80099dc <vPortEnterCritical>
 8007fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb2:	d103      	bne.n	8007fbc <xQueueReceive+0x134>
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d103      	bne.n	8007fd2 <xQueueReceive+0x14a>
 8007fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fd2:	f001 fd39 	bl	8009a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fd6:	1d3a      	adds	r2, r7, #4
 8007fd8:	f107 0310 	add.w	r3, r7, #16
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 f860 	bl	80090a4 <xTaskCheckForTimeOut>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d123      	bne.n	8008032 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fec:	f000 face 	bl	800858c <prvIsQueueEmpty>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d017      	beq.n	8008026 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	3324      	adds	r3, #36	@ 0x24
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ffac 	bl	8008f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008006:	f000 fa6f 	bl	80084e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800800a:	f000 fdcb 	bl	8008ba4 <xTaskResumeAll>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d189      	bne.n	8007f28 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008014:	4b0f      	ldr	r3, [pc, #60]	@ (8008054 <xQueueReceive+0x1cc>)
 8008016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	e780      	b.n	8007f28 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008028:	f000 fa5e 	bl	80084e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800802c:	f000 fdba 	bl	8008ba4 <xTaskResumeAll>
 8008030:	e77a      	b.n	8007f28 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008034:	f000 fa58 	bl	80084e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008038:	f000 fdb4 	bl	8008ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800803c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800803e:	f000 faa5 	bl	800858c <prvIsQueueEmpty>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	f43f af6f 	beq.w	8007f28 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800804a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800804c:	4618      	mov	r0, r3
 800804e:	3730      	adds	r7, #48	@ 0x30
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08e      	sub	sp, #56	@ 0x38
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008062:	2300      	movs	r3, #0
 8008064:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800806a:	2300      	movs	r3, #0
 800806c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10d      	bne.n	8008090 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008078:	b672      	cpsid	i
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	b662      	cpsie	i
 8008088:	623b      	str	r3, [r7, #32]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	b672      	cpsid	i
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	b662      	cpsie	i
 80080ac:	61fb      	str	r3, [r7, #28]
}
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
 80080b2:	e7fd      	b.n	80080b0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080b4:	f001 f942 	bl	800933c <xTaskGetSchedulerState>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <xQueueSemaphoreTake+0x6c>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <xQueueSemaphoreTake+0x70>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <xQueueSemaphoreTake+0x72>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10d      	bne.n	80080ea <xQueueSemaphoreTake+0x92>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	b672      	cpsid	i
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	b662      	cpsie	i
 80080e2:	61bb      	str	r3, [r7, #24]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ea:	f001 fc77 	bl	80099dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d024      	beq.n	8008144 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008100:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d104      	bne.n	8008114 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800810a:	f001 fae1 	bl	80096d0 <pvTaskIncrementMutexHeldCount>
 800810e:	4602      	mov	r2, r0
 8008110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008112:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00f      	beq.n	800813c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800811c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811e:	3310      	adds	r3, #16
 8008120:	4618      	mov	r0, r3
 8008122:	f000 ff43 	bl	8008fac <xTaskRemoveFromEventList>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800812c:	4b55      	ldr	r3, [pc, #340]	@ (8008284 <xQueueSemaphoreTake+0x22c>)
 800812e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800813c:	f001 fc84 	bl	8009a48 <vPortExitCritical>
				return pdPASS;
 8008140:	2301      	movs	r3, #1
 8008142:	e09a      	b.n	800827a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d114      	bne.n	8008174 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00d      	beq.n	800816c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	b672      	cpsid	i
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	b662      	cpsie	i
 8008164:	617b      	str	r3, [r7, #20]
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800816c:	f001 fc6c 	bl	8009a48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008170:	2300      	movs	r3, #0
 8008172:	e082      	b.n	800827a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800817a:	f107 030c 	add.w	r3, r7, #12
 800817e:	4618      	mov	r0, r3
 8008180:	f000 ff7a 	bl	8009078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008188:	f001 fc5e 	bl	8009a48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800818c:	f000 fcfc 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008190:	f001 fc24 	bl	80099dc <vPortEnterCritical>
 8008194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008196:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800819a:	b25b      	sxtb	r3, r3
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d103      	bne.n	80081aa <xQueueSemaphoreTake+0x152>
 80081a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d103      	bne.n	80081c0 <xQueueSemaphoreTake+0x168>
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081c0:	f001 fc42 	bl	8009a48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081c4:	463a      	mov	r2, r7
 80081c6:	f107 030c 	add.w	r3, r7, #12
 80081ca:	4611      	mov	r1, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 ff69 	bl	80090a4 <xTaskCheckForTimeOut>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d132      	bne.n	800823e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80081da:	f000 f9d7 	bl	800858c <prvIsQueueEmpty>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d026      	beq.n	8008232 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80081ec:	f001 fbf6 	bl	80099dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 f8bf 	bl	8009378 <xTaskPriorityInherit>
 80081fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80081fc:	f001 fc24 	bl	8009a48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008202:	3324      	adds	r3, #36	@ 0x24
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fea7 	bl	8008f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800820e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008210:	f000 f96a 	bl	80084e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008214:	f000 fcc6 	bl	8008ba4 <xTaskResumeAll>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	f47f af65 	bne.w	80080ea <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008220:	4b18      	ldr	r3, [pc, #96]	@ (8008284 <xQueueSemaphoreTake+0x22c>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	e75b      	b.n	80080ea <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008232:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008234:	f000 f958 	bl	80084e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008238:	f000 fcb4 	bl	8008ba4 <xTaskResumeAll>
 800823c:	e755      	b.n	80080ea <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800823e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008240:	f000 f952 	bl	80084e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008244:	f000 fcae 	bl	8008ba4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008248:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800824a:	f000 f99f 	bl	800858c <prvIsQueueEmpty>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	f43f af4a 	beq.w	80080ea <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00d      	beq.n	8008278 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800825c:	f001 fbbe 	bl	80099dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008260:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008262:	f000 f899 	bl	8008398 <prvGetDisinheritPriorityAfterTimeout>
 8008266:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800826e:	4618      	mov	r0, r3
 8008270:	f001 f98e 	bl	8009590 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008274:	f001 fbe8 	bl	8009a48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800827a:	4618      	mov	r0, r3
 800827c:	3738      	adds	r7, #56	@ 0x38
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	@ 0x38
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10d      	bne.n	80082ba <xQueueReceiveFromISR+0x32>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	b672      	cpsid	i
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	b662      	cpsie	i
 80082b2:	623b      	str	r3, [r7, #32]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <xQueueReceiveFromISR+0x40>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <xQueueReceiveFromISR+0x44>
 80082c8:	2301      	movs	r3, #1
 80082ca:	e000      	b.n	80082ce <xQueueReceiveFromISR+0x46>
 80082cc:	2300      	movs	r3, #0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10d      	bne.n	80082ee <xQueueReceiveFromISR+0x66>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d6:	b672      	cpsid	i
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	b662      	cpsie	i
 80082e6:	61fb      	str	r3, [r7, #28]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082ee:	f001 fc5d 	bl	8009bac <vPortValidateInterruptPriority>
	__asm volatile
 80082f2:	f3ef 8211 	mrs	r2, BASEPRI
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	b672      	cpsid	i
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	b662      	cpsie	i
 800830a:	61ba      	str	r2, [r7, #24]
 800830c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800830e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008310:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831a:	2b00      	cmp	r3, #0
 800831c:	d02f      	beq.n	800837e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800832c:	f000 f8b6 	bl	800849c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008332:	1e5a      	subs	r2, r3, #1
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008338:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d112      	bne.n	8008368 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d016      	beq.n	8008378 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	3310      	adds	r3, #16
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fe2c 	bl	8008fac <xTaskRemoveFromEventList>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00e      	beq.n	8008378 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e007      	b.n	8008378 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800836c:	3301      	adds	r3, #1
 800836e:	b2db      	uxtb	r3, r3
 8008370:	b25a      	sxtb	r2, r3
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008378:	2301      	movs	r3, #1
 800837a:	637b      	str	r3, [r7, #52]	@ 0x34
 800837c:	e001      	b.n	8008382 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800837e:	2300      	movs	r3, #0
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f383 8811 	msr	BASEPRI, r3
}
 800838c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800838e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008390:	4618      	mov	r0, r3
 8008392:	3738      	adds	r7, #56	@ 0x38
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d006      	beq.n	80083b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f1c3 0307 	rsb	r3, r3, #7
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e001      	b.n	80083ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083ba:	68fb      	ldr	r3, [r7, #12]
	}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d14d      	bne.n	800848a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 f840 	bl	8009478 <xTaskPriorityDisinherit>
 80083f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	e043      	b.n	800848a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d119      	bne.n	800843c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6858      	ldr	r0, [r3, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008410:	461a      	mov	r2, r3
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	f00c fbb9 	bl	8014b8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	429a      	cmp	r2, r3
 8008430:	d32b      	bcc.n	800848a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	e026      	b.n	800848a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68d8      	ldr	r0, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	461a      	mov	r2, r3
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	f00c fb9f 	bl	8014b8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008454:	425b      	negs	r3, r3
 8008456:	441a      	add	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d207      	bcs.n	8008478 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008470:	425b      	negs	r3, r3
 8008472:	441a      	add	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d105      	bne.n	800848a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3b01      	subs	r3, #1
 8008488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008492:	697b      	ldr	r3, [r7, #20]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d018      	beq.n	80084e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	441a      	add	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d303      	bcc.n	80084d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68d9      	ldr	r1, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	461a      	mov	r2, r3
 80084da:	6838      	ldr	r0, [r7, #0]
 80084dc:	f00c fb55 	bl	8014b8a <memcpy>
	}
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084f0:	f001 fa74 	bl	80099dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084fc:	e011      	b.n	8008522 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	d012      	beq.n	800852c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	@ 0x24
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fd4e 	bl	8008fac <xTaskRemoveFromEventList>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008516:	f000 fe2d 	bl	8009174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	3b01      	subs	r3, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008526:	2b00      	cmp	r3, #0
 8008528:	dce9      	bgt.n	80084fe <prvUnlockQueue+0x16>
 800852a:	e000      	b.n	800852e <prvUnlockQueue+0x46>
					break;
 800852c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	22ff      	movs	r2, #255	@ 0xff
 8008532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008536:	f001 fa87 	bl	8009a48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800853a:	f001 fa4f 	bl	80099dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008544:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008546:	e011      	b.n	800856c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d012      	beq.n	8008576 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3310      	adds	r3, #16
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fd29 	bl	8008fac <xTaskRemoveFromEventList>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008560:	f000 fe08 	bl	8009174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	3b01      	subs	r3, #1
 8008568:	b2db      	uxtb	r3, r3
 800856a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800856c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dce9      	bgt.n	8008548 <prvUnlockQueue+0x60>
 8008574:	e000      	b.n	8008578 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008576:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	22ff      	movs	r2, #255	@ 0xff
 800857c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008580:	f001 fa62 	bl	8009a48 <vPortExitCritical>
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008594:	f001 fa22 	bl	80099dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e001      	b.n	80085aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085aa:	f001 fa4d 	bl	8009a48 <vPortExitCritical>

	return xReturn;
 80085ae:	68fb      	ldr	r3, [r7, #12]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c0:	f001 fa0c 	bl	80099dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d102      	bne.n	80085d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e001      	b.n	80085da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085da:	f001 fa35 	bl	8009a48 <vPortExitCritical>

	return xReturn;
 80085de:	68fb      	ldr	r3, [r7, #12]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08e      	sub	sp, #56	@ 0x38
 80085ec:	af04      	add	r7, sp, #16
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10d      	bne.n	8008618 <xTaskCreateStatic+0x30>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	b672      	cpsid	i
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	b662      	cpsie	i
 8008610:	623b      	str	r3, [r7, #32]
}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	e7fd      	b.n	8008614 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10d      	bne.n	800863a <xTaskCreateStatic+0x52>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	b672      	cpsid	i
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	b662      	cpsie	i
 8008632:	61fb      	str	r3, [r7, #28]
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop
 8008638:	e7fd      	b.n	8008636 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800863a:	2354      	movs	r3, #84	@ 0x54
 800863c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	2b54      	cmp	r3, #84	@ 0x54
 8008642:	d00d      	beq.n	8008660 <xTaskCreateStatic+0x78>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	b672      	cpsid	i
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	b662      	cpsie	i
 8008658:	61bb      	str	r3, [r7, #24]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008660:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01e      	beq.n	80086a6 <xTaskCreateStatic+0xbe>
 8008668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01b      	beq.n	80086a6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800866e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008670:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008676:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867a:	2202      	movs	r2, #2
 800867c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008680:	2300      	movs	r3, #0
 8008682:	9303      	str	r3, [sp, #12]
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	9302      	str	r3, [sp, #8]
 8008688:	f107 0314 	add.w	r3, r7, #20
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f850 	bl	800873e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800869e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086a0:	f000 f8d8 	bl	8008854 <prvAddNewTaskToReadyList>
 80086a4:	e001      	b.n	80086aa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086aa:	697b      	ldr	r3, [r7, #20]
	}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3728      	adds	r7, #40	@ 0x28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08c      	sub	sp, #48	@ 0x30
 80086b8:	af04      	add	r7, sp, #16
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4613      	mov	r3, r2
 80086c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 fab5 	bl	8009c38 <pvPortMalloc>
 80086ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00e      	beq.n	80086f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086d6:	2054      	movs	r0, #84	@ 0x54
 80086d8:	f001 faae 	bl	8009c38 <pvPortMalloc>
 80086dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80086ea:	e005      	b.n	80086f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086ec:	6978      	ldr	r0, [r7, #20]
 80086ee:	f001 fb71 	bl	8009dd4 <vPortFree>
 80086f2:	e001      	b.n	80086f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d017      	beq.n	800872e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008706:	88fa      	ldrh	r2, [r7, #6]
 8008708:	2300      	movs	r3, #0
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f80e 	bl	800873e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008722:	69f8      	ldr	r0, [r7, #28]
 8008724:	f000 f896 	bl	8008854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008728:	2301      	movs	r3, #1
 800872a:	61bb      	str	r3, [r7, #24]
 800872c:	e002      	b.n	8008734 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800872e:	f04f 33ff 	mov.w	r3, #4294967295
 8008732:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008734:	69bb      	ldr	r3, [r7, #24]
	}
 8008736:	4618      	mov	r0, r3
 8008738:	3720      	adds	r7, #32
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b088      	sub	sp, #32
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008756:	440b      	add	r3, r1
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f023 0307 	bic.w	r3, r3, #7
 8008764:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00d      	beq.n	800878c <prvInitialiseNewTask+0x4e>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	b672      	cpsid	i
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	b662      	cpsie	i
 8008784:	617b      	str	r3, [r7, #20]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01f      	beq.n	80087d2 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e012      	b.n	80087be <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	4413      	add	r3, r2
 800879e:	7819      	ldrb	r1, [r3, #0]
 80087a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	3334      	adds	r3, #52	@ 0x34
 80087a8:	460a      	mov	r2, r1
 80087aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d006      	beq.n	80087c6 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	3301      	adds	r3, #1
 80087bc:	61fb      	str	r3, [r7, #28]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	2b0f      	cmp	r3, #15
 80087c2:	d9e9      	bls.n	8008798 <prvInitialiseNewTask+0x5a>
 80087c4:	e000      	b.n	80087c8 <prvInitialiseNewTask+0x8a>
			{
				break;
 80087c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087d0:	e003      	b.n	80087da <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	2b06      	cmp	r3, #6
 80087de:	d901      	bls.n	80087e4 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087e0:	2306      	movs	r3, #6
 80087e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087ee:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	2200      	movs	r2, #0
 80087f4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	3304      	adds	r3, #4
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fec8 	bl	8007590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	3318      	adds	r3, #24
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe fec3 	bl	8007590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800880e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	f1c3 0207 	rsb	r2, r3, #7
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	2200      	movs	r2, #0
 8008824:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	68f9      	ldr	r1, [r7, #12]
 8008832:	69b8      	ldr	r0, [r7, #24]
 8008834:	f000 ffc6 	bl	80097c4 <pxPortInitialiseStack>
 8008838:	4602      	mov	r2, r0
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800883e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800884a:	bf00      	nop
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800885c:	f001 f8be 	bl	80099dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008860:	4b2a      	ldr	r3, [pc, #168]	@ (800890c <prvAddNewTaskToReadyList+0xb8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	4a29      	ldr	r2, [pc, #164]	@ (800890c <prvAddNewTaskToReadyList+0xb8>)
 8008868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800886a:	4b29      	ldr	r3, [pc, #164]	@ (8008910 <prvAddNewTaskToReadyList+0xbc>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008872:	4a27      	ldr	r2, [pc, #156]	@ (8008910 <prvAddNewTaskToReadyList+0xbc>)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008878:	4b24      	ldr	r3, [pc, #144]	@ (800890c <prvAddNewTaskToReadyList+0xb8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d110      	bne.n	80088a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008880:	f000 fc9c 	bl	80091bc <prvInitialiseTaskLists>
 8008884:	e00d      	b.n	80088a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008886:	4b23      	ldr	r3, [pc, #140]	@ (8008914 <prvAddNewTaskToReadyList+0xc0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800888e:	4b20      	ldr	r3, [pc, #128]	@ (8008910 <prvAddNewTaskToReadyList+0xbc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	429a      	cmp	r2, r3
 800889a:	d802      	bhi.n	80088a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800889c:	4a1c      	ldr	r2, [pc, #112]	@ (8008910 <prvAddNewTaskToReadyList+0xbc>)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008918 <prvAddNewTaskToReadyList+0xc4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3301      	adds	r3, #1
 80088a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008918 <prvAddNewTaskToReadyList+0xc4>)
 80088aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b0:	2201      	movs	r2, #1
 80088b2:	409a      	lsls	r2, r3
 80088b4:	4b19      	ldr	r3, [pc, #100]	@ (800891c <prvAddNewTaskToReadyList+0xc8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	4a18      	ldr	r2, [pc, #96]	@ (800891c <prvAddNewTaskToReadyList+0xc8>)
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4a15      	ldr	r2, [pc, #84]	@ (8008920 <prvAddNewTaskToReadyList+0xcc>)
 80088cc:	441a      	add	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3304      	adds	r3, #4
 80088d2:	4619      	mov	r1, r3
 80088d4:	4610      	mov	r0, r2
 80088d6:	f7fe fe68 	bl	80075aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088da:	f001 f8b5 	bl	8009a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088de:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <prvAddNewTaskToReadyList+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00e      	beq.n	8008904 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <prvAddNewTaskToReadyList+0xbc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d207      	bcs.n	8008904 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <prvAddNewTaskToReadyList+0xd0>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20006434 	.word	0x20006434
 8008910:	20006334 	.word	0x20006334
 8008914:	20006440 	.word	0x20006440
 8008918:	20006450 	.word	0x20006450
 800891c:	2000643c 	.word	0x2000643c
 8008920:	20006338 	.word	0x20006338
 8008924:	e000ed04 	.word	0xe000ed04

08008928 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008930:	f001 f854 	bl	80099dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <vTaskDelete+0x18>
 800893a:	4b3a      	ldr	r3, [pc, #232]	@ (8008a24 <vTaskDelete+0xfc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	e000      	b.n	8008942 <vTaskDelete+0x1a>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3304      	adds	r3, #4
 8008948:	4618      	mov	r0, r3
 800894a:	f7fe fe8b 	bl	8007664 <uxListRemove>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d115      	bne.n	8008980 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008958:	4933      	ldr	r1, [pc, #204]	@ (8008a28 <vTaskDelete+0x100>)
 800895a:	4613      	mov	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	440b      	add	r3, r1
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <vTaskDelete+0x58>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896e:	2201      	movs	r2, #1
 8008970:	fa02 f303 	lsl.w	r3, r2, r3
 8008974:	43da      	mvns	r2, r3
 8008976:	4b2d      	ldr	r3, [pc, #180]	@ (8008a2c <vTaskDelete+0x104>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4013      	ands	r3, r2
 800897c:	4a2b      	ldr	r2, [pc, #172]	@ (8008a2c <vTaskDelete+0x104>)
 800897e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	2b00      	cmp	r3, #0
 8008986:	d004      	beq.n	8008992 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3318      	adds	r3, #24
 800898c:	4618      	mov	r0, r3
 800898e:	f7fe fe69 	bl	8007664 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008992:	4b27      	ldr	r3, [pc, #156]	@ (8008a30 <vTaskDelete+0x108>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3301      	adds	r3, #1
 8008998:	4a25      	ldr	r2, [pc, #148]	@ (8008a30 <vTaskDelete+0x108>)
 800899a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800899c:	4b21      	ldr	r3, [pc, #132]	@ (8008a24 <vTaskDelete+0xfc>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d10b      	bne.n	80089be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4619      	mov	r1, r3
 80089ac:	4821      	ldr	r0, [pc, #132]	@ (8008a34 <vTaskDelete+0x10c>)
 80089ae:	f7fe fdfc 	bl	80075aa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80089b2:	4b21      	ldr	r3, [pc, #132]	@ (8008a38 <vTaskDelete+0x110>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3301      	adds	r3, #1
 80089b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008a38 <vTaskDelete+0x110>)
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	e009      	b.n	80089d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80089be:	4b1f      	ldr	r3, [pc, #124]	@ (8008a3c <vTaskDelete+0x114>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a3c <vTaskDelete+0x114>)
 80089c6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fc65 	bl	8009298 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80089ce:	f000 fc95 	bl	80092fc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80089d2:	f001 f839 	bl	8009a48 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80089d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a40 <vTaskDelete+0x118>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d01e      	beq.n	8008a1c <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 80089de:	4b11      	ldr	r3, [pc, #68]	@ (8008a24 <vTaskDelete+0xfc>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d119      	bne.n	8008a1c <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80089e8:	4b16      	ldr	r3, [pc, #88]	@ (8008a44 <vTaskDelete+0x11c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00d      	beq.n	8008a0c <vTaskDelete+0xe4>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	b672      	cpsid	i
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	b662      	cpsie	i
 8008a04:	60bb      	str	r3, [r7, #8]
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	e7fd      	b.n	8008a08 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8008a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a48 <vTaskDelete+0x120>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20006334 	.word	0x20006334
 8008a28:	20006338 	.word	0x20006338
 8008a2c:	2000643c 	.word	0x2000643c
 8008a30:	20006450 	.word	0x20006450
 8008a34:	20006408 	.word	0x20006408
 8008a38:	2000641c 	.word	0x2000641c
 8008a3c:	20006434 	.word	0x20006434
 8008a40:	20006440 	.word	0x20006440
 8008a44:	2000645c 	.word	0x2000645c
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01a      	beq.n	8008a94 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a5e:	4b15      	ldr	r3, [pc, #84]	@ (8008ab4 <vTaskDelay+0x68>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00d      	beq.n	8008a82 <vTaskDelay+0x36>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	b672      	cpsid	i
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	b662      	cpsie	i
 8008a7a:	60bb      	str	r3, [r7, #8]
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	e7fd      	b.n	8008a7e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a82:	f000 f881 	bl	8008b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a86:	2100      	movs	r1, #0
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fe35 	bl	80096f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a8e:	f000 f889 	bl	8008ba4 <xTaskResumeAll>
 8008a92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d107      	bne.n	8008aaa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008a9a:	4b07      	ldr	r3, [pc, #28]	@ (8008ab8 <vTaskDelay+0x6c>)
 8008a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	2000645c 	.word	0x2000645c
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08a      	sub	sp, #40	@ 0x28
 8008ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008aca:	463a      	mov	r2, r7
 8008acc:	1d39      	adds	r1, r7, #4
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f7 fd64 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	9202      	str	r2, [sp, #8]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	460a      	mov	r2, r1
 8008aea:	4921      	ldr	r1, [pc, #132]	@ (8008b70 <vTaskStartScheduler+0xb4>)
 8008aec:	4821      	ldr	r0, [pc, #132]	@ (8008b74 <vTaskStartScheduler+0xb8>)
 8008aee:	f7ff fd7b 	bl	80085e8 <xTaskCreateStatic>
 8008af2:	4603      	mov	r3, r0
 8008af4:	4a20      	ldr	r2, [pc, #128]	@ (8008b78 <vTaskStartScheduler+0xbc>)
 8008af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008af8:	4b1f      	ldr	r3, [pc, #124]	@ (8008b78 <vTaskStartScheduler+0xbc>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e001      	b.n	8008b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d118      	bne.n	8008b42 <vTaskStartScheduler+0x86>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	b672      	cpsid	i
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	b662      	cpsie	i
 8008b24:	613b      	str	r3, [r7, #16]
}
 8008b26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b28:	4b14      	ldr	r3, [pc, #80]	@ (8008b7c <vTaskStartScheduler+0xc0>)
 8008b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b30:	4b13      	ldr	r3, [pc, #76]	@ (8008b80 <vTaskStartScheduler+0xc4>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b36:	4b13      	ldr	r3, [pc, #76]	@ (8008b84 <vTaskStartScheduler+0xc8>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b3c:	f000 fed0 	bl	80098e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b40:	e011      	b.n	8008b66 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b48:	d10d      	bne.n	8008b66 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	b672      	cpsid	i
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	b662      	cpsie	i
 8008b5e:	60fb      	str	r3, [r7, #12]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <vTaskStartScheduler+0xa6>
}
 8008b66:	bf00      	nop
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	08015954 	.word	0x08015954
 8008b74:	0800918d 	.word	0x0800918d
 8008b78:	20006458 	.word	0x20006458
 8008b7c:	20006454 	.word	0x20006454
 8008b80:	20006440 	.word	0x20006440
 8008b84:	20006438 	.word	0x20006438

08008b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b8c:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <vTaskSuspendAll+0x18>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	4a03      	ldr	r2, [pc, #12]	@ (8008ba0 <vTaskSuspendAll+0x18>)
 8008b94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b96:	bf00      	nop
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	2000645c 	.word	0x2000645c

08008ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bb2:	4b43      	ldr	r3, [pc, #268]	@ (8008cc0 <xTaskResumeAll+0x11c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10d      	bne.n	8008bd6 <xTaskResumeAll+0x32>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbe:	b672      	cpsid	i
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	b662      	cpsie	i
 8008bce:	603b      	str	r3, [r7, #0]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bd6:	f000 ff01 	bl	80099dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bda:	4b39      	ldr	r3, [pc, #228]	@ (8008cc0 <xTaskResumeAll+0x11c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	4a37      	ldr	r2, [pc, #220]	@ (8008cc0 <xTaskResumeAll+0x11c>)
 8008be2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be4:	4b36      	ldr	r3, [pc, #216]	@ (8008cc0 <xTaskResumeAll+0x11c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d161      	bne.n	8008cb0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bec:	4b35      	ldr	r3, [pc, #212]	@ (8008cc4 <xTaskResumeAll+0x120>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d05d      	beq.n	8008cb0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bf4:	e02e      	b.n	8008c54 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf6:	4b34      	ldr	r3, [pc, #208]	@ (8008cc8 <xTaskResumeAll+0x124>)
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3318      	adds	r3, #24
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fd2e 	bl	8007664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe fd29 	bl	8007664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c16:	2201      	movs	r2, #1
 8008c18:	409a      	lsls	r2, r3
 8008c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8008ccc <xTaskResumeAll+0x128>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	4a2a      	ldr	r2, [pc, #168]	@ (8008ccc <xTaskResumeAll+0x128>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4a27      	ldr	r2, [pc, #156]	@ (8008cd0 <xTaskResumeAll+0x12c>)
 8008c32:	441a      	add	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7fe fcb5 	bl	80075aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c44:	4b23      	ldr	r3, [pc, #140]	@ (8008cd4 <xTaskResumeAll+0x130>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d302      	bcc.n	8008c54 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008c4e:	4b22      	ldr	r3, [pc, #136]	@ (8008cd8 <xTaskResumeAll+0x134>)
 8008c50:	2201      	movs	r2, #1
 8008c52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c54:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc8 <xTaskResumeAll+0x124>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1cc      	bne.n	8008bf6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c62:	f000 fb4b 	bl	80092fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c66:	4b1d      	ldr	r3, [pc, #116]	@ (8008cdc <xTaskResumeAll+0x138>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d010      	beq.n	8008c94 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c72:	f000 f859 	bl	8008d28 <xTaskIncrementTick>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008c7c:	4b16      	ldr	r3, [pc, #88]	@ (8008cd8 <xTaskResumeAll+0x134>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f1      	bne.n	8008c72 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008c8e:	4b13      	ldr	r3, [pc, #76]	@ (8008cdc <xTaskResumeAll+0x138>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c94:	4b10      	ldr	r3, [pc, #64]	@ (8008cd8 <xTaskResumeAll+0x134>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce0 <xTaskResumeAll+0x13c>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cb0:	f000 feca 	bl	8009a48 <vPortExitCritical>

	return xAlreadyYielded;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	2000645c 	.word	0x2000645c
 8008cc4:	20006434 	.word	0x20006434
 8008cc8:	200063f4 	.word	0x200063f4
 8008ccc:	2000643c 	.word	0x2000643c
 8008cd0:	20006338 	.word	0x20006338
 8008cd4:	20006334 	.word	0x20006334
 8008cd8:	20006448 	.word	0x20006448
 8008cdc:	20006444 	.word	0x20006444
 8008ce0:	e000ed04 	.word	0xe000ed04

08008ce4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cea:	4b05      	ldr	r3, [pc, #20]	@ (8008d00 <xTaskGetTickCount+0x1c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cf0:	687b      	ldr	r3, [r7, #4]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20006438 	.word	0x20006438

08008d04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d0a:	f000 ff4f 	bl	8009bac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008d0e:	2300      	movs	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008d12:	4b04      	ldr	r3, [pc, #16]	@ (8008d24 <xTaskGetTickCountFromISR+0x20>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d18:	683b      	ldr	r3, [r7, #0]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20006438 	.word	0x20006438

08008d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d32:	4b50      	ldr	r3, [pc, #320]	@ (8008e74 <xTaskIncrementTick+0x14c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 808b 	bne.w	8008e52 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8008e78 <xTaskIncrementTick+0x150>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d44:	4a4c      	ldr	r2, [pc, #304]	@ (8008e78 <xTaskIncrementTick+0x150>)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d123      	bne.n	8008d98 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d50:	4b4a      	ldr	r3, [pc, #296]	@ (8008e7c <xTaskIncrementTick+0x154>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5e:	b672      	cpsid	i
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	b662      	cpsie	i
 8008d6e:	603b      	str	r3, [r7, #0]
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	e7fd      	b.n	8008d72 <xTaskIncrementTick+0x4a>
 8008d76:	4b41      	ldr	r3, [pc, #260]	@ (8008e7c <xTaskIncrementTick+0x154>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	4b40      	ldr	r3, [pc, #256]	@ (8008e80 <xTaskIncrementTick+0x158>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a3e      	ldr	r2, [pc, #248]	@ (8008e7c <xTaskIncrementTick+0x154>)
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	4a3e      	ldr	r2, [pc, #248]	@ (8008e80 <xTaskIncrementTick+0x158>)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8008e84 <xTaskIncrementTick+0x15c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	4a3c      	ldr	r2, [pc, #240]	@ (8008e84 <xTaskIncrementTick+0x15c>)
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	f000 fab2 	bl	80092fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d98:	4b3b      	ldr	r3, [pc, #236]	@ (8008e88 <xTaskIncrementTick+0x160>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d348      	bcc.n	8008e34 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da2:	4b36      	ldr	r3, [pc, #216]	@ (8008e7c <xTaskIncrementTick+0x154>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d104      	bne.n	8008db6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dac:	4b36      	ldr	r3, [pc, #216]	@ (8008e88 <xTaskIncrementTick+0x160>)
 8008dae:	f04f 32ff 	mov.w	r2, #4294967295
 8008db2:	601a      	str	r2, [r3, #0]
					break;
 8008db4:	e03e      	b.n	8008e34 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db6:	4b31      	ldr	r3, [pc, #196]	@ (8008e7c <xTaskIncrementTick+0x154>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d203      	bcs.n	8008dd6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008dce:	4a2e      	ldr	r2, [pc, #184]	@ (8008e88 <xTaskIncrementTick+0x160>)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dd4:	e02e      	b.n	8008e34 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fc42 	bl	8007664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d004      	beq.n	8008df2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	3318      	adds	r3, #24
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe fc39 	bl	8007664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df6:	2201      	movs	r2, #1
 8008df8:	409a      	lsls	r2, r3
 8008dfa:	4b24      	ldr	r3, [pc, #144]	@ (8008e8c <xTaskIncrementTick+0x164>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	4a22      	ldr	r2, [pc, #136]	@ (8008e8c <xTaskIncrementTick+0x164>)
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4a1f      	ldr	r2, [pc, #124]	@ (8008e90 <xTaskIncrementTick+0x168>)
 8008e12:	441a      	add	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f7fe fbc5 	bl	80075aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e24:	4b1b      	ldr	r3, [pc, #108]	@ (8008e94 <xTaskIncrementTick+0x16c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d3b9      	bcc.n	8008da2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e32:	e7b6      	b.n	8008da2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e34:	4b17      	ldr	r3, [pc, #92]	@ (8008e94 <xTaskIncrementTick+0x16c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3a:	4915      	ldr	r1, [pc, #84]	@ (8008e90 <xTaskIncrementTick+0x168>)
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d907      	bls.n	8008e5c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e004      	b.n	8008e5c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e52:	4b11      	ldr	r3, [pc, #68]	@ (8008e98 <xTaskIncrementTick+0x170>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3301      	adds	r3, #1
 8008e58:	4a0f      	ldr	r2, [pc, #60]	@ (8008e98 <xTaskIncrementTick+0x170>)
 8008e5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e9c <xTaskIncrementTick+0x174>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e68:	697b      	ldr	r3, [r7, #20]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	2000645c 	.word	0x2000645c
 8008e78:	20006438 	.word	0x20006438
 8008e7c:	200063ec 	.word	0x200063ec
 8008e80:	200063f0 	.word	0x200063f0
 8008e84:	2000644c 	.word	0x2000644c
 8008e88:	20006454 	.word	0x20006454
 8008e8c:	2000643c 	.word	0x2000643c
 8008e90:	20006338 	.word	0x20006338
 8008e94:	20006334 	.word	0x20006334
 8008e98:	20006444 	.word	0x20006444
 8008e9c:	20006448 	.word	0x20006448

08008ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ea6:	4b28      	ldr	r3, [pc, #160]	@ (8008f48 <vTaskSwitchContext+0xa8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008eae:	4b27      	ldr	r3, [pc, #156]	@ (8008f4c <vTaskSwitchContext+0xac>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008eb4:	e042      	b.n	8008f3c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008eb6:	4b25      	ldr	r3, [pc, #148]	@ (8008f4c <vTaskSwitchContext+0xac>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ebc:	4b24      	ldr	r3, [pc, #144]	@ (8008f50 <vTaskSwitchContext+0xb0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	fab3 f383 	clz	r3, r3
 8008ec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	f1c3 031f 	rsb	r3, r3, #31
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	4920      	ldr	r1, [pc, #128]	@ (8008f54 <vTaskSwitchContext+0xb4>)
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	440b      	add	r3, r1
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10d      	bne.n	8008f02 <vTaskSwitchContext+0x62>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eea:	b672      	cpsid	i
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	b662      	cpsie	i
 8008efa:	607b      	str	r3, [r7, #4]
}
 8008efc:	bf00      	nop
 8008efe:	bf00      	nop
 8008f00:	e7fd      	b.n	8008efe <vTaskSwitchContext+0x5e>
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4a11      	ldr	r2, [pc, #68]	@ (8008f54 <vTaskSwitchContext+0xb4>)
 8008f0e:	4413      	add	r3, r2
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	605a      	str	r2, [r3, #4]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	3308      	adds	r3, #8
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d104      	bne.n	8008f32 <vTaskSwitchContext+0x92>
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	605a      	str	r2, [r3, #4]
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	4a07      	ldr	r2, [pc, #28]	@ (8008f58 <vTaskSwitchContext+0xb8>)
 8008f3a:	6013      	str	r3, [r2, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	2000645c 	.word	0x2000645c
 8008f4c:	20006448 	.word	0x20006448
 8008f50:	2000643c 	.word	0x2000643c
 8008f54:	20006338 	.word	0x20006338
 8008f58:	20006334 	.word	0x20006334

08008f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10d      	bne.n	8008f88 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f70:	b672      	cpsid	i
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	b662      	cpsie	i
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	e7fd      	b.n	8008f84 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f88:	4b07      	ldr	r3, [pc, #28]	@ (8008fa8 <vTaskPlaceOnEventList+0x4c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3318      	adds	r3, #24
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7fe fb2e 	bl	80075f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f96:	2101      	movs	r1, #1
 8008f98:	6838      	ldr	r0, [r7, #0]
 8008f9a:	f000 fbad 	bl	80096f8 <prvAddCurrentTaskToDelayedList>
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20006334 	.word	0x20006334

08008fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10d      	bne.n	8008fde <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	b672      	cpsid	i
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	b662      	cpsie	i
 8008fd6:	60fb      	str	r3, [r7, #12]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	3318      	adds	r3, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fb3e 	bl	8007664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8009060 <xTaskRemoveFromEventList+0xb4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11c      	bne.n	800902a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fb35 	bl	8007664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	2201      	movs	r2, #1
 8009000:	409a      	lsls	r2, r3
 8009002:	4b18      	ldr	r3, [pc, #96]	@ (8009064 <xTaskRemoveFromEventList+0xb8>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4313      	orrs	r3, r2
 8009008:	4a16      	ldr	r2, [pc, #88]	@ (8009064 <xTaskRemoveFromEventList+0xb8>)
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009010:	4613      	mov	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4a13      	ldr	r2, [pc, #76]	@ (8009068 <xTaskRemoveFromEventList+0xbc>)
 800901a:	441a      	add	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	3304      	adds	r3, #4
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f7fe fac1 	bl	80075aa <vListInsertEnd>
 8009028:	e005      	b.n	8009036 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	3318      	adds	r3, #24
 800902e:	4619      	mov	r1, r3
 8009030:	480e      	ldr	r0, [pc, #56]	@ (800906c <xTaskRemoveFromEventList+0xc0>)
 8009032:	f7fe faba 	bl	80075aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <xTaskRemoveFromEventList+0xc4>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009040:	429a      	cmp	r2, r3
 8009042:	d905      	bls.n	8009050 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009048:	4b0a      	ldr	r3, [pc, #40]	@ (8009074 <xTaskRemoveFromEventList+0xc8>)
 800904a:	2201      	movs	r2, #1
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e001      	b.n	8009054 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009054:	697b      	ldr	r3, [r7, #20]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2000645c 	.word	0x2000645c
 8009064:	2000643c 	.word	0x2000643c
 8009068:	20006338 	.word	0x20006338
 800906c:	200063f4 	.word	0x200063f4
 8009070:	20006334 	.word	0x20006334
 8009074:	20006448 	.word	0x20006448

08009078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009080:	4b06      	ldr	r3, [pc, #24]	@ (800909c <vTaskInternalSetTimeOutState+0x24>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <vTaskInternalSetTimeOutState+0x28>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	605a      	str	r2, [r3, #4]
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	2000644c 	.word	0x2000644c
 80090a0:	20006438 	.word	0x20006438

080090a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10d      	bne.n	80090d0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b8:	b672      	cpsid	i
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	b662      	cpsie	i
 80090c8:	613b      	str	r3, [r7, #16]
}
 80090ca:	bf00      	nop
 80090cc:	bf00      	nop
 80090ce:	e7fd      	b.n	80090cc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10d      	bne.n	80090f2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	b672      	cpsid	i
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	b662      	cpsie	i
 80090ea:	60fb      	str	r3, [r7, #12]
}
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	e7fd      	b.n	80090ee <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80090f2:	f000 fc73 	bl	80099dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090f6:	4b1d      	ldr	r3, [pc, #116]	@ (800916c <xTaskCheckForTimeOut+0xc8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d102      	bne.n	8009116 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	e023      	b.n	800915e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4b15      	ldr	r3, [pc, #84]	@ (8009170 <xTaskCheckForTimeOut+0xcc>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d007      	beq.n	8009132 <xTaskCheckForTimeOut+0x8e>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	429a      	cmp	r2, r3
 800912a:	d302      	bcc.n	8009132 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800912c:	2301      	movs	r3, #1
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e015      	b.n	800915e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	429a      	cmp	r2, r3
 800913a:	d20b      	bcs.n	8009154 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff ff95 	bl	8009078 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	61fb      	str	r3, [r7, #28]
 8009152:	e004      	b.n	800915e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800915e:	f000 fc73 	bl	8009a48 <vPortExitCritical>

	return xReturn;
 8009162:	69fb      	ldr	r3, [r7, #28]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3720      	adds	r7, #32
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20006438 	.word	0x20006438
 8009170:	2000644c 	.word	0x2000644c

08009174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009174:	b480      	push	{r7}
 8009176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009178:	4b03      	ldr	r3, [pc, #12]	@ (8009188 <vTaskMissedYield+0x14>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	20006448 	.word	0x20006448

0800918c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009194:	f000 f852 	bl	800923c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009198:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <prvIdleTask+0x28>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d9f9      	bls.n	8009194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091a0:	4b05      	ldr	r3, [pc, #20]	@ (80091b8 <prvIdleTask+0x2c>)
 80091a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091b0:	e7f0      	b.n	8009194 <prvIdleTask+0x8>
 80091b2:	bf00      	nop
 80091b4:	20006338 	.word	0x20006338
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
 80091c6:	e00c      	b.n	80091e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4a12      	ldr	r2, [pc, #72]	@ (800921c <prvInitialiseTaskLists+0x60>)
 80091d4:	4413      	add	r3, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe f9ba 	bl	8007550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3301      	adds	r3, #1
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b06      	cmp	r3, #6
 80091e6:	d9ef      	bls.n	80091c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091e8:	480d      	ldr	r0, [pc, #52]	@ (8009220 <prvInitialiseTaskLists+0x64>)
 80091ea:	f7fe f9b1 	bl	8007550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091ee:	480d      	ldr	r0, [pc, #52]	@ (8009224 <prvInitialiseTaskLists+0x68>)
 80091f0:	f7fe f9ae 	bl	8007550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091f4:	480c      	ldr	r0, [pc, #48]	@ (8009228 <prvInitialiseTaskLists+0x6c>)
 80091f6:	f7fe f9ab 	bl	8007550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091fa:	480c      	ldr	r0, [pc, #48]	@ (800922c <prvInitialiseTaskLists+0x70>)
 80091fc:	f7fe f9a8 	bl	8007550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009200:	480b      	ldr	r0, [pc, #44]	@ (8009230 <prvInitialiseTaskLists+0x74>)
 8009202:	f7fe f9a5 	bl	8007550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009206:	4b0b      	ldr	r3, [pc, #44]	@ (8009234 <prvInitialiseTaskLists+0x78>)
 8009208:	4a05      	ldr	r2, [pc, #20]	@ (8009220 <prvInitialiseTaskLists+0x64>)
 800920a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800920c:	4b0a      	ldr	r3, [pc, #40]	@ (8009238 <prvInitialiseTaskLists+0x7c>)
 800920e:	4a05      	ldr	r2, [pc, #20]	@ (8009224 <prvInitialiseTaskLists+0x68>)
 8009210:	601a      	str	r2, [r3, #0]
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20006338 	.word	0x20006338
 8009220:	200063c4 	.word	0x200063c4
 8009224:	200063d8 	.word	0x200063d8
 8009228:	200063f4 	.word	0x200063f4
 800922c:	20006408 	.word	0x20006408
 8009230:	20006420 	.word	0x20006420
 8009234:	200063ec 	.word	0x200063ec
 8009238:	200063f0 	.word	0x200063f0

0800923c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009242:	e019      	b.n	8009278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009244:	f000 fbca 	bl	80099dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009248:	4b10      	ldr	r3, [pc, #64]	@ (800928c <prvCheckTasksWaitingTermination+0x50>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3304      	adds	r3, #4
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fa05 	bl	8007664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800925a:	4b0d      	ldr	r3, [pc, #52]	@ (8009290 <prvCheckTasksWaitingTermination+0x54>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3b01      	subs	r3, #1
 8009260:	4a0b      	ldr	r2, [pc, #44]	@ (8009290 <prvCheckTasksWaitingTermination+0x54>)
 8009262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009264:	4b0b      	ldr	r3, [pc, #44]	@ (8009294 <prvCheckTasksWaitingTermination+0x58>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3b01      	subs	r3, #1
 800926a:	4a0a      	ldr	r2, [pc, #40]	@ (8009294 <prvCheckTasksWaitingTermination+0x58>)
 800926c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800926e:	f000 fbeb 	bl	8009a48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f810 	bl	8009298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009278:	4b06      	ldr	r3, [pc, #24]	@ (8009294 <prvCheckTasksWaitingTermination+0x58>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e1      	bne.n	8009244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20006408 	.word	0x20006408
 8009290:	20006434 	.word	0x20006434
 8009294:	2000641c 	.word	0x2000641c

08009298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d108      	bne.n	80092bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fd90 	bl	8009dd4 <vPortFree>
				vPortFree( pxTCB );
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fd8d 	bl	8009dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092ba:	e01b      	b.n	80092f4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d103      	bne.n	80092ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fd84 	bl	8009dd4 <vPortFree>
	}
 80092cc:	e012      	b.n	80092f4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d00d      	beq.n	80092f4 <prvDeleteTCB+0x5c>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092dc:	b672      	cpsid	i
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	b662      	cpsie	i
 80092ec:	60fb      	str	r3, [r7, #12]
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <prvDeleteTCB+0x58>
	}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009302:	4b0c      	ldr	r3, [pc, #48]	@ (8009334 <prvResetNextTaskUnblockTime+0x38>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800930c:	4b0a      	ldr	r3, [pc, #40]	@ (8009338 <prvResetNextTaskUnblockTime+0x3c>)
 800930e:	f04f 32ff 	mov.w	r2, #4294967295
 8009312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009314:	e008      	b.n	8009328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009316:	4b07      	ldr	r3, [pc, #28]	@ (8009334 <prvResetNextTaskUnblockTime+0x38>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	4a04      	ldr	r2, [pc, #16]	@ (8009338 <prvResetNextTaskUnblockTime+0x3c>)
 8009326:	6013      	str	r3, [r2, #0]
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	200063ec 	.word	0x200063ec
 8009338:	20006454 	.word	0x20006454

0800933c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009342:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <xTaskGetSchedulerState+0x34>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800934a:	2301      	movs	r3, #1
 800934c:	607b      	str	r3, [r7, #4]
 800934e:	e008      	b.n	8009362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009350:	4b08      	ldr	r3, [pc, #32]	@ (8009374 <xTaskGetSchedulerState+0x38>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009358:	2302      	movs	r3, #2
 800935a:	607b      	str	r3, [r7, #4]
 800935c:	e001      	b.n	8009362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800935e:	2300      	movs	r3, #0
 8009360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009362:	687b      	ldr	r3, [r7, #4]
	}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	20006440 	.word	0x20006440
 8009374:	2000645c 	.word	0x2000645c

08009378 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d069      	beq.n	8009462 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009392:	4b36      	ldr	r3, [pc, #216]	@ (800946c <xTaskPriorityInherit+0xf4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d259      	bcs.n	8009450 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	db06      	blt.n	80093b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a4:	4b31      	ldr	r3, [pc, #196]	@ (800946c <xTaskPriorityInherit+0xf4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093aa:	f1c3 0207 	rsb	r2, r3, #7
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6959      	ldr	r1, [r3, #20]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4a2b      	ldr	r2, [pc, #172]	@ (8009470 <xTaskPriorityInherit+0xf8>)
 80093c4:	4413      	add	r3, r2
 80093c6:	4299      	cmp	r1, r3
 80093c8:	d13a      	bne.n	8009440 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe f948 	bl	8007664 <uxListRemove>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d115      	bne.n	8009406 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093de:	4924      	ldr	r1, [pc, #144]	@ (8009470 <xTaskPriorityInherit+0xf8>)
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <xTaskPriorityInherit+0x8e>
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f4:	2201      	movs	r2, #1
 80093f6:	fa02 f303 	lsl.w	r3, r2, r3
 80093fa:	43da      	mvns	r2, r3
 80093fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009474 <xTaskPriorityInherit+0xfc>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4013      	ands	r3, r2
 8009402:	4a1c      	ldr	r2, [pc, #112]	@ (8009474 <xTaskPriorityInherit+0xfc>)
 8009404:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009406:	4b19      	ldr	r3, [pc, #100]	@ (800946c <xTaskPriorityInherit+0xf4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	2201      	movs	r2, #1
 8009416:	409a      	lsls	r2, r3
 8009418:	4b16      	ldr	r3, [pc, #88]	@ (8009474 <xTaskPriorityInherit+0xfc>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4313      	orrs	r3, r2
 800941e:	4a15      	ldr	r2, [pc, #84]	@ (8009474 <xTaskPriorityInherit+0xfc>)
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a10      	ldr	r2, [pc, #64]	@ (8009470 <xTaskPriorityInherit+0xf8>)
 8009430:	441a      	add	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7fe f8b6 	bl	80075aa <vListInsertEnd>
 800943e:	e004      	b.n	800944a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009440:	4b0a      	ldr	r3, [pc, #40]	@ (800946c <xTaskPriorityInherit+0xf4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800944a:	2301      	movs	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	e008      	b.n	8009462 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009454:	4b05      	ldr	r3, [pc, #20]	@ (800946c <xTaskPriorityInherit+0xf4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	429a      	cmp	r2, r3
 800945c:	d201      	bcs.n	8009462 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800945e:	2301      	movs	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009462:	68fb      	ldr	r3, [r7, #12]
	}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20006334 	.word	0x20006334
 8009470:	20006338 	.word	0x20006338
 8009474:	2000643c 	.word	0x2000643c

08009478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d074      	beq.n	8009578 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800948e:	4b3d      	ldr	r3, [pc, #244]	@ (8009584 <xTaskPriorityDisinherit+0x10c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	429a      	cmp	r2, r3
 8009496:	d00d      	beq.n	80094b4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949c:	b672      	cpsid	i
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	b662      	cpsie	i
 80094ac:	60fb      	str	r3, [r7, #12]
}
 80094ae:	bf00      	nop
 80094b0:	bf00      	nop
 80094b2:	e7fd      	b.n	80094b0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10d      	bne.n	80094d8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	b672      	cpsid	i
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	b662      	cpsie	i
 80094d0:	60bb      	str	r3, [r7, #8]
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	e7fd      	b.n	80094d4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094dc:	1e5a      	subs	r2, r3, #1
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d044      	beq.n	8009578 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d140      	bne.n	8009578 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	3304      	adds	r3, #4
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe f8b2 	bl	8007664 <uxListRemove>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d115      	bne.n	8009532 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950a:	491f      	ldr	r1, [pc, #124]	@ (8009588 <xTaskPriorityDisinherit+0x110>)
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xTaskPriorityDisinherit+0xba>
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009520:	2201      	movs	r2, #1
 8009522:	fa02 f303 	lsl.w	r3, r2, r3
 8009526:	43da      	mvns	r2, r3
 8009528:	4b18      	ldr	r3, [pc, #96]	@ (800958c <xTaskPriorityDisinherit+0x114>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4013      	ands	r3, r2
 800952e:	4a17      	ldr	r2, [pc, #92]	@ (800958c <xTaskPriorityDisinherit+0x114>)
 8009530:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953e:	f1c3 0207 	rsb	r2, r3, #7
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	2201      	movs	r2, #1
 800954c:	409a      	lsls	r2, r3
 800954e:	4b0f      	ldr	r3, [pc, #60]	@ (800958c <xTaskPriorityDisinherit+0x114>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4313      	orrs	r3, r2
 8009554:	4a0d      	ldr	r2, [pc, #52]	@ (800958c <xTaskPriorityDisinherit+0x114>)
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4a08      	ldr	r2, [pc, #32]	@ (8009588 <xTaskPriorityDisinherit+0x110>)
 8009566:	441a      	add	r2, r3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	3304      	adds	r3, #4
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7fe f81b 	bl	80075aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009578:	697b      	ldr	r3, [r7, #20]
	}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	20006334 	.word	0x20006334
 8009588:	20006338 	.word	0x20006338
 800958c:	2000643c 	.word	0x2000643c

08009590 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800959e:	2301      	movs	r3, #1
 80095a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 8089 	beq.w	80096bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10d      	bne.n	80095ce <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	b672      	cpsid	i
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	b662      	cpsie	i
 80095c6:	60fb      	str	r3, [r7, #12]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d902      	bls.n	80095de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	61fb      	str	r3, [r7, #28]
 80095dc:	e002      	b.n	80095e4 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d066      	beq.n	80096bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d161      	bne.n	80096bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095f8:	4b32      	ldr	r3, [pc, #200]	@ (80096c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d10d      	bne.n	800961e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	b672      	cpsid	i
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	b662      	cpsie	i
 8009616:	60bb      	str	r3, [r7, #8]
}
 8009618:	bf00      	nop
 800961a:	bf00      	nop
 800961c:	e7fd      	b.n	800961a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009622:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	69fa      	ldr	r2, [r7, #28]
 8009628:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	2b00      	cmp	r3, #0
 8009630:	db04      	blt.n	800963c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	f1c3 0207 	rsb	r2, r3, #7
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	6959      	ldr	r1, [r3, #20]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4a1f      	ldr	r2, [pc, #124]	@ (80096c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800964c:	4413      	add	r3, r2
 800964e:	4299      	cmp	r1, r3
 8009650:	d134      	bne.n	80096bc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	3304      	adds	r3, #4
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe f804 	bl	8007664 <uxListRemove>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d115      	bne.n	800968e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009666:	4918      	ldr	r1, [pc, #96]	@ (80096c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10a      	bne.n	800968e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967c:	2201      	movs	r2, #1
 800967e:	fa02 f303 	lsl.w	r3, r2, r3
 8009682:	43da      	mvns	r2, r3
 8009684:	4b11      	ldr	r3, [pc, #68]	@ (80096cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4013      	ands	r3, r2
 800968a:	4a10      	ldr	r2, [pc, #64]	@ (80096cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800968c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009692:	2201      	movs	r2, #1
 8009694:	409a      	lsls	r2, r3
 8009696:	4b0d      	ldr	r3, [pc, #52]	@ (80096cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4313      	orrs	r3, r2
 800969c:	4a0b      	ldr	r2, [pc, #44]	@ (80096cc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4a06      	ldr	r2, [pc, #24]	@ (80096c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80096ae:	441a      	add	r2, r3
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7fd ff77 	bl	80075aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096bc:	bf00      	nop
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20006334 	.word	0x20006334
 80096c8:	20006338 	.word	0x20006338
 80096cc:	2000643c 	.word	0x2000643c

080096d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80096d4:	4b07      	ldr	r3, [pc, #28]	@ (80096f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80096dc:	4b05      	ldr	r3, [pc, #20]	@ (80096f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096e2:	3201      	adds	r2, #1
 80096e4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80096e6:	4b03      	ldr	r3, [pc, #12]	@ (80096f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80096e8:	681b      	ldr	r3, [r3, #0]
	}
 80096ea:	4618      	mov	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	20006334 	.word	0x20006334

080096f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009702:	4b29      	ldr	r3, [pc, #164]	@ (80097a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009708:	4b28      	ldr	r3, [pc, #160]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3304      	adds	r3, #4
 800970e:	4618      	mov	r0, r3
 8009710:	f7fd ffa8 	bl	8007664 <uxListRemove>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10b      	bne.n	8009732 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800971a:	4b24      	ldr	r3, [pc, #144]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009720:	2201      	movs	r2, #1
 8009722:	fa02 f303 	lsl.w	r3, r2, r3
 8009726:	43da      	mvns	r2, r3
 8009728:	4b21      	ldr	r3, [pc, #132]	@ (80097b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4013      	ands	r3, r2
 800972e:	4a20      	ldr	r2, [pc, #128]	@ (80097b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009730:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009738:	d10a      	bne.n	8009750 <prvAddCurrentTaskToDelayedList+0x58>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d007      	beq.n	8009750 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009740:	4b1a      	ldr	r3, [pc, #104]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	481a      	ldr	r0, [pc, #104]	@ (80097b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800974a:	f7fd ff2e 	bl	80075aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800974e:	e026      	b.n	800979e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009758:	4b14      	ldr	r3, [pc, #80]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	429a      	cmp	r2, r3
 8009766:	d209      	bcs.n	800977c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009768:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	4b0f      	ldr	r3, [pc, #60]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3304      	adds	r3, #4
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7fd ff3c 	bl	80075f2 <vListInsert>
}
 800977a:	e010      	b.n	800979e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800977c:	4b0f      	ldr	r3, [pc, #60]	@ (80097bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	4b0a      	ldr	r3, [pc, #40]	@ (80097ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3304      	adds	r3, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7fd ff32 	bl	80075f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800978e:	4b0c      	ldr	r3, [pc, #48]	@ (80097c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	429a      	cmp	r2, r3
 8009796:	d202      	bcs.n	800979e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009798:	4a09      	ldr	r2, [pc, #36]	@ (80097c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	6013      	str	r3, [r2, #0]
}
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20006438 	.word	0x20006438
 80097ac:	20006334 	.word	0x20006334
 80097b0:	2000643c 	.word	0x2000643c
 80097b4:	20006420 	.word	0x20006420
 80097b8:	200063f0 	.word	0x200063f0
 80097bc:	200063ec 	.word	0x200063ec
 80097c0:	20006454 	.word	0x20006454

080097c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3b04      	subs	r3, #4
 80097d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80097dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3b04      	subs	r3, #4
 80097e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f023 0201 	bic.w	r2, r3, #1
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3b04      	subs	r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097f4:	4a0c      	ldr	r2, [pc, #48]	@ (8009828 <pxPortInitialiseStack+0x64>)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3b14      	subs	r3, #20
 80097fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3b04      	subs	r3, #4
 800980a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f06f 0202 	mvn.w	r2, #2
 8009812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3b20      	subs	r3, #32
 8009818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800981a:	68fb      	ldr	r3, [r7, #12]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	0800982d 	.word	0x0800982d

0800982c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009836:	4b15      	ldr	r3, [pc, #84]	@ (800988c <prvTaskExitError+0x60>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d00d      	beq.n	800985c <prvTaskExitError+0x30>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	b672      	cpsid	i
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	b662      	cpsie	i
 8009854:	60fb      	str	r3, [r7, #12]
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <prvTaskExitError+0x2c>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	b672      	cpsid	i
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	b662      	cpsie	i
 8009870:	60bb      	str	r3, [r7, #8]
}
 8009872:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009874:	bf00      	nop
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0fc      	beq.n	8009876 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800987c:	bf00      	nop
 800987e:	bf00      	nop
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20000020 	.word	0x20000020

08009890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009890:	4b07      	ldr	r3, [pc, #28]	@ (80098b0 <pxCurrentTCBConst2>)
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	6808      	ldr	r0, [r1, #0]
 8009896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989a:	f380 8809 	msr	PSP, r0
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8811 	msr	BASEPRI, r0
 80098aa:	4770      	bx	lr
 80098ac:	f3af 8000 	nop.w

080098b0 <pxCurrentTCBConst2>:
 80098b0:	20006334 	.word	0x20006334
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098b8:	4808      	ldr	r0, [pc, #32]	@ (80098dc <prvPortStartFirstTask+0x24>)
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f380 8808 	msr	MSP, r0
 80098c2:	f04f 0000 	mov.w	r0, #0
 80098c6:	f380 8814 	msr	CONTROL, r0
 80098ca:	b662      	cpsie	i
 80098cc:	b661      	cpsie	f
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	df00      	svc	0
 80098d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098da:	bf00      	nop
 80098dc:	e000ed08 	.word	0xe000ed08

080098e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098e6:	4b37      	ldr	r3, [pc, #220]	@ (80099c4 <xPortStartScheduler+0xe4>)
 80098e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	22ff      	movs	r2, #255	@ 0xff
 80098f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009908:	b2da      	uxtb	r2, r3
 800990a:	4b2f      	ldr	r3, [pc, #188]	@ (80099c8 <xPortStartScheduler+0xe8>)
 800990c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800990e:	4b2f      	ldr	r3, [pc, #188]	@ (80099cc <xPortStartScheduler+0xec>)
 8009910:	2207      	movs	r2, #7
 8009912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009914:	e009      	b.n	800992a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009916:	4b2d      	ldr	r3, [pc, #180]	@ (80099cc <xPortStartScheduler+0xec>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3b01      	subs	r3, #1
 800991c:	4a2b      	ldr	r2, [pc, #172]	@ (80099cc <xPortStartScheduler+0xec>)
 800991e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009932:	2b80      	cmp	r3, #128	@ 0x80
 8009934:	d0ef      	beq.n	8009916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009936:	4b25      	ldr	r3, [pc, #148]	@ (80099cc <xPortStartScheduler+0xec>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1c3 0307 	rsb	r3, r3, #7
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00d      	beq.n	800995e <xPortStartScheduler+0x7e>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009946:	b672      	cpsid	i
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	b662      	cpsie	i
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800995e:	4b1b      	ldr	r3, [pc, #108]	@ (80099cc <xPortStartScheduler+0xec>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	4a19      	ldr	r2, [pc, #100]	@ (80099cc <xPortStartScheduler+0xec>)
 8009966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009968:	4b18      	ldr	r3, [pc, #96]	@ (80099cc <xPortStartScheduler+0xec>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009970:	4a16      	ldr	r2, [pc, #88]	@ (80099cc <xPortStartScheduler+0xec>)
 8009972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	b2da      	uxtb	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800997c:	4b14      	ldr	r3, [pc, #80]	@ (80099d0 <xPortStartScheduler+0xf0>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a13      	ldr	r2, [pc, #76]	@ (80099d0 <xPortStartScheduler+0xf0>)
 8009982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009988:	4b11      	ldr	r3, [pc, #68]	@ (80099d0 <xPortStartScheduler+0xf0>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a10      	ldr	r2, [pc, #64]	@ (80099d0 <xPortStartScheduler+0xf0>)
 800998e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009994:	f000 f8dc 	bl	8009b50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009998:	4b0e      	ldr	r3, [pc, #56]	@ (80099d4 <xPortStartScheduler+0xf4>)
 800999a:	2200      	movs	r2, #0
 800999c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800999e:	f000 f8fb 	bl	8009b98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099a2:	4b0d      	ldr	r3, [pc, #52]	@ (80099d8 <xPortStartScheduler+0xf8>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a0c      	ldr	r2, [pc, #48]	@ (80099d8 <xPortStartScheduler+0xf8>)
 80099a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80099ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099ae:	f7ff ff83 	bl	80098b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099b2:	f7ff fa75 	bl	8008ea0 <vTaskSwitchContext>
	prvTaskExitError();
 80099b6:	f7ff ff39 	bl	800982c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000e400 	.word	0xe000e400
 80099c8:	20006460 	.word	0x20006460
 80099cc:	20006464 	.word	0x20006464
 80099d0:	e000ed20 	.word	0xe000ed20
 80099d4:	20000020 	.word	0x20000020
 80099d8:	e000ef34 	.word	0xe000ef34

080099dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e6:	b672      	cpsid	i
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	b662      	cpsie	i
 80099f6:	607b      	str	r3, [r7, #4]
}
 80099f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099fa:	4b11      	ldr	r3, [pc, #68]	@ (8009a40 <vPortEnterCritical+0x64>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	4a0f      	ldr	r2, [pc, #60]	@ (8009a40 <vPortEnterCritical+0x64>)
 8009a02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a04:	4b0e      	ldr	r3, [pc, #56]	@ (8009a40 <vPortEnterCritical+0x64>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d112      	bne.n	8009a32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <vPortEnterCritical+0x68>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <vPortEnterCritical+0x56>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	b672      	cpsid	i
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	b662      	cpsie	i
 8009a2a:	603b      	str	r3, [r7, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	e7fd      	b.n	8009a2e <vPortEnterCritical+0x52>
	}
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20000020 	.word	0x20000020
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a4e:	4b13      	ldr	r3, [pc, #76]	@ (8009a9c <vPortExitCritical+0x54>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10d      	bne.n	8009a72 <vPortExitCritical+0x2a>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5a:	b672      	cpsid	i
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	b662      	cpsie	i
 8009a6a:	607b      	str	r3, [r7, #4]
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	e7fd      	b.n	8009a6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <vPortExitCritical+0x54>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	4a08      	ldr	r2, [pc, #32]	@ (8009a9c <vPortExitCritical+0x54>)
 8009a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a7c:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <vPortExitCritical+0x54>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d105      	bne.n	8009a90 <vPortExitCritical+0x48>
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f383 8811 	msr	BASEPRI, r3
}
 8009a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20000020 	.word	0x20000020

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b15      	ldr	r3, [pc, #84]	@ (8009b00 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f01e 0f10 	tst.w	lr, #16
 8009ab0:	bf08      	it	eq
 8009ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ac4:	b672      	cpsid	i
 8009ac6:	f380 8811 	msr	BASEPRI, r0
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	b662      	cpsie	i
 8009ad4:	f7ff f9e4 	bl	8008ea0 <vTaskSwitchContext>
 8009ad8:	f04f 0000 	mov.w	r0, #0
 8009adc:	f380 8811 	msr	BASEPRI, r0
 8009ae0:	bc09      	pop	{r0, r3}
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aea:	f01e 0f10 	tst.w	lr, #16
 8009aee:	bf08      	it	eq
 8009af0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009af4:	f380 8809 	msr	PSP, r0
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop

08009b00 <pxCurrentTCBConst>:
 8009b00:	20006334 	.word	0x20006334
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b12:	b672      	cpsid	i
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	b662      	cpsie	i
 8009b22:	607b      	str	r3, [r7, #4]
}
 8009b24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b26:	f7ff f8ff 	bl	8008d28 <xTaskIncrementTick>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b30:	4b06      	ldr	r3, [pc, #24]	@ (8009b4c <xPortSysTickHandler+0x44>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	2300      	movs	r3, #0
 8009b3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	f383 8811 	msr	BASEPRI, r3
}
 8009b42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b54:	4b0b      	ldr	r3, [pc, #44]	@ (8009b84 <vPortSetupTimerInterrupt+0x34>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b88 <vPortSetupTimerInterrupt+0x38>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b60:	4b0a      	ldr	r3, [pc, #40]	@ (8009b8c <vPortSetupTimerInterrupt+0x3c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a0a      	ldr	r2, [pc, #40]	@ (8009b90 <vPortSetupTimerInterrupt+0x40>)
 8009b66:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6a:	099b      	lsrs	r3, r3, #6
 8009b6c:	4a09      	ldr	r2, [pc, #36]	@ (8009b94 <vPortSetupTimerInterrupt+0x44>)
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b72:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <vPortSetupTimerInterrupt+0x34>)
 8009b74:	2207      	movs	r2, #7
 8009b76:	601a      	str	r2, [r3, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	e000e010 	.word	0xe000e010
 8009b88:	e000e018 	.word	0xe000e018
 8009b8c:	20000000 	.word	0x20000000
 8009b90:	10624dd3 	.word	0x10624dd3
 8009b94:	e000e014 	.word	0xe000e014

08009b98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ba8 <vPortEnableVFP+0x10>
 8009b9c:	6801      	ldr	r1, [r0, #0]
 8009b9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009ba2:	6001      	str	r1, [r0, #0]
 8009ba4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ba6:	bf00      	nop
 8009ba8:	e000ed88 	.word	0xe000ed88

08009bac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bb2:	f3ef 8305 	mrs	r3, IPSR
 8009bb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	d917      	bls.n	8009bee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8009c28 <vPortValidateInterruptPriority+0x7c>)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bc8:	4b18      	ldr	r3, [pc, #96]	@ (8009c2c <vPortValidateInterruptPriority+0x80>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	7afa      	ldrb	r2, [r7, #11]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d20d      	bcs.n	8009bee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd6:	b672      	cpsid	i
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	b662      	cpsie	i
 8009be6:	607b      	str	r3, [r7, #4]
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	e7fd      	b.n	8009bea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bee:	4b10      	ldr	r3, [pc, #64]	@ (8009c30 <vPortValidateInterruptPriority+0x84>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c34 <vPortValidateInterruptPriority+0x88>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d90d      	bls.n	8009c1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	b672      	cpsid	i
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	b662      	cpsie	i
 8009c12:	603b      	str	r3, [r7, #0]
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	e7fd      	b.n	8009c16 <vPortValidateInterruptPriority+0x6a>
	}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	e000e3f0 	.word	0xe000e3f0
 8009c2c:	20006460 	.word	0x20006460
 8009c30:	e000ed0c 	.word	0xe000ed0c
 8009c34:	20006464 	.word	0x20006464

08009c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08a      	sub	sp, #40	@ 0x28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c40:	2300      	movs	r3, #0
 8009c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c44:	f7fe ffa0 	bl	8008b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c48:	4b5d      	ldr	r3, [pc, #372]	@ (8009dc0 <pvPortMalloc+0x188>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c50:	f000 f920 	bl	8009e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c54:	4b5b      	ldr	r3, [pc, #364]	@ (8009dc4 <pvPortMalloc+0x18c>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 8094 	bne.w	8009d8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d020      	beq.n	8009caa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009c68:	2208      	movs	r2, #8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d017      	beq.n	8009caa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f023 0307 	bic.w	r3, r3, #7
 8009c80:	3308      	adds	r3, #8
 8009c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00d      	beq.n	8009caa <pvPortMalloc+0x72>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c92:	b672      	cpsid	i
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	b662      	cpsie	i
 8009ca2:	617b      	str	r3, [r7, #20]
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	e7fd      	b.n	8009ca6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d06c      	beq.n	8009d8a <pvPortMalloc+0x152>
 8009cb0:	4b45      	ldr	r3, [pc, #276]	@ (8009dc8 <pvPortMalloc+0x190>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d867      	bhi.n	8009d8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cba:	4b44      	ldr	r3, [pc, #272]	@ (8009dcc <pvPortMalloc+0x194>)
 8009cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cbe:	4b43      	ldr	r3, [pc, #268]	@ (8009dcc <pvPortMalloc+0x194>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cc4:	e004      	b.n	8009cd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d903      	bls.n	8009ce2 <pvPortMalloc+0xaa>
 8009cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f1      	bne.n	8009cc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ce2:	4b37      	ldr	r3, [pc, #220]	@ (8009dc0 <pvPortMalloc+0x188>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d04e      	beq.n	8009d8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	4413      	add	r3, r2
 8009cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	1ad2      	subs	r2, r2, r3
 8009d06:	2308      	movs	r3, #8
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d922      	bls.n	8009d54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4413      	add	r3, r2
 8009d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00d      	beq.n	8009d3c <pvPortMalloc+0x104>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d24:	b672      	cpsid	i
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	b662      	cpsie	i
 8009d34:	613b      	str	r3, [r7, #16]
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	e7fd      	b.n	8009d38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	1ad2      	subs	r2, r2, r3
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d4e:	69b8      	ldr	r0, [r7, #24]
 8009d50:	f000 f902 	bl	8009f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d54:	4b1c      	ldr	r3, [pc, #112]	@ (8009dc8 <pvPortMalloc+0x190>)
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc8 <pvPortMalloc+0x190>)
 8009d60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d62:	4b19      	ldr	r3, [pc, #100]	@ (8009dc8 <pvPortMalloc+0x190>)
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	4b1a      	ldr	r3, [pc, #104]	@ (8009dd0 <pvPortMalloc+0x198>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d203      	bcs.n	8009d76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d6e:	4b16      	ldr	r3, [pc, #88]	@ (8009dc8 <pvPortMalloc+0x190>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a17      	ldr	r2, [pc, #92]	@ (8009dd0 <pvPortMalloc+0x198>)
 8009d74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	4b12      	ldr	r3, [pc, #72]	@ (8009dc4 <pvPortMalloc+0x18c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	2200      	movs	r2, #0
 8009d88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d8a:	f7fe ff0b 	bl	8008ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00d      	beq.n	8009db4 <pvPortMalloc+0x17c>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9c:	b672      	cpsid	i
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	b662      	cpsie	i
 8009dac:	60fb      	str	r3, [r7, #12]
}
 8009dae:	bf00      	nop
 8009db0:	bf00      	nop
 8009db2:	e7fd      	b.n	8009db0 <pvPortMalloc+0x178>
	return pvReturn;
 8009db4:	69fb      	ldr	r3, [r7, #28]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3728      	adds	r7, #40	@ 0x28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	2000a070 	.word	0x2000a070
 8009dc4:	2000a07c 	.word	0x2000a07c
 8009dc8:	2000a074 	.word	0x2000a074
 8009dcc:	2000a068 	.word	0x2000a068
 8009dd0:	2000a078 	.word	0x2000a078

08009dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d04e      	beq.n	8009e84 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009de6:	2308      	movs	r3, #8
 8009de8:	425b      	negs	r3, r3
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	4413      	add	r3, r2
 8009dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	4b24      	ldr	r3, [pc, #144]	@ (8009e8c <vPortFree+0xb8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10d      	bne.n	8009e1e <vPortFree+0x4a>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e06:	b672      	cpsid	i
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	b662      	cpsie	i
 8009e16:	60fb      	str	r3, [r7, #12]
}
 8009e18:	bf00      	nop
 8009e1a:	bf00      	nop
 8009e1c:	e7fd      	b.n	8009e1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00d      	beq.n	8009e42 <vPortFree+0x6e>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2a:	b672      	cpsid	i
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	b662      	cpsie	i
 8009e3a:	60bb      	str	r3, [r7, #8]
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	e7fd      	b.n	8009e3e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	4b11      	ldr	r3, [pc, #68]	@ (8009e8c <vPortFree+0xb8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d019      	beq.n	8009e84 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d115      	bne.n	8009e84 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009e8c <vPortFree+0xb8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	401a      	ands	r2, r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e68:	f7fe fe8e 	bl	8008b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <vPortFree+0xbc>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	4a06      	ldr	r2, [pc, #24]	@ (8009e90 <vPortFree+0xbc>)
 8009e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e7a:	6938      	ldr	r0, [r7, #16]
 8009e7c:	f000 f86c 	bl	8009f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e80:	f7fe fe90 	bl	8008ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e84:	bf00      	nop
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	2000a07c 	.word	0x2000a07c
 8009e90:	2000a074 	.word	0x2000a074

08009e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e9a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ea0:	4b27      	ldr	r3, [pc, #156]	@ (8009f40 <prvHeapInit+0xac>)
 8009ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00c      	beq.n	8009ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3307      	adds	r3, #7
 8009eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f023 0307 	bic.w	r3, r3, #7
 8009eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8009f40 <prvHeapInit+0xac>)
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8009f44 <prvHeapInit+0xb0>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8009f44 <prvHeapInit+0xb0>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	4413      	add	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ee0:	2208      	movs	r2, #8
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4a15      	ldr	r2, [pc, #84]	@ (8009f48 <prvHeapInit+0xb4>)
 8009ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ef6:	4b14      	ldr	r3, [pc, #80]	@ (8009f48 <prvHeapInit+0xb4>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2200      	movs	r2, #0
 8009efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009efe:	4b12      	ldr	r3, [pc, #72]	@ (8009f48 <prvHeapInit+0xb4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	1ad2      	subs	r2, r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f14:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <prvHeapInit+0xb4>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	4a0a      	ldr	r2, [pc, #40]	@ (8009f4c <prvHeapInit+0xb8>)
 8009f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	4a09      	ldr	r2, [pc, #36]	@ (8009f50 <prvHeapInit+0xbc>)
 8009f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f2c:	4b09      	ldr	r3, [pc, #36]	@ (8009f54 <prvHeapInit+0xc0>)
 8009f2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f32:	601a      	str	r2, [r3, #0]
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	20006468 	.word	0x20006468
 8009f44:	2000a068 	.word	0x2000a068
 8009f48:	2000a070 	.word	0x2000a070
 8009f4c:	2000a078 	.word	0x2000a078
 8009f50:	2000a074 	.word	0x2000a074
 8009f54:	2000a07c 	.word	0x2000a07c

08009f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f60:	4b28      	ldr	r3, [pc, #160]	@ (800a004 <prvInsertBlockIntoFreeList+0xac>)
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e002      	b.n	8009f6c <prvInsertBlockIntoFreeList+0x14>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d8f7      	bhi.n	8009f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	4413      	add	r3, r2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d108      	bne.n	8009f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	441a      	add	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d118      	bne.n	8009fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4b15      	ldr	r3, [pc, #84]	@ (800a008 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d00d      	beq.n	8009fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	441a      	add	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	e008      	b.n	8009fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	@ (800a008 <prvInsertBlockIntoFreeList+0xb0>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	e003      	b.n	8009fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d002      	beq.n	8009ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff6:	bf00      	nop
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	2000a068 	.word	0x2000a068
 800a008:	2000a070 	.word	0x2000a070

0800a00c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a016:	f007 fad1 	bl	80115bc <sys_timeouts_sleeptime>
 800a01a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a022:	d10b      	bne.n	800a03c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a024:	4813      	ldr	r0, [pc, #76]	@ (800a074 <tcpip_timeouts_mbox_fetch+0x68>)
 800a026:	f00a fb84 	bl	8014732 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a02a:	2200      	movs	r2, #0
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f00a faf6 	bl	8014620 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a034:	480f      	ldr	r0, [pc, #60]	@ (800a074 <tcpip_timeouts_mbox_fetch+0x68>)
 800a036:	f00a fb6d 	bl	8014714 <sys_mutex_lock>
    return;
 800a03a:	e018      	b.n	800a06e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a042:	f007 fa81 	bl	8011548 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a046:	e7e6      	b.n	800a016 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a048:	480a      	ldr	r0, [pc, #40]	@ (800a074 <tcpip_timeouts_mbox_fetch+0x68>)
 800a04a:	f00a fb72 	bl	8014732 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f00a fae4 	bl	8014620 <sys_arch_mbox_fetch>
 800a058:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a05a:	4806      	ldr	r0, [pc, #24]	@ (800a074 <tcpip_timeouts_mbox_fetch+0x68>)
 800a05c:	f00a fb5a 	bl	8014714 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a066:	d102      	bne.n	800a06e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a068:	f007 fa6e 	bl	8011548 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a06c:	e7d3      	b.n	800a016 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	2000a08c 	.word	0x2000a08c

0800a078 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a080:	4810      	ldr	r0, [pc, #64]	@ (800a0c4 <tcpip_thread+0x4c>)
 800a082:	f00a fb47 	bl	8014714 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a086:	4b10      	ldr	r3, [pc, #64]	@ (800a0c8 <tcpip_thread+0x50>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a08e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c8 <tcpip_thread+0x50>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a0e      	ldr	r2, [pc, #56]	@ (800a0cc <tcpip_thread+0x54>)
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	4610      	mov	r0, r2
 800a098:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a09a:	f107 030c 	add.w	r3, r7, #12
 800a09e:	4619      	mov	r1, r3
 800a0a0:	480b      	ldr	r0, [pc, #44]	@ (800a0d0 <tcpip_thread+0x58>)
 800a0a2:	f7ff ffb3 	bl	800a00c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d106      	bne.n	800a0ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a0ac:	4b09      	ldr	r3, [pc, #36]	@ (800a0d4 <tcpip_thread+0x5c>)
 800a0ae:	2291      	movs	r2, #145	@ 0x91
 800a0b0:	4909      	ldr	r1, [pc, #36]	@ (800a0d8 <tcpip_thread+0x60>)
 800a0b2:	480a      	ldr	r0, [pc, #40]	@ (800a0dc <tcpip_thread+0x64>)
 800a0b4:	f00a fc8e 	bl	80149d4 <iprintf>
      continue;
 800a0b8:	e003      	b.n	800a0c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 f80f 	bl	800a0e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a0c2:	e7ea      	b.n	800a09a <tcpip_thread+0x22>
 800a0c4:	2000a08c 	.word	0x2000a08c
 800a0c8:	2000a080 	.word	0x2000a080
 800a0cc:	2000a084 	.word	0x2000a084
 800a0d0:	2000a088 	.word	0x2000a088
 800a0d4:	0801595c 	.word	0x0801595c
 800a0d8:	0801598c 	.word	0x0801598c
 800a0dc:	080159ac 	.word	0x080159ac

0800a0e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d026      	beq.n	800a13e <tcpip_thread_handle_msg+0x5e>
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	dc2b      	bgt.n	800a14c <tcpip_thread_handle_msg+0x6c>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <tcpip_thread_handle_msg+0x1e>
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d015      	beq.n	800a128 <tcpip_thread_handle_msg+0x48>
 800a0fc:	e026      	b.n	800a14c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	6850      	ldr	r0, [r2, #4]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6892      	ldr	r2, [r2, #8]
 800a10a:	4611      	mov	r1, r2
 800a10c:	4798      	blx	r3
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d004      	beq.n	800a11e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 fd0b 	bl	800bb34 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	2009      	movs	r0, #9
 800a122:	f000 fe63 	bl	800adec <memp_free>
      break;
 800a126:	e018      	b.n	800a15a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6892      	ldr	r2, [r2, #8]
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a134:	6879      	ldr	r1, [r7, #4]
 800a136:	2008      	movs	r0, #8
 800a138:	f000 fe58 	bl	800adec <memp_free>
      break;
 800a13c:	e00d      	b.n	800a15a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6892      	ldr	r2, [r2, #8]
 800a146:	4610      	mov	r0, r2
 800a148:	4798      	blx	r3
      break;
 800a14a:	e006      	b.n	800a15a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <tcpip_thread_handle_msg+0x84>)
 800a14e:	22cf      	movs	r2, #207	@ 0xcf
 800a150:	4905      	ldr	r1, [pc, #20]	@ (800a168 <tcpip_thread_handle_msg+0x88>)
 800a152:	4806      	ldr	r0, [pc, #24]	@ (800a16c <tcpip_thread_handle_msg+0x8c>)
 800a154:	f00a fc3e 	bl	80149d4 <iprintf>
      break;
 800a158:	bf00      	nop
  }
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	0801595c 	.word	0x0801595c
 800a168:	0801598c 	.word	0x0801598c
 800a16c:	080159ac 	.word	0x080159ac

0800a170 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a17c:	481a      	ldr	r0, [pc, #104]	@ (800a1e8 <tcpip_inpkt+0x78>)
 800a17e:	f00a fa8e 	bl	801469e <sys_mbox_valid>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d105      	bne.n	800a194 <tcpip_inpkt+0x24>
 800a188:	4b18      	ldr	r3, [pc, #96]	@ (800a1ec <tcpip_inpkt+0x7c>)
 800a18a:	22fc      	movs	r2, #252	@ 0xfc
 800a18c:	4918      	ldr	r1, [pc, #96]	@ (800a1f0 <tcpip_inpkt+0x80>)
 800a18e:	4819      	ldr	r0, [pc, #100]	@ (800a1f4 <tcpip_inpkt+0x84>)
 800a190:	f00a fc20 	bl	80149d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a194:	2009      	movs	r0, #9
 800a196:	f000 fdb3 	bl	800ad00 <memp_malloc>
 800a19a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a6:	e01a      	b.n	800a1de <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a1c0:	6979      	ldr	r1, [r7, #20]
 800a1c2:	4809      	ldr	r0, [pc, #36]	@ (800a1e8 <tcpip_inpkt+0x78>)
 800a1c4:	f00a fa12 	bl	80145ec <sys_mbox_trypost>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d006      	beq.n	800a1dc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a1ce:	6979      	ldr	r1, [r7, #20]
 800a1d0:	2009      	movs	r0, #9
 800a1d2:	f000 fe0b 	bl	800adec <memp_free>
    return ERR_MEM;
 800a1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1da:	e000      	b.n	800a1de <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a1dc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	2000a088 	.word	0x2000a088
 800a1ec:	0801595c 	.word	0x0801595c
 800a1f0:	080159d4 	.word	0x080159d4
 800a1f4:	080159ac 	.word	0x080159ac

0800a1f8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a208:	f003 0318 	and.w	r3, r3, #24
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a210:	4a08      	ldr	r2, [pc, #32]	@ (800a234 <tcpip_input+0x3c>)
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff ffab 	bl	800a170 <tcpip_inpkt>
 800a21a:	4603      	mov	r3, r0
 800a21c:	e005      	b.n	800a22a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a21e:	4a06      	ldr	r2, [pc, #24]	@ (800a238 <tcpip_input+0x40>)
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff ffa4 	bl	800a170 <tcpip_inpkt>
 800a228:	4603      	mov	r3, r0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	080143fd 	.word	0x080143fd
 800a238:	080131e5 	.word	0x080131e5

0800a23c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a246:	4819      	ldr	r0, [pc, #100]	@ (800a2ac <tcpip_try_callback+0x70>)
 800a248:	f00a fa29 	bl	801469e <sys_mbox_valid>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <tcpip_try_callback+0x24>
 800a252:	4b17      	ldr	r3, [pc, #92]	@ (800a2b0 <tcpip_try_callback+0x74>)
 800a254:	f240 125d 	movw	r2, #349	@ 0x15d
 800a258:	4916      	ldr	r1, [pc, #88]	@ (800a2b4 <tcpip_try_callback+0x78>)
 800a25a:	4817      	ldr	r0, [pc, #92]	@ (800a2b8 <tcpip_try_callback+0x7c>)
 800a25c:	f00a fbba 	bl	80149d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a260:	2008      	movs	r0, #8
 800a262:	f000 fd4d 	bl	800ad00 <memp_malloc>
 800a266:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a26e:	f04f 33ff 	mov.w	r3, #4294967295
 800a272:	e017      	b.n	800a2a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a286:	68f9      	ldr	r1, [r7, #12]
 800a288:	4808      	ldr	r0, [pc, #32]	@ (800a2ac <tcpip_try_callback+0x70>)
 800a28a:	f00a f9af 	bl	80145ec <sys_mbox_trypost>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d006      	beq.n	800a2a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a294:	68f9      	ldr	r1, [r7, #12]
 800a296:	2008      	movs	r0, #8
 800a298:	f000 fda8 	bl	800adec <memp_free>
    return ERR_MEM;
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	e000      	b.n	800a2a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	2000a088 	.word	0x2000a088
 800a2b0:	0801595c 	.word	0x0801595c
 800a2b4:	080159d4 	.word	0x080159d4
 800a2b8:	080159ac 	.word	0x080159ac

0800a2bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af02      	add	r7, sp, #8
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a2c6:	f000 f871 	bl	800a3ac <lwip_init>

  tcpip_init_done = initfunc;
 800a2ca:	4a17      	ldr	r2, [pc, #92]	@ (800a328 <tcpip_init+0x6c>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a2d0:	4a16      	ldr	r2, [pc, #88]	@ (800a32c <tcpip_init+0x70>)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a2d6:	2106      	movs	r1, #6
 800a2d8:	4815      	ldr	r0, [pc, #84]	@ (800a330 <tcpip_init+0x74>)
 800a2da:	f00a f965 	bl	80145a8 <sys_mbox_new>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d006      	beq.n	800a2f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a2e4:	4b13      	ldr	r3, [pc, #76]	@ (800a334 <tcpip_init+0x78>)
 800a2e6:	f240 2261 	movw	r2, #609	@ 0x261
 800a2ea:	4913      	ldr	r1, [pc, #76]	@ (800a338 <tcpip_init+0x7c>)
 800a2ec:	4813      	ldr	r0, [pc, #76]	@ (800a33c <tcpip_init+0x80>)
 800a2ee:	f00a fb71 	bl	80149d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a2f2:	4813      	ldr	r0, [pc, #76]	@ (800a340 <tcpip_init+0x84>)
 800a2f4:	f00a f9f2 	bl	80146dc <sys_mutex_new>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d006      	beq.n	800a30c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a334 <tcpip_init+0x78>)
 800a300:	f240 2265 	movw	r2, #613	@ 0x265
 800a304:	490f      	ldr	r1, [pc, #60]	@ (800a344 <tcpip_init+0x88>)
 800a306:	480d      	ldr	r0, [pc, #52]	@ (800a33c <tcpip_init+0x80>)
 800a308:	f00a fb64 	bl	80149d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a30c:	2300      	movs	r3, #0
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a314:	2200      	movs	r2, #0
 800a316:	490c      	ldr	r1, [pc, #48]	@ (800a348 <tcpip_init+0x8c>)
 800a318:	480c      	ldr	r0, [pc, #48]	@ (800a34c <tcpip_init+0x90>)
 800a31a:	f00a fa17 	bl	801474c <sys_thread_new>
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	2000a080 	.word	0x2000a080
 800a32c:	2000a084 	.word	0x2000a084
 800a330:	2000a088 	.word	0x2000a088
 800a334:	0801595c 	.word	0x0801595c
 800a338:	080159e4 	.word	0x080159e4
 800a33c:	080159ac 	.word	0x080159ac
 800a340:	2000a08c 	.word	0x2000a08c
 800a344:	08015a08 	.word	0x08015a08
 800a348:	0800a079 	.word	0x0800a079
 800a34c:	08015a2c 	.word	0x08015a2c

0800a350 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a35a:	88fb      	ldrh	r3, [r7, #6]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	b21a      	sxth	r2, r3
 800a360:	88fb      	ldrh	r3, [r7, #6]
 800a362:	0a1b      	lsrs	r3, r3, #8
 800a364:	b29b      	uxth	r3, r3
 800a366:	b21b      	sxth	r3, r3
 800a368:	4313      	orrs	r3, r2
 800a36a:	b21b      	sxth	r3, r3
 800a36c:	b29b      	uxth	r3, r3
}
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	061a      	lsls	r2, r3, #24
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	021b      	lsls	r3, r3, #8
 800a38a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a38e:	431a      	orrs	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	0a1b      	lsrs	r3, r3, #8
 800a394:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a398:	431a      	orrs	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	0e1b      	lsrs	r3, r3, #24
 800a39e:	4313      	orrs	r3, r2
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a3b6:	f00a f983 	bl	80146c0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a3ba:	f000 f8d5 	bl	800a568 <mem_init>
  memp_init();
 800a3be:	f000 fc31 	bl	800ac24 <memp_init>
  pbuf_init();
  netif_init();
 800a3c2:	f000 fd3d 	bl	800ae40 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3c6:	f007 f931 	bl	801162c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3ca:	f001 fe5d 	bl	800c088 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3ce:	f007 f873 	bl	80114b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3d2:	bf00      	nop
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a3e6:	4b05      	ldr	r3, [pc, #20]	@ (800a3fc <ptr_to_mem+0x20>)
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	88fb      	ldrh	r3, [r7, #6]
 800a3ec:	4413      	add	r3, r2
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	2000a6fc 	.word	0x2000a6fc

0800a400 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a408:	4b05      	ldr	r3, [pc, #20]	@ (800a420 <mem_to_ptr+0x20>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	b29b      	uxth	r3, r3
}
 800a412:	4618      	mov	r0, r3
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	2000a6fc 	.word	0x2000a6fc

0800a424 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a42c:	4b45      	ldr	r3, [pc, #276]	@ (800a544 <plug_holes+0x120>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	429a      	cmp	r2, r3
 800a434:	d206      	bcs.n	800a444 <plug_holes+0x20>
 800a436:	4b44      	ldr	r3, [pc, #272]	@ (800a548 <plug_holes+0x124>)
 800a438:	f240 12df 	movw	r2, #479	@ 0x1df
 800a43c:	4943      	ldr	r1, [pc, #268]	@ (800a54c <plug_holes+0x128>)
 800a43e:	4844      	ldr	r0, [pc, #272]	@ (800a550 <plug_holes+0x12c>)
 800a440:	f00a fac8 	bl	80149d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a444:	4b43      	ldr	r3, [pc, #268]	@ (800a554 <plug_holes+0x130>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d306      	bcc.n	800a45c <plug_holes+0x38>
 800a44e:	4b3e      	ldr	r3, [pc, #248]	@ (800a548 <plug_holes+0x124>)
 800a450:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a454:	4940      	ldr	r1, [pc, #256]	@ (800a558 <plug_holes+0x134>)
 800a456:	483e      	ldr	r0, [pc, #248]	@ (800a550 <plug_holes+0x12c>)
 800a458:	f00a fabc 	bl	80149d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	791b      	ldrb	r3, [r3, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d006      	beq.n	800a472 <plug_holes+0x4e>
 800a464:	4b38      	ldr	r3, [pc, #224]	@ (800a548 <plug_holes+0x124>)
 800a466:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a46a:	493c      	ldr	r1, [pc, #240]	@ (800a55c <plug_holes+0x138>)
 800a46c:	4838      	ldr	r0, [pc, #224]	@ (800a550 <plug_holes+0x12c>)
 800a46e:	f00a fab1 	bl	80149d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a47a:	d906      	bls.n	800a48a <plug_holes+0x66>
 800a47c:	4b32      	ldr	r3, [pc, #200]	@ (800a548 <plug_holes+0x124>)
 800a47e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a482:	4937      	ldr	r1, [pc, #220]	@ (800a560 <plug_holes+0x13c>)
 800a484:	4832      	ldr	r0, [pc, #200]	@ (800a550 <plug_holes+0x12c>)
 800a486:	f00a faa5 	bl	80149d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff ffa4 	bl	800a3dc <ptr_to_mem>
 800a494:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d024      	beq.n	800a4e8 <plug_holes+0xc4>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	791b      	ldrb	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d120      	bne.n	800a4e8 <plug_holes+0xc4>
 800a4a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a554 <plug_holes+0x130>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d01b      	beq.n	800a4e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a4b0:	4b2c      	ldr	r3, [pc, #176]	@ (800a564 <plug_holes+0x140>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d102      	bne.n	800a4c0 <plug_holes+0x9c>
      lfree = mem;
 800a4ba:	4a2a      	ldr	r2, [pc, #168]	@ (800a564 <plug_holes+0x140>)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	881a      	ldrh	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a4d0:	d00a      	beq.n	800a4e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7ff ff80 	bl	800a3dc <ptr_to_mem>
 800a4dc:	4604      	mov	r4, r0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff ff8e 	bl	800a400 <mem_to_ptr>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	885b      	ldrh	r3, [r3, #2]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff ff75 	bl	800a3dc <ptr_to_mem>
 800a4f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d01f      	beq.n	800a53c <plug_holes+0x118>
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	791b      	ldrb	r3, [r3, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d11b      	bne.n	800a53c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a504:	4b17      	ldr	r3, [pc, #92]	@ (800a564 <plug_holes+0x140>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d102      	bne.n	800a514 <plug_holes+0xf0>
      lfree = pmem;
 800a50e:	4a15      	ldr	r2, [pc, #84]	@ (800a564 <plug_holes+0x140>)
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	881a      	ldrh	r2, [r3, #0]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a524:	d00a      	beq.n	800a53c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff ff56 	bl	800a3dc <ptr_to_mem>
 800a530:	4604      	mov	r4, r0
 800a532:	68b8      	ldr	r0, [r7, #8]
 800a534:	f7ff ff64 	bl	800a400 <mem_to_ptr>
 800a538:	4603      	mov	r3, r0
 800a53a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a53c:	bf00      	nop
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	bd90      	pop	{r4, r7, pc}
 800a544:	2000a6fc 	.word	0x2000a6fc
 800a548:	08015a3c 	.word	0x08015a3c
 800a54c:	08015a6c 	.word	0x08015a6c
 800a550:	08015a84 	.word	0x08015a84
 800a554:	2000a700 	.word	0x2000a700
 800a558:	08015aac 	.word	0x08015aac
 800a55c:	08015ac8 	.word	0x08015ac8
 800a560:	08015ae4 	.word	0x08015ae4
 800a564:	2000a708 	.word	0x2000a708

0800a568 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a56e:	4b1f      	ldr	r3, [pc, #124]	@ (800a5ec <mem_init+0x84>)
 800a570:	3303      	adds	r3, #3
 800a572:	f023 0303 	bic.w	r3, r3, #3
 800a576:	461a      	mov	r2, r3
 800a578:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f0 <mem_init+0x88>)
 800a57a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a57c:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f0 <mem_init+0x88>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a588:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a596:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a59a:	f7ff ff1f 	bl	800a3dc <ptr_to_mem>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	4a14      	ldr	r2, [pc, #80]	@ (800a5f4 <mem_init+0x8c>)
 800a5a2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a5a4:	4b13      	ldr	r3, [pc, #76]	@ (800a5f4 <mem_init+0x8c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a5ac:	4b11      	ldr	r3, [pc, #68]	@ (800a5f4 <mem_init+0x8c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a5b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f4 <mem_init+0x8c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a5be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <mem_init+0x88>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a5f8 <mem_init+0x90>)
 800a5c6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a5c8:	480c      	ldr	r0, [pc, #48]	@ (800a5fc <mem_init+0x94>)
 800a5ca:	f00a f887 	bl	80146dc <sys_mutex_new>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d006      	beq.n	800a5e2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a600 <mem_init+0x98>)
 800a5d6:	f240 221f 	movw	r2, #543	@ 0x21f
 800a5da:	490a      	ldr	r1, [pc, #40]	@ (800a604 <mem_init+0x9c>)
 800a5dc:	480a      	ldr	r0, [pc, #40]	@ (800a608 <mem_init+0xa0>)
 800a5de:	f00a f9f9 	bl	80149d4 <iprintf>
  }
}
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	2000a0a8 	.word	0x2000a0a8
 800a5f0:	2000a6fc 	.word	0x2000a6fc
 800a5f4:	2000a700 	.word	0x2000a700
 800a5f8:	2000a708 	.word	0x2000a708
 800a5fc:	2000a704 	.word	0x2000a704
 800a600:	08015a3c 	.word	0x08015a3c
 800a604:	08015b10 	.word	0x08015b10
 800a608:	08015a84 	.word	0x08015a84

0800a60c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff fef3 	bl	800a400 <mem_to_ptr>
 800a61a:	4603      	mov	r3, r0
 800a61c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff feda 	bl	800a3dc <ptr_to_mem>
 800a628:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	885b      	ldrh	r3, [r3, #2]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff fed4 	bl	800a3dc <ptr_to_mem>
 800a634:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a63e:	d818      	bhi.n	800a672 <mem_link_valid+0x66>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	885b      	ldrh	r3, [r3, #2]
 800a644:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a648:	d813      	bhi.n	800a672 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a64e:	8afa      	ldrh	r2, [r7, #22]
 800a650:	429a      	cmp	r2, r3
 800a652:	d004      	beq.n	800a65e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	8afa      	ldrh	r2, [r7, #22]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d109      	bne.n	800a672 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a65e:	4b08      	ldr	r3, [pc, #32]	@ (800a680 <mem_link_valid+0x74>)
 800a660:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	429a      	cmp	r2, r3
 800a666:	d006      	beq.n	800a676 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	885b      	ldrh	r3, [r3, #2]
 800a66c:	8afa      	ldrh	r2, [r7, #22]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d001      	beq.n	800a676 <mem_link_valid+0x6a>
    return 0;
 800a672:	2300      	movs	r3, #0
 800a674:	e000      	b.n	800a678 <mem_link_valid+0x6c>
  }
  return 1;
 800a676:	2301      	movs	r3, #1
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	2000a700 	.word	0x2000a700

0800a684 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d070      	beq.n	800a774 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f003 0303 	and.w	r3, r3, #3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00d      	beq.n	800a6b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a69c:	4b37      	ldr	r3, [pc, #220]	@ (800a77c <mem_free+0xf8>)
 800a69e:	f240 2273 	movw	r2, #627	@ 0x273
 800a6a2:	4937      	ldr	r1, [pc, #220]	@ (800a780 <mem_free+0xfc>)
 800a6a4:	4837      	ldr	r0, [pc, #220]	@ (800a784 <mem_free+0x100>)
 800a6a6:	f00a f995 	bl	80149d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6aa:	f00a f875 	bl	8014798 <sys_arch_protect>
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f00a f87f 	bl	80147b4 <sys_arch_unprotect>
    return;
 800a6b6:	e05e      	b.n	800a776 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3b08      	subs	r3, #8
 800a6bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6be:	4b32      	ldr	r3, [pc, #200]	@ (800a788 <mem_free+0x104>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d306      	bcc.n	800a6d6 <mem_free+0x52>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f103 020c 	add.w	r2, r3, #12
 800a6ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a78c <mem_free+0x108>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d90d      	bls.n	800a6f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6d6:	4b29      	ldr	r3, [pc, #164]	@ (800a77c <mem_free+0xf8>)
 800a6d8:	f240 227f 	movw	r2, #639	@ 0x27f
 800a6dc:	492c      	ldr	r1, [pc, #176]	@ (800a790 <mem_free+0x10c>)
 800a6de:	4829      	ldr	r0, [pc, #164]	@ (800a784 <mem_free+0x100>)
 800a6e0:	f00a f978 	bl	80149d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6e4:	f00a f858 	bl	8014798 <sys_arch_protect>
 800a6e8:	6138      	str	r0, [r7, #16]
 800a6ea:	6938      	ldr	r0, [r7, #16]
 800a6ec:	f00a f862 	bl	80147b4 <sys_arch_unprotect>
    return;
 800a6f0:	e041      	b.n	800a776 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6f2:	4828      	ldr	r0, [pc, #160]	@ (800a794 <mem_free+0x110>)
 800a6f4:	f00a f80e 	bl	8014714 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d110      	bne.n	800a722 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a700:	4b1e      	ldr	r3, [pc, #120]	@ (800a77c <mem_free+0xf8>)
 800a702:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a706:	4924      	ldr	r1, [pc, #144]	@ (800a798 <mem_free+0x114>)
 800a708:	481e      	ldr	r0, [pc, #120]	@ (800a784 <mem_free+0x100>)
 800a70a:	f00a f963 	bl	80149d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a70e:	4821      	ldr	r0, [pc, #132]	@ (800a794 <mem_free+0x110>)
 800a710:	f00a f80f 	bl	8014732 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a714:	f00a f840 	bl	8014798 <sys_arch_protect>
 800a718:	6178      	str	r0, [r7, #20]
 800a71a:	6978      	ldr	r0, [r7, #20]
 800a71c:	f00a f84a 	bl	80147b4 <sys_arch_unprotect>
    return;
 800a720:	e029      	b.n	800a776 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a722:	69f8      	ldr	r0, [r7, #28]
 800a724:	f7ff ff72 	bl	800a60c <mem_link_valid>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d110      	bne.n	800a750 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a72e:	4b13      	ldr	r3, [pc, #76]	@ (800a77c <mem_free+0xf8>)
 800a730:	f240 2295 	movw	r2, #661	@ 0x295
 800a734:	4919      	ldr	r1, [pc, #100]	@ (800a79c <mem_free+0x118>)
 800a736:	4813      	ldr	r0, [pc, #76]	@ (800a784 <mem_free+0x100>)
 800a738:	f00a f94c 	bl	80149d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a73c:	4815      	ldr	r0, [pc, #84]	@ (800a794 <mem_free+0x110>)
 800a73e:	f009 fff8 	bl	8014732 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a742:	f00a f829 	bl	8014798 <sys_arch_protect>
 800a746:	61b8      	str	r0, [r7, #24]
 800a748:	69b8      	ldr	r0, [r7, #24]
 800a74a:	f00a f833 	bl	80147b4 <sys_arch_unprotect>
    return;
 800a74e:	e012      	b.n	800a776 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	2200      	movs	r2, #0
 800a754:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a756:	4b12      	ldr	r3, [pc, #72]	@ (800a7a0 <mem_free+0x11c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d202      	bcs.n	800a766 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a760:	4a0f      	ldr	r2, [pc, #60]	@ (800a7a0 <mem_free+0x11c>)
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a766:	69f8      	ldr	r0, [r7, #28]
 800a768:	f7ff fe5c 	bl	800a424 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a76c:	4809      	ldr	r0, [pc, #36]	@ (800a794 <mem_free+0x110>)
 800a76e:	f009 ffe0 	bl	8014732 <sys_mutex_unlock>
 800a772:	e000      	b.n	800a776 <mem_free+0xf2>
    return;
 800a774:	bf00      	nop
}
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	08015a3c 	.word	0x08015a3c
 800a780:	08015b2c 	.word	0x08015b2c
 800a784:	08015a84 	.word	0x08015a84
 800a788:	2000a6fc 	.word	0x2000a6fc
 800a78c:	2000a700 	.word	0x2000a700
 800a790:	08015b50 	.word	0x08015b50
 800a794:	2000a704 	.word	0x2000a704
 800a798:	08015b6c 	.word	0x08015b6c
 800a79c:	08015b94 	.word	0x08015b94
 800a7a0:	2000a708 	.word	0x2000a708

0800a7a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a7b0:	887b      	ldrh	r3, [r7, #2]
 800a7b2:	3303      	adds	r3, #3
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	f023 0303 	bic.w	r3, r3, #3
 800a7ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a7bc:	8bfb      	ldrh	r3, [r7, #30]
 800a7be:	2b0b      	cmp	r3, #11
 800a7c0:	d801      	bhi.n	800a7c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a7c2:	230c      	movs	r3, #12
 800a7c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a7c6:	8bfb      	ldrh	r3, [r7, #30]
 800a7c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a7cc:	d803      	bhi.n	800a7d6 <mem_trim+0x32>
 800a7ce:	8bfa      	ldrh	r2, [r7, #30]
 800a7d0:	887b      	ldrh	r3, [r7, #2]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d201      	bcs.n	800a7da <mem_trim+0x36>
    return NULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	e0d8      	b.n	800a98c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7da:	4b6e      	ldr	r3, [pc, #440]	@ (800a994 <mem_trim+0x1f0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d304      	bcc.n	800a7ee <mem_trim+0x4a>
 800a7e4:	4b6c      	ldr	r3, [pc, #432]	@ (800a998 <mem_trim+0x1f4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d306      	bcc.n	800a7fc <mem_trim+0x58>
 800a7ee:	4b6b      	ldr	r3, [pc, #428]	@ (800a99c <mem_trim+0x1f8>)
 800a7f0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a7f4:	496a      	ldr	r1, [pc, #424]	@ (800a9a0 <mem_trim+0x1fc>)
 800a7f6:	486b      	ldr	r0, [pc, #428]	@ (800a9a4 <mem_trim+0x200>)
 800a7f8:	f00a f8ec 	bl	80149d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7fc:	4b65      	ldr	r3, [pc, #404]	@ (800a994 <mem_trim+0x1f0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	429a      	cmp	r2, r3
 800a804:	d304      	bcc.n	800a810 <mem_trim+0x6c>
 800a806:	4b64      	ldr	r3, [pc, #400]	@ (800a998 <mem_trim+0x1f4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d307      	bcc.n	800a820 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a810:	f009 ffc2 	bl	8014798 <sys_arch_protect>
 800a814:	60b8      	str	r0, [r7, #8]
 800a816:	68b8      	ldr	r0, [r7, #8]
 800a818:	f009 ffcc 	bl	80147b4 <sys_arch_unprotect>
    return rmem;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	e0b5      	b.n	800a98c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3b08      	subs	r3, #8
 800a824:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a826:	69b8      	ldr	r0, [r7, #24]
 800a828:	f7ff fdea 	bl	800a400 <mem_to_ptr>
 800a82c:	4603      	mov	r3, r0
 800a82e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	881a      	ldrh	r2, [r3, #0]
 800a834:	8afb      	ldrh	r3, [r7, #22]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	b29b      	uxth	r3, r3
 800a83a:	3b08      	subs	r3, #8
 800a83c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a83e:	8bfa      	ldrh	r2, [r7, #30]
 800a840:	8abb      	ldrh	r3, [r7, #20]
 800a842:	429a      	cmp	r2, r3
 800a844:	d906      	bls.n	800a854 <mem_trim+0xb0>
 800a846:	4b55      	ldr	r3, [pc, #340]	@ (800a99c <mem_trim+0x1f8>)
 800a848:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a84c:	4956      	ldr	r1, [pc, #344]	@ (800a9a8 <mem_trim+0x204>)
 800a84e:	4855      	ldr	r0, [pc, #340]	@ (800a9a4 <mem_trim+0x200>)
 800a850:	f00a f8c0 	bl	80149d4 <iprintf>
  if (newsize > size) {
 800a854:	8bfa      	ldrh	r2, [r7, #30]
 800a856:	8abb      	ldrh	r3, [r7, #20]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d901      	bls.n	800a860 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	e095      	b.n	800a98c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a860:	8bfa      	ldrh	r2, [r7, #30]
 800a862:	8abb      	ldrh	r3, [r7, #20]
 800a864:	429a      	cmp	r2, r3
 800a866:	d101      	bne.n	800a86c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	e08f      	b.n	800a98c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a86c:	484f      	ldr	r0, [pc, #316]	@ (800a9ac <mem_trim+0x208>)
 800a86e:	f009 ff51 	bl	8014714 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff fdb0 	bl	800a3dc <ptr_to_mem>
 800a87c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	791b      	ldrb	r3, [r3, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d13f      	bne.n	800a906 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a88e:	d106      	bne.n	800a89e <mem_trim+0xfa>
 800a890:	4b42      	ldr	r3, [pc, #264]	@ (800a99c <mem_trim+0x1f8>)
 800a892:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a896:	4946      	ldr	r1, [pc, #280]	@ (800a9b0 <mem_trim+0x20c>)
 800a898:	4842      	ldr	r0, [pc, #264]	@ (800a9a4 <mem_trim+0x200>)
 800a89a:	f00a f89b 	bl	80149d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8a4:	8afa      	ldrh	r2, [r7, #22]
 800a8a6:	8bfb      	ldrh	r3, [r7, #30]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	3308      	adds	r3, #8
 800a8ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a8b0:	4b40      	ldr	r3, [pc, #256]	@ (800a9b4 <mem_trim+0x210>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d106      	bne.n	800a8c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a8ba:	89fb      	ldrh	r3, [r7, #14]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff fd8d 	bl	800a3dc <ptr_to_mem>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	4a3b      	ldr	r2, [pc, #236]	@ (800a9b4 <mem_trim+0x210>)
 800a8c6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a8c8:	89fb      	ldrh	r3, [r7, #14]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7ff fd86 	bl	800a3dc <ptr_to_mem>
 800a8d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	89ba      	ldrh	r2, [r7, #12]
 800a8dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	8afa      	ldrh	r2, [r7, #22]
 800a8e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	89fa      	ldrh	r2, [r7, #14]
 800a8e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a8f2:	d047      	beq.n	800a984 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fd6f 	bl	800a3dc <ptr_to_mem>
 800a8fe:	4602      	mov	r2, r0
 800a900:	89fb      	ldrh	r3, [r7, #14]
 800a902:	8053      	strh	r3, [r2, #2]
 800a904:	e03e      	b.n	800a984 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a906:	8bfb      	ldrh	r3, [r7, #30]
 800a908:	f103 0214 	add.w	r2, r3, #20
 800a90c:	8abb      	ldrh	r3, [r7, #20]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d838      	bhi.n	800a984 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a912:	8afa      	ldrh	r2, [r7, #22]
 800a914:	8bfb      	ldrh	r3, [r7, #30]
 800a916:	4413      	add	r3, r2
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3308      	adds	r3, #8
 800a91c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a926:	d106      	bne.n	800a936 <mem_trim+0x192>
 800a928:	4b1c      	ldr	r3, [pc, #112]	@ (800a99c <mem_trim+0x1f8>)
 800a92a:	f240 3216 	movw	r2, #790	@ 0x316
 800a92e:	4920      	ldr	r1, [pc, #128]	@ (800a9b0 <mem_trim+0x20c>)
 800a930:	481c      	ldr	r0, [pc, #112]	@ (800a9a4 <mem_trim+0x200>)
 800a932:	f00a f84f 	bl	80149d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a936:	89fb      	ldrh	r3, [r7, #14]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff fd4f 	bl	800a3dc <ptr_to_mem>
 800a93e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a940:	4b1c      	ldr	r3, [pc, #112]	@ (800a9b4 <mem_trim+0x210>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	429a      	cmp	r2, r3
 800a948:	d202      	bcs.n	800a950 <mem_trim+0x1ac>
      lfree = mem2;
 800a94a:	4a1a      	ldr	r2, [pc, #104]	@ (800a9b4 <mem_trim+0x210>)
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2200      	movs	r2, #0
 800a954:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	881a      	ldrh	r2, [r3, #0]
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	8afa      	ldrh	r2, [r7, #22]
 800a962:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	89fa      	ldrh	r2, [r7, #14]
 800a968:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a972:	d007      	beq.n	800a984 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff fd2f 	bl	800a3dc <ptr_to_mem>
 800a97e:	4602      	mov	r2, r0
 800a980:	89fb      	ldrh	r3, [r7, #14]
 800a982:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a984:	4809      	ldr	r0, [pc, #36]	@ (800a9ac <mem_trim+0x208>)
 800a986:	f009 fed4 	bl	8014732 <sys_mutex_unlock>
  return rmem;
 800a98a:	687b      	ldr	r3, [r7, #4]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3720      	adds	r7, #32
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	2000a6fc 	.word	0x2000a6fc
 800a998:	2000a700 	.word	0x2000a700
 800a99c:	08015a3c 	.word	0x08015a3c
 800a9a0:	08015bc8 	.word	0x08015bc8
 800a9a4:	08015a84 	.word	0x08015a84
 800a9a8:	08015be0 	.word	0x08015be0
 800a9ac:	2000a704 	.word	0x2000a704
 800a9b0:	08015c00 	.word	0x08015c00
 800a9b4:	2000a708 	.word	0x2000a708

0800a9b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <mem_malloc+0x14>
    return NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e0e2      	b.n	800ab92 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	3303      	adds	r3, #3
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	f023 0303 	bic.w	r3, r3, #3
 800a9d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a9d8:	8bbb      	ldrh	r3, [r7, #28]
 800a9da:	2b0b      	cmp	r3, #11
 800a9dc:	d801      	bhi.n	800a9e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a9de:	230c      	movs	r3, #12
 800a9e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9e2:	8bbb      	ldrh	r3, [r7, #28]
 800a9e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a9e8:	d803      	bhi.n	800a9f2 <mem_malloc+0x3a>
 800a9ea:	8bba      	ldrh	r2, [r7, #28]
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d201      	bcs.n	800a9f6 <mem_malloc+0x3e>
    return NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	e0cd      	b.n	800ab92 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9f6:	4869      	ldr	r0, [pc, #420]	@ (800ab9c <mem_malloc+0x1e4>)
 800a9f8:	f009 fe8c 	bl	8014714 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9fc:	4b68      	ldr	r3, [pc, #416]	@ (800aba0 <mem_malloc+0x1e8>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff fcfd 	bl	800a400 <mem_to_ptr>
 800aa06:	4603      	mov	r3, r0
 800aa08:	83fb      	strh	r3, [r7, #30]
 800aa0a:	e0b7      	b.n	800ab7c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aa0c:	8bfb      	ldrh	r3, [r7, #30]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff fce4 	bl	800a3dc <ptr_to_mem>
 800aa14:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	791b      	ldrb	r3, [r3, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f040 80a7 	bne.w	800ab6e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	461a      	mov	r2, r3
 800aa26:	8bfb      	ldrh	r3, [r7, #30]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	f1a3 0208 	sub.w	r2, r3, #8
 800aa2e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aa30:	429a      	cmp	r2, r3
 800aa32:	f0c0 809c 	bcc.w	800ab6e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	8bfb      	ldrh	r3, [r7, #30]
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	f1a3 0208 	sub.w	r2, r3, #8
 800aa44:	8bbb      	ldrh	r3, [r7, #28]
 800aa46:	3314      	adds	r3, #20
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d333      	bcc.n	800aab4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa4c:	8bfa      	ldrh	r2, [r7, #30]
 800aa4e:	8bbb      	ldrh	r3, [r7, #28]
 800aa50:	4413      	add	r3, r2
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	3308      	adds	r3, #8
 800aa56:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa58:	8a7b      	ldrh	r3, [r7, #18]
 800aa5a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aa5e:	d106      	bne.n	800aa6e <mem_malloc+0xb6>
 800aa60:	4b50      	ldr	r3, [pc, #320]	@ (800aba4 <mem_malloc+0x1ec>)
 800aa62:	f240 3287 	movw	r2, #903	@ 0x387
 800aa66:	4950      	ldr	r1, [pc, #320]	@ (800aba8 <mem_malloc+0x1f0>)
 800aa68:	4850      	ldr	r0, [pc, #320]	@ (800abac <mem_malloc+0x1f4>)
 800aa6a:	f009 ffb3 	bl	80149d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa6e:	8a7b      	ldrh	r3, [r7, #18]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fcb3 	bl	800a3dc <ptr_to_mem>
 800aa76:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	881a      	ldrh	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	8bfa      	ldrh	r2, [r7, #30]
 800aa8a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	8a7a      	ldrh	r2, [r7, #18]
 800aa90:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2201      	movs	r2, #1
 800aa96:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800aaa0:	d00b      	beq.n	800aaba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	881b      	ldrh	r3, [r3, #0]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff fc98 	bl	800a3dc <ptr_to_mem>
 800aaac:	4602      	mov	r2, r0
 800aaae:	8a7b      	ldrh	r3, [r7, #18]
 800aab0:	8053      	strh	r3, [r2, #2]
 800aab2:	e002      	b.n	800aaba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2201      	movs	r2, #1
 800aab8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aaba:	4b39      	ldr	r3, [pc, #228]	@ (800aba0 <mem_malloc+0x1e8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d127      	bne.n	800ab14 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800aac4:	4b36      	ldr	r3, [pc, #216]	@ (800aba0 <mem_malloc+0x1e8>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aaca:	e005      	b.n	800aad8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fc83 	bl	800a3dc <ptr_to_mem>
 800aad6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	791b      	ldrb	r3, [r3, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <mem_malloc+0x132>
 800aae0:	4b33      	ldr	r3, [pc, #204]	@ (800abb0 <mem_malloc+0x1f8>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d1f0      	bne.n	800aacc <mem_malloc+0x114>
          }
          lfree = cur;
 800aaea:	4a2d      	ldr	r2, [pc, #180]	@ (800aba0 <mem_malloc+0x1e8>)
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aaf0:	4b2b      	ldr	r3, [pc, #172]	@ (800aba0 <mem_malloc+0x1e8>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	4b2e      	ldr	r3, [pc, #184]	@ (800abb0 <mem_malloc+0x1f8>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d00b      	beq.n	800ab14 <mem_malloc+0x15c>
 800aafc:	4b28      	ldr	r3, [pc, #160]	@ (800aba0 <mem_malloc+0x1e8>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	791b      	ldrb	r3, [r3, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d006      	beq.n	800ab14 <mem_malloc+0x15c>
 800ab06:	4b27      	ldr	r3, [pc, #156]	@ (800aba4 <mem_malloc+0x1ec>)
 800ab08:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800ab0c:	4929      	ldr	r1, [pc, #164]	@ (800abb4 <mem_malloc+0x1fc>)
 800ab0e:	4827      	ldr	r0, [pc, #156]	@ (800abac <mem_malloc+0x1f4>)
 800ab10:	f009 ff60 	bl	80149d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ab14:	4821      	ldr	r0, [pc, #132]	@ (800ab9c <mem_malloc+0x1e4>)
 800ab16:	f009 fe0c 	bl	8014732 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ab1a:	8bba      	ldrh	r2, [r7, #28]
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	4413      	add	r3, r2
 800ab20:	3308      	adds	r3, #8
 800ab22:	4a23      	ldr	r2, [pc, #140]	@ (800abb0 <mem_malloc+0x1f8>)
 800ab24:	6812      	ldr	r2, [r2, #0]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d906      	bls.n	800ab38 <mem_malloc+0x180>
 800ab2a:	4b1e      	ldr	r3, [pc, #120]	@ (800aba4 <mem_malloc+0x1ec>)
 800ab2c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800ab30:	4921      	ldr	r1, [pc, #132]	@ (800abb8 <mem_malloc+0x200>)
 800ab32:	481e      	ldr	r0, [pc, #120]	@ (800abac <mem_malloc+0x1f4>)
 800ab34:	f009 ff4e 	bl	80149d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <mem_malloc+0x198>
 800ab42:	4b18      	ldr	r3, [pc, #96]	@ (800aba4 <mem_malloc+0x1ec>)
 800ab44:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800ab48:	491c      	ldr	r1, [pc, #112]	@ (800abbc <mem_malloc+0x204>)
 800ab4a:	4818      	ldr	r0, [pc, #96]	@ (800abac <mem_malloc+0x1f4>)
 800ab4c:	f009 ff42 	bl	80149d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f003 0303 	and.w	r3, r3, #3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d006      	beq.n	800ab68 <mem_malloc+0x1b0>
 800ab5a:	4b12      	ldr	r3, [pc, #72]	@ (800aba4 <mem_malloc+0x1ec>)
 800ab5c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800ab60:	4917      	ldr	r1, [pc, #92]	@ (800abc0 <mem_malloc+0x208>)
 800ab62:	4812      	ldr	r0, [pc, #72]	@ (800abac <mem_malloc+0x1f4>)
 800ab64:	f009 ff36 	bl	80149d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	e011      	b.n	800ab92 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ab6e:	8bfb      	ldrh	r3, [r7, #30]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fc33 	bl	800a3dc <ptr_to_mem>
 800ab76:	4603      	mov	r3, r0
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab7c:	8bfa      	ldrh	r2, [r7, #30]
 800ab7e:	8bbb      	ldrh	r3, [r7, #28]
 800ab80:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800ab84:	429a      	cmp	r2, r3
 800ab86:	f4ff af41 	bcc.w	800aa0c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ab8a:	4804      	ldr	r0, [pc, #16]	@ (800ab9c <mem_malloc+0x1e4>)
 800ab8c:	f009 fdd1 	bl	8014732 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3720      	adds	r7, #32
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	2000a704 	.word	0x2000a704
 800aba0:	2000a708 	.word	0x2000a708
 800aba4:	08015a3c 	.word	0x08015a3c
 800aba8:	08015c00 	.word	0x08015c00
 800abac:	08015a84 	.word	0x08015a84
 800abb0:	2000a700 	.word	0x2000a700
 800abb4:	08015c14 	.word	0x08015c14
 800abb8:	08015c30 	.word	0x08015c30
 800abbc:	08015c60 	.word	0x08015c60
 800abc0:	08015c90 	.word	0x08015c90

0800abc4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	3303      	adds	r3, #3
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e011      	b.n	800ac0a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	4413      	add	r3, r2
 800ac02:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3301      	adds	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	885b      	ldrh	r3, [r3, #2]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4293      	cmp	r3, r2
 800ac14:	dbe7      	blt.n	800abe6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ac16:	bf00      	nop
 800ac18:	bf00      	nop
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	80fb      	strh	r3, [r7, #6]
 800ac2e:	e009      	b.n	800ac44 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ac30:	88fb      	ldrh	r3, [r7, #6]
 800ac32:	4a08      	ldr	r2, [pc, #32]	@ (800ac54 <memp_init+0x30>)
 800ac34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7ff ffc3 	bl	800abc4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	3301      	adds	r3, #1
 800ac42:	80fb      	strh	r3, [r7, #6]
 800ac44:	88fb      	ldrh	r3, [r7, #6]
 800ac46:	2b0c      	cmp	r3, #12
 800ac48:	d9f2      	bls.n	800ac30 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ac4a:	bf00      	nop
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	080184a4 	.word	0x080184a4

0800ac58 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac60:	f009 fd9a 	bl	8014798 <sys_arch_protect>
 800ac64:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d015      	beq.n	800aca0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	6812      	ldr	r2, [r2, #0]
 800ac7c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f003 0303 	and.w	r3, r3, #3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d006      	beq.n	800ac96 <do_memp_malloc_pool+0x3e>
 800ac88:	4b09      	ldr	r3, [pc, #36]	@ (800acb0 <do_memp_malloc_pool+0x58>)
 800ac8a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ac8e:	4909      	ldr	r1, [pc, #36]	@ (800acb4 <do_memp_malloc_pool+0x5c>)
 800ac90:	4809      	ldr	r0, [pc, #36]	@ (800acb8 <do_memp_malloc_pool+0x60>)
 800ac92:	f009 fe9f 	bl	80149d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f009 fd8c 	bl	80147b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	e003      	b.n	800aca8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f009 fd87 	bl	80147b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	08015cb4 	.word	0x08015cb4
 800acb4:	08015ce4 	.word	0x08015ce4
 800acb8:	08015d08 	.word	0x08015d08

0800acbc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <memp_malloc_pool+0x1c>
 800acca:	4b0a      	ldr	r3, [pc, #40]	@ (800acf4 <memp_malloc_pool+0x38>)
 800accc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800acd0:	4909      	ldr	r1, [pc, #36]	@ (800acf8 <memp_malloc_pool+0x3c>)
 800acd2:	480a      	ldr	r0, [pc, #40]	@ (800acfc <memp_malloc_pool+0x40>)
 800acd4:	f009 fe7e 	bl	80149d4 <iprintf>
  if (desc == NULL) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <memp_malloc_pool+0x26>
    return NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	e003      	b.n	800acea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff ffb8 	bl	800ac58 <do_memp_malloc_pool>
 800ace8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	08015cb4 	.word	0x08015cb4
 800acf8:	08015d30 	.word	0x08015d30
 800acfc:	08015d08 	.word	0x08015d08

0800ad00 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	2b0c      	cmp	r3, #12
 800ad0e:	d908      	bls.n	800ad22 <memp_malloc+0x22>
 800ad10:	4b0a      	ldr	r3, [pc, #40]	@ (800ad3c <memp_malloc+0x3c>)
 800ad12:	f240 1257 	movw	r2, #343	@ 0x157
 800ad16:	490a      	ldr	r1, [pc, #40]	@ (800ad40 <memp_malloc+0x40>)
 800ad18:	480a      	ldr	r0, [pc, #40]	@ (800ad44 <memp_malloc+0x44>)
 800ad1a:	f009 fe5b 	bl	80149d4 <iprintf>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e008      	b.n	800ad34 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	4a08      	ldr	r2, [pc, #32]	@ (800ad48 <memp_malloc+0x48>)
 800ad26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff ff94 	bl	800ac58 <do_memp_malloc_pool>
 800ad30:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ad32:	68fb      	ldr	r3, [r7, #12]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	08015cb4 	.word	0x08015cb4
 800ad40:	08015d44 	.word	0x08015d44
 800ad44:	08015d08 	.word	0x08015d08
 800ad48:	080184a4 	.word	0x080184a4

0800ad4c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d006      	beq.n	800ad6e <do_memp_free_pool+0x22>
 800ad60:	4b0d      	ldr	r3, [pc, #52]	@ (800ad98 <do_memp_free_pool+0x4c>)
 800ad62:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ad66:	490d      	ldr	r1, [pc, #52]	@ (800ad9c <do_memp_free_pool+0x50>)
 800ad68:	480d      	ldr	r0, [pc, #52]	@ (800ada0 <do_memp_free_pool+0x54>)
 800ad6a:	f009 fe33 	bl	80149d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ad72:	f009 fd11 	bl	8014798 <sys_arch_protect>
 800ad76:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ad8a:	68b8      	ldr	r0, [r7, #8]
 800ad8c:	f009 fd12 	bl	80147b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ad90:	bf00      	nop
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	08015cb4 	.word	0x08015cb4
 800ad9c:	08015d64 	.word	0x08015d64
 800ada0:	08015d08 	.word	0x08015d08

0800ada4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d106      	bne.n	800adc2 <memp_free_pool+0x1e>
 800adb4:	4b0a      	ldr	r3, [pc, #40]	@ (800ade0 <memp_free_pool+0x3c>)
 800adb6:	f240 1295 	movw	r2, #405	@ 0x195
 800adba:	490a      	ldr	r1, [pc, #40]	@ (800ade4 <memp_free_pool+0x40>)
 800adbc:	480a      	ldr	r0, [pc, #40]	@ (800ade8 <memp_free_pool+0x44>)
 800adbe:	f009 fe09 	bl	80149d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d007      	beq.n	800add8 <memp_free_pool+0x34>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d004      	beq.n	800add8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff ffbb 	bl	800ad4c <do_memp_free_pool>
 800add6:	e000      	b.n	800adda <memp_free_pool+0x36>
    return;
 800add8:	bf00      	nop
}
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	08015cb4 	.word	0x08015cb4
 800ade4:	08015d30 	.word	0x08015d30
 800ade8:	08015d08 	.word	0x08015d08

0800adec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	6039      	str	r1, [r7, #0]
 800adf6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	2b0c      	cmp	r3, #12
 800adfc:	d907      	bls.n	800ae0e <memp_free+0x22>
 800adfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ae30 <memp_free+0x44>)
 800ae00:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ae04:	490b      	ldr	r1, [pc, #44]	@ (800ae34 <memp_free+0x48>)
 800ae06:	480c      	ldr	r0, [pc, #48]	@ (800ae38 <memp_free+0x4c>)
 800ae08:	f009 fde4 	bl	80149d4 <iprintf>
 800ae0c:	e00c      	b.n	800ae28 <memp_free+0x3c>

  if (mem == NULL) {
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d008      	beq.n	800ae26 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	4a09      	ldr	r2, [pc, #36]	@ (800ae3c <memp_free+0x50>)
 800ae18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff ff94 	bl	800ad4c <do_memp_free_pool>
 800ae24:	e000      	b.n	800ae28 <memp_free+0x3c>
    return;
 800ae26:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	08015cb4 	.word	0x08015cb4
 800ae34:	08015d84 	.word	0x08015d84
 800ae38:	08015d08 	.word	0x08015d08
 800ae3c:	080184a4 	.word	0x080184a4

0800ae40 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ae44:	bf00      	nop
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
	...

0800ae50 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d108      	bne.n	800ae76 <netif_add+0x26>
 800ae64:	4b57      	ldr	r3, [pc, #348]	@ (800afc4 <netif_add+0x174>)
 800ae66:	f240 1227 	movw	r2, #295	@ 0x127
 800ae6a:	4957      	ldr	r1, [pc, #348]	@ (800afc8 <netif_add+0x178>)
 800ae6c:	4857      	ldr	r0, [pc, #348]	@ (800afcc <netif_add+0x17c>)
 800ae6e:	f009 fdb1 	bl	80149d4 <iprintf>
 800ae72:	2300      	movs	r3, #0
 800ae74:	e0a2      	b.n	800afbc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d108      	bne.n	800ae8e <netif_add+0x3e>
 800ae7c:	4b51      	ldr	r3, [pc, #324]	@ (800afc4 <netif_add+0x174>)
 800ae7e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ae82:	4953      	ldr	r1, [pc, #332]	@ (800afd0 <netif_add+0x180>)
 800ae84:	4851      	ldr	r0, [pc, #324]	@ (800afcc <netif_add+0x17c>)
 800ae86:	f009 fda5 	bl	80149d4 <iprintf>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e096      	b.n	800afbc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae94:	4b4f      	ldr	r3, [pc, #316]	@ (800afd4 <netif_add+0x184>)
 800ae96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae9e:	4b4d      	ldr	r3, [pc, #308]	@ (800afd4 <netif_add+0x184>)
 800aea0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aea8:	4b4a      	ldr	r3, [pc, #296]	@ (800afd4 <netif_add+0x184>)
 800aeaa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	4a45      	ldr	r2, [pc, #276]	@ (800afd8 <netif_add+0x188>)
 800aec2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6a3a      	ldr	r2, [r7, #32]
 800aedc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aede:	4b3f      	ldr	r3, [pc, #252]	@ (800afdc <netif_add+0x18c>)
 800aee0:	781a      	ldrb	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 f913 	bl	800b120 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	4798      	blx	r3
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <netif_add+0xba>
    return NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	e058      	b.n	800afbc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af10:	2bff      	cmp	r3, #255	@ 0xff
 800af12:	d103      	bne.n	800af1c <netif_add+0xcc>
        netif->num = 0;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af20:	4b2f      	ldr	r3, [pc, #188]	@ (800afe0 <netif_add+0x190>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	e02b      	b.n	800af80 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d106      	bne.n	800af3e <netif_add+0xee>
 800af30:	4b24      	ldr	r3, [pc, #144]	@ (800afc4 <netif_add+0x174>)
 800af32:	f240 128b 	movw	r2, #395	@ 0x18b
 800af36:	492b      	ldr	r1, [pc, #172]	@ (800afe4 <netif_add+0x194>)
 800af38:	4824      	ldr	r0, [pc, #144]	@ (800afcc <netif_add+0x17c>)
 800af3a:	f009 fd4b 	bl	80149d4 <iprintf>
        num_netifs++;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	3301      	adds	r3, #1
 800af42:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2bff      	cmp	r3, #255	@ 0xff
 800af48:	dd06      	ble.n	800af58 <netif_add+0x108>
 800af4a:	4b1e      	ldr	r3, [pc, #120]	@ (800afc4 <netif_add+0x174>)
 800af4c:	f240 128d 	movw	r2, #397	@ 0x18d
 800af50:	4925      	ldr	r1, [pc, #148]	@ (800afe8 <netif_add+0x198>)
 800af52:	481e      	ldr	r0, [pc, #120]	@ (800afcc <netif_add+0x17c>)
 800af54:	f009 fd3e 	bl	80149d4 <iprintf>
        if (netif2->num == netif->num) {
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af64:	429a      	cmp	r2, r3
 800af66:	d108      	bne.n	800af7a <netif_add+0x12a>
          netif->num++;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af6e:	3301      	adds	r3, #1
 800af70:	b2da      	uxtb	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800af78:	e005      	b.n	800af86 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1d0      	bne.n	800af28 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1be      	bne.n	800af0a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af92:	2bfe      	cmp	r3, #254	@ 0xfe
 800af94:	d103      	bne.n	800af9e <netif_add+0x14e>
    netif_num = 0;
 800af96:	4b11      	ldr	r3, [pc, #68]	@ (800afdc <netif_add+0x18c>)
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
 800af9c:	e006      	b.n	800afac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800afa4:	3301      	adds	r3, #1
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	4b0c      	ldr	r3, [pc, #48]	@ (800afdc <netif_add+0x18c>)
 800afaa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afac:	4b0c      	ldr	r3, [pc, #48]	@ (800afe0 <netif_add+0x190>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800afb4:	4a0a      	ldr	r2, [pc, #40]	@ (800afe0 <netif_add+0x190>)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800afba:	68fb      	ldr	r3, [r7, #12]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	08015da0 	.word	0x08015da0
 800afc8:	08015e34 	.word	0x08015e34
 800afcc:	08015df0 	.word	0x08015df0
 800afd0:	08015e50 	.word	0x08015e50
 800afd4:	08018518 	.word	0x08018518
 800afd8:	0800b3fb 	.word	0x0800b3fb
 800afdc:	2000d7e0 	.word	0x2000d7e0
 800afe0:	2000d7d8 	.word	0x2000d7d8
 800afe4:	08015e74 	.word	0x08015e74
 800afe8:	08015e88 	.word	0x08015e88

0800afec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f002 fb8f 	bl	800d71c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f006 ff4b 	bl	8011e9c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b006:	bf00      	nop
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
	...

0800b010 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <netif_do_set_ipaddr+0x20>
 800b022:	4b1d      	ldr	r3, [pc, #116]	@ (800b098 <netif_do_set_ipaddr+0x88>)
 800b024:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b028:	491c      	ldr	r1, [pc, #112]	@ (800b09c <netif_do_set_ipaddr+0x8c>)
 800b02a:	481d      	ldr	r0, [pc, #116]	@ (800b0a0 <netif_do_set_ipaddr+0x90>)
 800b02c:	f009 fcd2 	bl	80149d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <netif_do_set_ipaddr+0x34>
 800b036:	4b18      	ldr	r3, [pc, #96]	@ (800b098 <netif_do_set_ipaddr+0x88>)
 800b038:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b03c:	4917      	ldr	r1, [pc, #92]	@ (800b09c <netif_do_set_ipaddr+0x8c>)
 800b03e:	4818      	ldr	r0, [pc, #96]	@ (800b0a0 <netif_do_set_ipaddr+0x90>)
 800b040:	f009 fcc8 	bl	80149d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3304      	adds	r3, #4
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d01c      	beq.n	800b08c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3304      	adds	r3, #4
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b062:	f107 0314 	add.w	r3, r7, #20
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff ffbf 	bl	800afec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <netif_do_set_ipaddr+0x6a>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	e000      	b.n	800b07c <netif_do_set_ipaddr+0x6c>
 800b07a:	2300      	movs	r3, #0
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b080:	2101      	movs	r1, #1
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 f8d2 	bl	800b22c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b088:	2301      	movs	r3, #1
 800b08a:	e000      	b.n	800b08e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	08015da0 	.word	0x08015da0
 800b09c:	08015eb8 	.word	0x08015eb8
 800b0a0:	08015df0 	.word	0x08015df0

0800b0a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d00a      	beq.n	800b0d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <netif_do_set_netmask+0x26>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	e000      	b.n	800b0cc <netif_do_set_netmask+0x28>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e000      	b.n	800b0d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b085      	sub	sp, #20
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d00a      	beq.n	800b112 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <netif_do_set_gw+0x26>
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	e000      	b.n	800b10a <netif_do_set_gw+0x28>
 800b108:	2300      	movs	r3, #0
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b13c:	4b1c      	ldr	r3, [pc, #112]	@ (800b1b0 <netif_set_addr+0x90>)
 800b13e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b146:	4b1a      	ldr	r3, [pc, #104]	@ (800b1b0 <netif_set_addr+0x90>)
 800b148:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b150:	4b17      	ldr	r3, [pc, #92]	@ (800b1b0 <netif_set_addr+0x90>)
 800b152:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <netif_set_addr+0x42>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <netif_set_addr+0x46>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <netif_set_addr+0x48>
 800b166:	2300      	movs	r3, #0
 800b168:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b170:	f107 0310 	add.w	r3, r7, #16
 800b174:	461a      	mov	r2, r3
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff ff49 	bl	800b010 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff ff8e 	bl	800b0a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f7ff ffa8 	bl	800b0e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b198:	f107 0310 	add.w	r3, r7, #16
 800b19c:	461a      	mov	r2, r3
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff ff35 	bl	800b010 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b1a6:	bf00      	nop
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	08018518 	.word	0x08018518

0800b1b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b1bc:	4a04      	ldr	r2, [pc, #16]	@ (800b1d0 <netif_set_default+0x1c>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b1c2:	bf00      	nop
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	2000d7dc 	.word	0x2000d7dc

0800b1d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d107      	bne.n	800b1f2 <netif_set_up+0x1e>
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b220 <netif_set_up+0x4c>)
 800b1e4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b1e8:	490e      	ldr	r1, [pc, #56]	@ (800b224 <netif_set_up+0x50>)
 800b1ea:	480f      	ldr	r0, [pc, #60]	@ (800b228 <netif_set_up+0x54>)
 800b1ec:	f009 fbf2 	bl	80149d4 <iprintf>
 800b1f0:	e013      	b.n	800b21a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10c      	bne.n	800b21a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b212:	2103      	movs	r1, #3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f809 	bl	800b22c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	08015da0 	.word	0x08015da0
 800b224:	08015f28 	.word	0x08015f28
 800b228:	08015df0 	.word	0x08015df0

0800b22c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <netif_issue_reports+0x20>
 800b23e:	4b18      	ldr	r3, [pc, #96]	@ (800b2a0 <netif_issue_reports+0x74>)
 800b240:	f240 326d 	movw	r2, #877	@ 0x36d
 800b244:	4917      	ldr	r1, [pc, #92]	@ (800b2a4 <netif_issue_reports+0x78>)
 800b246:	4818      	ldr	r0, [pc, #96]	@ (800b2a8 <netif_issue_reports+0x7c>)
 800b248:	f009 fbc4 	bl	80149d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	d01e      	beq.n	800b298 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b260:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b264:	2b00      	cmp	r3, #0
 800b266:	d017      	beq.n	800b298 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d013      	beq.n	800b29a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3304      	adds	r3, #4
 800b276:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b282:	f003 0308 	and.w	r3, r3, #8
 800b286:	2b00      	cmp	r3, #0
 800b288:	d007      	beq.n	800b29a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3304      	adds	r3, #4
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f007 fd6d 	bl	8012d70 <etharp_request>
 800b296:	e000      	b.n	800b29a <netif_issue_reports+0x6e>
    return;
 800b298:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	08015da0 	.word	0x08015da0
 800b2a4:	08015f44 	.word	0x08015f44
 800b2a8:	08015df0 	.word	0x08015df0

0800b2ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d107      	bne.n	800b2ca <netif_set_down+0x1e>
 800b2ba:	4b12      	ldr	r3, [pc, #72]	@ (800b304 <netif_set_down+0x58>)
 800b2bc:	f240 329b 	movw	r2, #923	@ 0x39b
 800b2c0:	4911      	ldr	r1, [pc, #68]	@ (800b308 <netif_set_down+0x5c>)
 800b2c2:	4812      	ldr	r0, [pc, #72]	@ (800b30c <netif_set_down+0x60>)
 800b2c4:	f009 fb86 	bl	80149d4 <iprintf>
 800b2c8:	e019      	b.n	800b2fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d012      	beq.n	800b2fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2de:	f023 0301 	bic.w	r3, r3, #1
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2f0:	f003 0308 	and.w	r3, r3, #8
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f007 f8f7 	bl	80124ec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08015da0 	.word	0x08015da0
 800b308:	08015f68 	.word	0x08015f68
 800b30c:	08015df0 	.word	0x08015df0

0800b310 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d107      	bne.n	800b32e <netif_set_link_up+0x1e>
 800b31e:	4b13      	ldr	r3, [pc, #76]	@ (800b36c <netif_set_link_up+0x5c>)
 800b320:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b324:	4912      	ldr	r1, [pc, #72]	@ (800b370 <netif_set_link_up+0x60>)
 800b326:	4813      	ldr	r0, [pc, #76]	@ (800b374 <netif_set_link_up+0x64>)
 800b328:	f009 fb54 	bl	80149d4 <iprintf>
 800b32c:	e01b      	b.n	800b366 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b334:	f003 0304 	and.w	r3, r3, #4
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d114      	bne.n	800b366 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b342:	f043 0304 	orr.w	r3, r3, #4
 800b346:	b2da      	uxtb	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b34e:	2103      	movs	r1, #3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff ff6b 	bl	800b22c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <netif_set_link_up+0x56>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	08015da0 	.word	0x08015da0
 800b370:	08015f88 	.word	0x08015f88
 800b374:	08015df0 	.word	0x08015df0

0800b378 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d107      	bne.n	800b396 <netif_set_link_down+0x1e>
 800b386:	4b11      	ldr	r3, [pc, #68]	@ (800b3cc <netif_set_link_down+0x54>)
 800b388:	f240 4206 	movw	r2, #1030	@ 0x406
 800b38c:	4910      	ldr	r1, [pc, #64]	@ (800b3d0 <netif_set_link_down+0x58>)
 800b38e:	4811      	ldr	r0, [pc, #68]	@ (800b3d4 <netif_set_link_down+0x5c>)
 800b390:	f009 fb20 	bl	80149d4 <iprintf>
 800b394:	e017      	b.n	800b3c6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d010      	beq.n	800b3c6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3aa:	f023 0304 	bic.w	r3, r3, #4
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <netif_set_link_down+0x4e>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	08015da0 	.word	0x08015da0
 800b3d0:	08015fac 	.word	0x08015fac
 800b3d4:	08015df0 	.word	0x08015df0

0800b3d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	61da      	str	r2, [r3, #28]
  }
}
 800b3ee:	bf00      	nop
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b085      	sub	sp, #20
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	60f8      	str	r0, [r7, #12]
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b406:	f06f 030b 	mvn.w	r3, #11
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
	...

0800b418 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b422:	79fb      	ldrb	r3, [r7, #7]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d013      	beq.n	800b450 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b428:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <netif_get_by_index+0x48>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	60fb      	str	r3, [r7, #12]
 800b42e:	e00c      	b.n	800b44a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b436:	3301      	adds	r3, #1
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	79fa      	ldrb	r2, [r7, #7]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d101      	bne.n	800b444 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	e006      	b.n	800b452 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1ef      	bne.n	800b430 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	2000d7d8 	.word	0x2000d7d8

0800b464 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b46a:	f009 f995 	bl	8014798 <sys_arch_protect>
 800b46e:	6038      	str	r0, [r7, #0]
 800b470:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a8 <pbuf_free_ooseq+0x44>)
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
 800b476:	6838      	ldr	r0, [r7, #0]
 800b478:	f009 f99c 	bl	80147b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b47c:	4b0b      	ldr	r3, [pc, #44]	@ (800b4ac <pbuf_free_ooseq+0x48>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	607b      	str	r3, [r7, #4]
 800b482:	e00a      	b.n	800b49a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f002 f983 	bl	800d798 <tcp_free_ooseq>
      return;
 800b492:	e005      	b.n	800b4a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	607b      	str	r3, [r7, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1f1      	bne.n	800b484 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	2000d7e1 	.word	0x2000d7e1
 800b4ac:	2000d7f0 	.word	0x2000d7f0

0800b4b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b4b8:	f7ff ffd4 	bl	800b464 <pbuf_free_ooseq>
}
 800b4bc:	bf00      	nop
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b4ca:	f009 f965 	bl	8014798 <sys_arch_protect>
 800b4ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b510 <pbuf_pool_is_empty+0x4c>)
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b510 <pbuf_pool_is_empty+0x4c>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f009 f969 	bl	80147b4 <sys_arch_unprotect>

  if (!queued) {
 800b4e2:	78fb      	ldrb	r3, [r7, #3]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10f      	bne.n	800b508 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	480a      	ldr	r0, [pc, #40]	@ (800b514 <pbuf_pool_is_empty+0x50>)
 800b4ec:	f7fe fea6 	bl	800a23c <tcpip_try_callback>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d008      	beq.n	800b508 <pbuf_pool_is_empty+0x44>
 800b4f6:	f009 f94f 	bl	8014798 <sys_arch_protect>
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	4b04      	ldr	r3, [pc, #16]	@ (800b510 <pbuf_pool_is_empty+0x4c>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	701a      	strb	r2, [r3, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f009 f956 	bl	80147b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b508:	bf00      	nop
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	2000d7e1 	.word	0x2000d7e1
 800b514:	0800b4b1 	.word	0x0800b4b1

0800b518 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4611      	mov	r1, r2
 800b524:	461a      	mov	r2, r3
 800b526:	460b      	mov	r3, r1
 800b528:	80fb      	strh	r3, [r7, #6]
 800b52a:	4613      	mov	r3, r2
 800b52c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	88fa      	ldrh	r2, [r7, #6]
 800b53e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	88ba      	ldrh	r2, [r7, #4]
 800b544:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b546:	8b3b      	ldrh	r3, [r7, #24]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	7f3a      	ldrb	r2, [r7, #28]
 800b552:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2201      	movs	r2, #1
 800b558:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	73da      	strb	r2, [r3, #15]
}
 800b560:	bf00      	nop
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b08c      	sub	sp, #48	@ 0x30
 800b570:	af02      	add	r7, sp, #8
 800b572:	4603      	mov	r3, r0
 800b574:	71fb      	strb	r3, [r7, #7]
 800b576:	460b      	mov	r3, r1
 800b578:	80bb      	strh	r3, [r7, #4]
 800b57a:	4613      	mov	r3, r2
 800b57c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b582:	887b      	ldrh	r3, [r7, #2]
 800b584:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b588:	d07f      	beq.n	800b68a <pbuf_alloc+0x11e>
 800b58a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b58e:	f300 80c8 	bgt.w	800b722 <pbuf_alloc+0x1b6>
 800b592:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b596:	d010      	beq.n	800b5ba <pbuf_alloc+0x4e>
 800b598:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b59c:	f300 80c1 	bgt.w	800b722 <pbuf_alloc+0x1b6>
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d002      	beq.n	800b5aa <pbuf_alloc+0x3e>
 800b5a4:	2b41      	cmp	r3, #65	@ 0x41
 800b5a6:	f040 80bc 	bne.w	800b722 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b5aa:	887a      	ldrh	r2, [r7, #2]
 800b5ac:	88bb      	ldrh	r3, [r7, #4]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	f000 f8d1 	bl	800b758 <pbuf_alloc_reference>
 800b5b6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b5b8:	e0bd      	b.n	800b736 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b5c2:	88bb      	ldrh	r3, [r7, #4]
 800b5c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b5c6:	200c      	movs	r0, #12
 800b5c8:	f7ff fb9a 	bl	800ad00 <memp_malloc>
 800b5cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d109      	bne.n	800b5e8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b5d4:	f7ff ff76 	bl	800b4c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b5de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5e0:	f000 faa8 	bl	800bb34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e0a7      	b.n	800b738 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b5e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b5ea:	3303      	adds	r3, #3
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	f023 0303 	bic.w	r3, r3, #3
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	8b7a      	ldrh	r2, [r7, #26]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	bf28      	it	cs
 800b600:	4613      	movcs	r3, r2
 800b602:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b604:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b606:	3310      	adds	r3, #16
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	4413      	add	r3, r2
 800b60c:	3303      	adds	r3, #3
 800b60e:	f023 0303 	bic.w	r3, r3, #3
 800b612:	4618      	mov	r0, r3
 800b614:	89f9      	ldrh	r1, [r7, #14]
 800b616:	8b7a      	ldrh	r2, [r7, #26]
 800b618:	2300      	movs	r3, #0
 800b61a:	9301      	str	r3, [sp, #4]
 800b61c:	887b      	ldrh	r3, [r7, #2]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	460b      	mov	r3, r1
 800b622:	4601      	mov	r1, r0
 800b624:	6938      	ldr	r0, [r7, #16]
 800b626:	f7ff ff77 	bl	800b518 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f003 0303 	and.w	r3, r3, #3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d006      	beq.n	800b644 <pbuf_alloc+0xd8>
 800b636:	4b42      	ldr	r3, [pc, #264]	@ (800b740 <pbuf_alloc+0x1d4>)
 800b638:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b63c:	4941      	ldr	r1, [pc, #260]	@ (800b744 <pbuf_alloc+0x1d8>)
 800b63e:	4842      	ldr	r0, [pc, #264]	@ (800b748 <pbuf_alloc+0x1dc>)
 800b640:	f009 f9c8 	bl	80149d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b644:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b646:	3303      	adds	r3, #3
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b650:	d106      	bne.n	800b660 <pbuf_alloc+0xf4>
 800b652:	4b3b      	ldr	r3, [pc, #236]	@ (800b740 <pbuf_alloc+0x1d4>)
 800b654:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b658:	493c      	ldr	r1, [pc, #240]	@ (800b74c <pbuf_alloc+0x1e0>)
 800b65a:	483b      	ldr	r0, [pc, #236]	@ (800b748 <pbuf_alloc+0x1dc>)
 800b65c:	f009 f9ba 	bl	80149d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b662:	2b00      	cmp	r3, #0
 800b664:	d102      	bne.n	800b66c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	627b      	str	r3, [r7, #36]	@ 0x24
 800b66a:	e002      	b.n	800b672 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b676:	8b7a      	ldrh	r2, [r7, #26]
 800b678:	89fb      	ldrh	r3, [r7, #14]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b67e:	2300      	movs	r3, #0
 800b680:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b682:	8b7b      	ldrh	r3, [r7, #26]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d19e      	bne.n	800b5c6 <pbuf_alloc+0x5a>
      break;
 800b688:	e055      	b.n	800b736 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b68a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b68c:	3303      	adds	r3, #3
 800b68e:	b29b      	uxth	r3, r3
 800b690:	f023 0303 	bic.w	r3, r3, #3
 800b694:	b29a      	uxth	r2, r3
 800b696:	88bb      	ldrh	r3, [r7, #4]
 800b698:	3303      	adds	r3, #3
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	f023 0303 	bic.w	r3, r3, #3
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	4413      	add	r3, r2
 800b6a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b6a6:	8b3b      	ldrh	r3, [r7, #24]
 800b6a8:	3310      	adds	r3, #16
 800b6aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6ac:	8b3a      	ldrh	r2, [r7, #24]
 800b6ae:	88bb      	ldrh	r3, [r7, #4]
 800b6b0:	3303      	adds	r3, #3
 800b6b2:	f023 0303 	bic.w	r3, r3, #3
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d306      	bcc.n	800b6c8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b6ba:	8afa      	ldrh	r2, [r7, #22]
 800b6bc:	88bb      	ldrh	r3, [r7, #4]
 800b6be:	3303      	adds	r3, #3
 800b6c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d201      	bcs.n	800b6cc <pbuf_alloc+0x160>
        return NULL;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	e035      	b.n	800b738 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b6cc:	8afb      	ldrh	r3, [r7, #22]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff f972 	bl	800a9b8 <mem_malloc>
 800b6d4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <pbuf_alloc+0x174>
        return NULL;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	e02b      	b.n	800b738 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b6e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6e2:	3310      	adds	r3, #16
 800b6e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6e6:	4413      	add	r3, r2
 800b6e8:	3303      	adds	r3, #3
 800b6ea:	f023 0303 	bic.w	r3, r3, #3
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	88b9      	ldrh	r1, [r7, #4]
 800b6f2:	88ba      	ldrh	r2, [r7, #4]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	887b      	ldrh	r3, [r7, #2]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4601      	mov	r1, r0
 800b700:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b702:	f7ff ff09 	bl	800b518 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d010      	beq.n	800b734 <pbuf_alloc+0x1c8>
 800b712:	4b0b      	ldr	r3, [pc, #44]	@ (800b740 <pbuf_alloc+0x1d4>)
 800b714:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b718:	490d      	ldr	r1, [pc, #52]	@ (800b750 <pbuf_alloc+0x1e4>)
 800b71a:	480b      	ldr	r0, [pc, #44]	@ (800b748 <pbuf_alloc+0x1dc>)
 800b71c:	f009 f95a 	bl	80149d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b720:	e008      	b.n	800b734 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b722:	4b07      	ldr	r3, [pc, #28]	@ (800b740 <pbuf_alloc+0x1d4>)
 800b724:	f240 1227 	movw	r2, #295	@ 0x127
 800b728:	490a      	ldr	r1, [pc, #40]	@ (800b754 <pbuf_alloc+0x1e8>)
 800b72a:	4807      	ldr	r0, [pc, #28]	@ (800b748 <pbuf_alloc+0x1dc>)
 800b72c:	f009 f952 	bl	80149d4 <iprintf>
      return NULL;
 800b730:	2300      	movs	r3, #0
 800b732:	e001      	b.n	800b738 <pbuf_alloc+0x1cc>
      break;
 800b734:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3728      	adds	r7, #40	@ 0x28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	08015fd0 	.word	0x08015fd0
 800b744:	08016000 	.word	0x08016000
 800b748:	08016030 	.word	0x08016030
 800b74c:	08016058 	.word	0x08016058
 800b750:	0801608c 	.word	0x0801608c
 800b754:	080160b8 	.word	0x080160b8

0800b758 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	807b      	strh	r3, [r7, #2]
 800b764:	4613      	mov	r3, r2
 800b766:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b768:	883b      	ldrh	r3, [r7, #0]
 800b76a:	2b41      	cmp	r3, #65	@ 0x41
 800b76c:	d009      	beq.n	800b782 <pbuf_alloc_reference+0x2a>
 800b76e:	883b      	ldrh	r3, [r7, #0]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d006      	beq.n	800b782 <pbuf_alloc_reference+0x2a>
 800b774:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b4 <pbuf_alloc_reference+0x5c>)
 800b776:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b77a:	490f      	ldr	r1, [pc, #60]	@ (800b7b8 <pbuf_alloc_reference+0x60>)
 800b77c:	480f      	ldr	r0, [pc, #60]	@ (800b7bc <pbuf_alloc_reference+0x64>)
 800b77e:	f009 f929 	bl	80149d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b782:	200b      	movs	r0, #11
 800b784:	f7ff fabc 	bl	800ad00 <memp_malloc>
 800b788:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b790:	2300      	movs	r3, #0
 800b792:	e00b      	b.n	800b7ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b794:	8879      	ldrh	r1, [r7, #2]
 800b796:	887a      	ldrh	r2, [r7, #2]
 800b798:	2300      	movs	r3, #0
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	883b      	ldrh	r3, [r7, #0]
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	6879      	ldr	r1, [r7, #4]
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f7ff feb7 	bl	800b518 <pbuf_init_alloced_pbuf>
  return p;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	08015fd0 	.word	0x08015fd0
 800b7b8:	080160d4 	.word	0x080160d4
 800b7bc:	08016030 	.word	0x08016030

0800b7c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	607b      	str	r3, [r7, #4]
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73fb      	strb	r3, [r7, #15]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	81bb      	strh	r3, [r7, #12]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b7d8:	8a7b      	ldrh	r3, [r7, #18]
 800b7da:	3303      	adds	r3, #3
 800b7dc:	f023 0203 	bic.w	r2, r3, #3
 800b7e0:	89bb      	ldrh	r3, [r7, #12]
 800b7e2:	441a      	add	r2, r3
 800b7e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d901      	bls.n	800b7ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e018      	b.n	800b820 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b7ee:	6a3b      	ldr	r3, [r7, #32]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d007      	beq.n	800b804 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b7f4:	8a7b      	ldrh	r3, [r7, #18]
 800b7f6:	3303      	adds	r3, #3
 800b7f8:	f023 0303 	bic.w	r3, r3, #3
 800b7fc:	6a3a      	ldr	r2, [r7, #32]
 800b7fe:	4413      	add	r3, r2
 800b800:	617b      	str	r3, [r7, #20]
 800b802:	e001      	b.n	800b808 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b804:	2300      	movs	r3, #0
 800b806:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	89b9      	ldrh	r1, [r7, #12]
 800b80c:	89ba      	ldrh	r2, [r7, #12]
 800b80e:	2302      	movs	r3, #2
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	897b      	ldrh	r3, [r7, #10]
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	460b      	mov	r3, r1
 800b818:	6979      	ldr	r1, [r7, #20]
 800b81a:	f7ff fe7d 	bl	800b518 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b81e:	687b      	ldr	r3, [r7, #4]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <pbuf_realloc+0x20>
 800b83a:	4b3a      	ldr	r3, [pc, #232]	@ (800b924 <pbuf_realloc+0xfc>)
 800b83c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b840:	4939      	ldr	r1, [pc, #228]	@ (800b928 <pbuf_realloc+0x100>)
 800b842:	483a      	ldr	r0, [pc, #232]	@ (800b92c <pbuf_realloc+0x104>)
 800b844:	f009 f8c6 	bl	80149d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	891b      	ldrh	r3, [r3, #8]
 800b84c:	887a      	ldrh	r2, [r7, #2]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d263      	bcs.n	800b91a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	891a      	ldrh	r2, [r3, #8]
 800b856:	887b      	ldrh	r3, [r7, #2]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b85c:	887b      	ldrh	r3, [r7, #2]
 800b85e:	817b      	strh	r3, [r7, #10]
  q = p;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b864:	e018      	b.n	800b898 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	895b      	ldrh	r3, [r3, #10]
 800b86a:	897a      	ldrh	r2, [r7, #10]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	891a      	ldrh	r2, [r3, #8]
 800b874:	893b      	ldrh	r3, [r7, #8]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <pbuf_realloc+0x70>
 800b88a:	4b26      	ldr	r3, [pc, #152]	@ (800b924 <pbuf_realloc+0xfc>)
 800b88c:	f240 12af 	movw	r2, #431	@ 0x1af
 800b890:	4927      	ldr	r1, [pc, #156]	@ (800b930 <pbuf_realloc+0x108>)
 800b892:	4826      	ldr	r0, [pc, #152]	@ (800b92c <pbuf_realloc+0x104>)
 800b894:	f009 f89e 	bl	80149d4 <iprintf>
  while (rem_len > q->len) {
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	895b      	ldrh	r3, [r3, #10]
 800b89c:	897a      	ldrh	r2, [r7, #10]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d8e1      	bhi.n	800b866 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	7b1b      	ldrb	r3, [r3, #12]
 800b8a6:	f003 030f 	and.w	r3, r3, #15
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d121      	bne.n	800b8f2 <pbuf_realloc+0xca>
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	895b      	ldrh	r3, [r3, #10]
 800b8b2:	897a      	ldrh	r2, [r7, #10]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d01c      	beq.n	800b8f2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	7b5b      	ldrb	r3, [r3, #13]
 800b8bc:	f003 0302 	and.w	r3, r3, #2
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d116      	bne.n	800b8f2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	897b      	ldrh	r3, [r7, #10]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f7fe ff64 	bl	800a7a4 <mem_trim>
 800b8dc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d106      	bne.n	800b8f2 <pbuf_realloc+0xca>
 800b8e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b924 <pbuf_realloc+0xfc>)
 800b8e6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b8ea:	4912      	ldr	r1, [pc, #72]	@ (800b934 <pbuf_realloc+0x10c>)
 800b8ec:	480f      	ldr	r0, [pc, #60]	@ (800b92c <pbuf_realloc+0x104>)
 800b8ee:	f009 f871 	bl	80149d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	897a      	ldrh	r2, [r7, #10]
 800b8f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	895a      	ldrh	r2, [r3, #10]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 f911 	bl	800bb34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	e000      	b.n	800b91c <pbuf_realloc+0xf4>
    return;
 800b91a:	bf00      	nop

}
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	08015fd0 	.word	0x08015fd0
 800b928:	080160e8 	.word	0x080160e8
 800b92c:	08016030 	.word	0x08016030
 800b930:	08016100 	.word	0x08016100
 800b934:	08016118 	.word	0x08016118

0800b938 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	4613      	mov	r3, r2
 800b944:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d106      	bne.n	800b95a <pbuf_add_header_impl+0x22>
 800b94c:	4b2b      	ldr	r3, [pc, #172]	@ (800b9fc <pbuf_add_header_impl+0xc4>)
 800b94e:	f240 12df 	movw	r2, #479	@ 0x1df
 800b952:	492b      	ldr	r1, [pc, #172]	@ (800ba00 <pbuf_add_header_impl+0xc8>)
 800b954:	482b      	ldr	r0, [pc, #172]	@ (800ba04 <pbuf_add_header_impl+0xcc>)
 800b956:	f009 f83d 	bl	80149d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <pbuf_add_header_impl+0x30>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b966:	d301      	bcc.n	800b96c <pbuf_add_header_impl+0x34>
    return 1;
 800b968:	2301      	movs	r3, #1
 800b96a:	e043      	b.n	800b9f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <pbuf_add_header_impl+0x3e>
    return 0;
 800b972:	2300      	movs	r3, #0
 800b974:	e03e      	b.n	800b9f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	891a      	ldrh	r2, [r3, #8]
 800b97e:	8a7b      	ldrh	r3, [r7, #18]
 800b980:	4413      	add	r3, r2
 800b982:	b29b      	uxth	r3, r3
 800b984:	8a7a      	ldrh	r2, [r7, #18]
 800b986:	429a      	cmp	r2, r3
 800b988:	d901      	bls.n	800b98e <pbuf_add_header_impl+0x56>
    return 1;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e032      	b.n	800b9f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	7b1b      	ldrb	r3, [r3, #12]
 800b992:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b994:	8a3b      	ldrh	r3, [r7, #16]
 800b996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00c      	beq.n	800b9b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	425b      	negs	r3, r3
 800b9a6:	4413      	add	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3310      	adds	r3, #16
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d20d      	bcs.n	800b9d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e01d      	b.n	800b9f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d006      	beq.n	800b9cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	425b      	negs	r3, r3
 800b9c6:	4413      	add	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	e001      	b.n	800b9d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e011      	b.n	800b9f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	895a      	ldrh	r2, [r3, #10]
 800b9da:	8a7b      	ldrh	r3, [r7, #18]
 800b9dc:	4413      	add	r3, r2
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	891a      	ldrh	r2, [r3, #8]
 800b9e8:	8a7b      	ldrh	r3, [r7, #18]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	811a      	strh	r2, [r3, #8]


  return 0;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	08015fd0 	.word	0x08015fd0
 800ba00:	08016134 	.word	0x08016134
 800ba04:	08016030 	.word	0x08016030

0800ba08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ba12:	2200      	movs	r2, #0
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7ff ff8e 	bl	800b938 <pbuf_add_header_impl>
 800ba1c:	4603      	mov	r3, r0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d106      	bne.n	800ba46 <pbuf_remove_header+0x1e>
 800ba38:	4b20      	ldr	r3, [pc, #128]	@ (800babc <pbuf_remove_header+0x94>)
 800ba3a:	f240 224b 	movw	r2, #587	@ 0x24b
 800ba3e:	4920      	ldr	r1, [pc, #128]	@ (800bac0 <pbuf_remove_header+0x98>)
 800ba40:	4820      	ldr	r0, [pc, #128]	@ (800bac4 <pbuf_remove_header+0x9c>)
 800ba42:	f008 ffc7 	bl	80149d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <pbuf_remove_header+0x2c>
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba52:	d301      	bcc.n	800ba58 <pbuf_remove_header+0x30>
    return 1;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e02c      	b.n	800bab2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <pbuf_remove_header+0x3a>
    return 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e027      	b.n	800bab2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	895b      	ldrh	r3, [r3, #10]
 800ba6a:	89fa      	ldrh	r2, [r7, #14]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d908      	bls.n	800ba82 <pbuf_remove_header+0x5a>
 800ba70:	4b12      	ldr	r3, [pc, #72]	@ (800babc <pbuf_remove_header+0x94>)
 800ba72:	f240 2255 	movw	r2, #597	@ 0x255
 800ba76:	4914      	ldr	r1, [pc, #80]	@ (800bac8 <pbuf_remove_header+0xa0>)
 800ba78:	4812      	ldr	r0, [pc, #72]	@ (800bac4 <pbuf_remove_header+0x9c>)
 800ba7a:	f008 ffab 	bl	80149d4 <iprintf>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e017      	b.n	800bab2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	441a      	add	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	895a      	ldrh	r2, [r3, #10]
 800ba98:	89fb      	ldrh	r3, [r7, #14]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	891a      	ldrh	r2, [r3, #8]
 800baa6:	89fb      	ldrh	r3, [r7, #14]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	b29a      	uxth	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	08015fd0 	.word	0x08015fd0
 800bac0:	08016134 	.word	0x08016134
 800bac4:	08016030 	.word	0x08016030
 800bac8:	08016140 	.word	0x08016140

0800bacc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	807b      	strh	r3, [r7, #2]
 800bad8:	4613      	mov	r3, r2
 800bada:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800badc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da08      	bge.n	800baf6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bae8:	425b      	negs	r3, r3
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff ff9b 	bl	800ba28 <pbuf_remove_header>
 800baf2:	4603      	mov	r3, r0
 800baf4:	e007      	b.n	800bb06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800baf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bafa:	787a      	ldrb	r2, [r7, #1]
 800bafc:	4619      	mov	r1, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff ff1a 	bl	800b938 <pbuf_add_header_impl>
 800bb04:	4603      	mov	r3, r0
  }
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bb1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff ffd2 	bl	800bacc <pbuf_header_impl>
 800bb28:	4603      	mov	r3, r0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10b      	bne.n	800bb5a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d106      	bne.n	800bb56 <pbuf_free+0x22>
 800bb48:	4b3b      	ldr	r3, [pc, #236]	@ (800bc38 <pbuf_free+0x104>)
 800bb4a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bb4e:	493b      	ldr	r1, [pc, #236]	@ (800bc3c <pbuf_free+0x108>)
 800bb50:	483b      	ldr	r0, [pc, #236]	@ (800bc40 <pbuf_free+0x10c>)
 800bb52:	f008 ff3f 	bl	80149d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	e069      	b.n	800bc2e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb5e:	e062      	b.n	800bc26 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb60:	f008 fe1a 	bl	8014798 <sys_arch_protect>
 800bb64:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	7b9b      	ldrb	r3, [r3, #14]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d106      	bne.n	800bb7c <pbuf_free+0x48>
 800bb6e:	4b32      	ldr	r3, [pc, #200]	@ (800bc38 <pbuf_free+0x104>)
 800bb70:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bb74:	4933      	ldr	r1, [pc, #204]	@ (800bc44 <pbuf_free+0x110>)
 800bb76:	4832      	ldr	r0, [pc, #200]	@ (800bc40 <pbuf_free+0x10c>)
 800bb78:	f008 ff2c 	bl	80149d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7b9b      	ldrb	r3, [r3, #14]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	739a      	strb	r2, [r3, #14]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	7b9b      	ldrb	r3, [r3, #14]
 800bb8c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb8e:	69b8      	ldr	r0, [r7, #24]
 800bb90:	f008 fe10 	bl	80147b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb94:	7dfb      	ldrb	r3, [r7, #23]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d143      	bne.n	800bc22 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7b1b      	ldrb	r3, [r3, #12]
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7b5b      	ldrb	r3, [r3, #13]
 800bbae:	f003 0302 	and.w	r3, r3, #2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d011      	beq.n	800bbda <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <pbuf_free+0x9c>
 800bbc2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc38 <pbuf_free+0x104>)
 800bbc4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bbc8:	491f      	ldr	r1, [pc, #124]	@ (800bc48 <pbuf_free+0x114>)
 800bbca:	481d      	ldr	r0, [pc, #116]	@ (800bc40 <pbuf_free+0x10c>)
 800bbcc:	f008 ff02 	bl	80149d4 <iprintf>
        pc->custom_free_function(p);
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	4798      	blx	r3
 800bbd8:	e01d      	b.n	800bc16 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d104      	bne.n	800bbea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	200c      	movs	r0, #12
 800bbe4:	f7ff f902 	bl	800adec <memp_free>
 800bbe8:	e015      	b.n	800bc16 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d104      	bne.n	800bbfa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bbf0:	6879      	ldr	r1, [r7, #4]
 800bbf2:	200b      	movs	r0, #11
 800bbf4:	f7ff f8fa 	bl	800adec <memp_free>
 800bbf8:	e00d      	b.n	800bc16 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d103      	bne.n	800bc08 <pbuf_free+0xd4>
          mem_free(p);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7fe fd3f 	bl	800a684 <mem_free>
 800bc06:	e006      	b.n	800bc16 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bc08:	4b0b      	ldr	r3, [pc, #44]	@ (800bc38 <pbuf_free+0x104>)
 800bc0a:	f240 320f 	movw	r2, #783	@ 0x30f
 800bc0e:	490f      	ldr	r1, [pc, #60]	@ (800bc4c <pbuf_free+0x118>)
 800bc10:	480b      	ldr	r0, [pc, #44]	@ (800bc40 <pbuf_free+0x10c>)
 800bc12:	f008 fedf 	bl	80149d4 <iprintf>
        }
      }
      count++;
 800bc16:	7ffb      	ldrb	r3, [r7, #31]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	607b      	str	r3, [r7, #4]
 800bc20:	e001      	b.n	800bc26 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d199      	bne.n	800bb60 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bc2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3720      	adds	r7, #32
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	08015fd0 	.word	0x08015fd0
 800bc3c:	08016134 	.word	0x08016134
 800bc40:	08016030 	.word	0x08016030
 800bc44:	08016160 	.word	0x08016160
 800bc48:	08016178 	.word	0x08016178
 800bc4c:	0801619c 	.word	0x0801619c

0800bc50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc5c:	e005      	b.n	800bc6a <pbuf_clen+0x1a>
    ++len;
 800bc5e:	89fb      	ldrh	r3, [r7, #14]
 800bc60:	3301      	adds	r3, #1
 800bc62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1f6      	bne.n	800bc5e <pbuf_clen+0xe>
  }
  return len;
 800bc70:	89fb      	ldrh	r3, [r7, #14]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
	...

0800bc80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d016      	beq.n	800bcbc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc8e:	f008 fd83 	bl	8014798 <sys_arch_protect>
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	7b9b      	ldrb	r3, [r3, #14]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	b2da      	uxtb	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	739a      	strb	r2, [r3, #14]
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f008 fd87 	bl	80147b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7b9b      	ldrb	r3, [r3, #14]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d106      	bne.n	800bcbc <pbuf_ref+0x3c>
 800bcae:	4b05      	ldr	r3, [pc, #20]	@ (800bcc4 <pbuf_ref+0x44>)
 800bcb0:	f240 3242 	movw	r2, #834	@ 0x342
 800bcb4:	4904      	ldr	r1, [pc, #16]	@ (800bcc8 <pbuf_ref+0x48>)
 800bcb6:	4805      	ldr	r0, [pc, #20]	@ (800bccc <pbuf_ref+0x4c>)
 800bcb8:	f008 fe8c 	bl	80149d4 <iprintf>
  }
}
 800bcbc:	bf00      	nop
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	08015fd0 	.word	0x08015fd0
 800bcc8:	080161b0 	.word	0x080161b0
 800bccc:	08016030 	.word	0x08016030

0800bcd0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <pbuf_cat+0x16>
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d107      	bne.n	800bcf6 <pbuf_cat+0x26>
 800bce6:	4b20      	ldr	r3, [pc, #128]	@ (800bd68 <pbuf_cat+0x98>)
 800bce8:	f240 3259 	movw	r2, #857	@ 0x359
 800bcec:	491f      	ldr	r1, [pc, #124]	@ (800bd6c <pbuf_cat+0x9c>)
 800bcee:	4820      	ldr	r0, [pc, #128]	@ (800bd70 <pbuf_cat+0xa0>)
 800bcf0:	f008 fe70 	bl	80149d4 <iprintf>
 800bcf4:	e034      	b.n	800bd60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	e00a      	b.n	800bd12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	891a      	ldrh	r2, [r3, #8]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	891b      	ldrh	r3, [r3, #8]
 800bd04:	4413      	add	r3, r2
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	60fb      	str	r3, [r7, #12]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1f0      	bne.n	800bcfc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	891a      	ldrh	r2, [r3, #8]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	895b      	ldrh	r3, [r3, #10]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d006      	beq.n	800bd34 <pbuf_cat+0x64>
 800bd26:	4b10      	ldr	r3, [pc, #64]	@ (800bd68 <pbuf_cat+0x98>)
 800bd28:	f240 3262 	movw	r2, #866	@ 0x362
 800bd2c:	4911      	ldr	r1, [pc, #68]	@ (800bd74 <pbuf_cat+0xa4>)
 800bd2e:	4810      	ldr	r0, [pc, #64]	@ (800bd70 <pbuf_cat+0xa0>)
 800bd30:	f008 fe50 	bl	80149d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d006      	beq.n	800bd4a <pbuf_cat+0x7a>
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd68 <pbuf_cat+0x98>)
 800bd3e:	f240 3263 	movw	r2, #867	@ 0x363
 800bd42:	490d      	ldr	r1, [pc, #52]	@ (800bd78 <pbuf_cat+0xa8>)
 800bd44:	480a      	ldr	r0, [pc, #40]	@ (800bd70 <pbuf_cat+0xa0>)
 800bd46:	f008 fe45 	bl	80149d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	891a      	ldrh	r2, [r3, #8]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	891b      	ldrh	r3, [r3, #8]
 800bd52:	4413      	add	r3, r2
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	08015fd0 	.word	0x08015fd0
 800bd6c:	080161c4 	.word	0x080161c4
 800bd70:	08016030 	.word	0x08016030
 800bd74:	080161fc 	.word	0x080161fc
 800bd78:	0801622c 	.word	0x0801622c

0800bd7c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f7ff ffa1 	bl	800bcd0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bd8e:	6838      	ldr	r0, [r7, #0]
 800bd90:	f7ff ff76 	bl	800bc80 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d008      	beq.n	800bdc6 <pbuf_copy+0x2a>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d005      	beq.n	800bdc6 <pbuf_copy+0x2a>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	891a      	ldrh	r2, [r3, #8]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	891b      	ldrh	r3, [r3, #8]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d209      	bcs.n	800bdda <pbuf_copy+0x3e>
 800bdc6:	4b57      	ldr	r3, [pc, #348]	@ (800bf24 <pbuf_copy+0x188>)
 800bdc8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800bdcc:	4956      	ldr	r1, [pc, #344]	@ (800bf28 <pbuf_copy+0x18c>)
 800bdce:	4857      	ldr	r0, [pc, #348]	@ (800bf2c <pbuf_copy+0x190>)
 800bdd0:	f008 fe00 	bl	80149d4 <iprintf>
 800bdd4:	f06f 030f 	mvn.w	r3, #15
 800bdd8:	e09f      	b.n	800bf1a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	895b      	ldrh	r3, [r3, #10]
 800bdde:	461a      	mov	r2, r3
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	1ad2      	subs	r2, r2, r3
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	895b      	ldrh	r3, [r3, #10]
 800bde8:	4619      	mov	r1, r3
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	1acb      	subs	r3, r1, r3
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d306      	bcc.n	800be00 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	895b      	ldrh	r3, [r3, #10]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	e005      	b.n	800be0c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	895b      	ldrh	r3, [r3, #10]
 800be04:	461a      	mov	r2, r3
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	18d0      	adds	r0, r2, r3
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	4413      	add	r3, r2
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4619      	mov	r1, r3
 800be20:	f008 feb3 	bl	8014b8a <memcpy>
    offset_to += len;
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	4413      	add	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	895b      	ldrh	r3, [r3, #10]
 800be38:	461a      	mov	r2, r3
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d906      	bls.n	800be4e <pbuf_copy+0xb2>
 800be40:	4b38      	ldr	r3, [pc, #224]	@ (800bf24 <pbuf_copy+0x188>)
 800be42:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800be46:	493a      	ldr	r1, [pc, #232]	@ (800bf30 <pbuf_copy+0x194>)
 800be48:	4838      	ldr	r0, [pc, #224]	@ (800bf2c <pbuf_copy+0x190>)
 800be4a:	f008 fdc3 	bl	80149d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	895b      	ldrh	r3, [r3, #10]
 800be52:	461a      	mov	r2, r3
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	4293      	cmp	r3, r2
 800be58:	d906      	bls.n	800be68 <pbuf_copy+0xcc>
 800be5a:	4b32      	ldr	r3, [pc, #200]	@ (800bf24 <pbuf_copy+0x188>)
 800be5c:	f240 32da 	movw	r2, #986	@ 0x3da
 800be60:	4934      	ldr	r1, [pc, #208]	@ (800bf34 <pbuf_copy+0x198>)
 800be62:	4832      	ldr	r0, [pc, #200]	@ (800bf2c <pbuf_copy+0x190>)
 800be64:	f008 fdb6 	bl	80149d4 <iprintf>
    if (offset_from >= p_from->len) {
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	895b      	ldrh	r3, [r3, #10]
 800be6c:	461a      	mov	r2, r3
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	4293      	cmp	r3, r2
 800be72:	d304      	bcc.n	800be7e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	895b      	ldrh	r3, [r3, #10]
 800be82:	461a      	mov	r2, r3
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	4293      	cmp	r3, r2
 800be88:	d114      	bne.n	800beb4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10c      	bne.n	800beb4 <pbuf_copy+0x118>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d009      	beq.n	800beb4 <pbuf_copy+0x118>
 800bea0:	4b20      	ldr	r3, [pc, #128]	@ (800bf24 <pbuf_copy+0x188>)
 800bea2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bea6:	4924      	ldr	r1, [pc, #144]	@ (800bf38 <pbuf_copy+0x19c>)
 800bea8:	4820      	ldr	r0, [pc, #128]	@ (800bf2c <pbuf_copy+0x190>)
 800beaa:	f008 fd93 	bl	80149d4 <iprintf>
 800beae:	f06f 030f 	mvn.w	r3, #15
 800beb2:	e032      	b.n	800bf1a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d013      	beq.n	800bee2 <pbuf_copy+0x146>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	895a      	ldrh	r2, [r3, #10]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	891b      	ldrh	r3, [r3, #8]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d10d      	bne.n	800bee2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <pbuf_copy+0x146>
 800bece:	4b15      	ldr	r3, [pc, #84]	@ (800bf24 <pbuf_copy+0x188>)
 800bed0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bed4:	4919      	ldr	r1, [pc, #100]	@ (800bf3c <pbuf_copy+0x1a0>)
 800bed6:	4815      	ldr	r0, [pc, #84]	@ (800bf2c <pbuf_copy+0x190>)
 800bed8:	f008 fd7c 	bl	80149d4 <iprintf>
 800bedc:	f06f 0305 	mvn.w	r3, #5
 800bee0:	e01b      	b.n	800bf1a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d013      	beq.n	800bf10 <pbuf_copy+0x174>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	895a      	ldrh	r2, [r3, #10]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	891b      	ldrh	r3, [r3, #8]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d10d      	bne.n	800bf10 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d009      	beq.n	800bf10 <pbuf_copy+0x174>
 800befc:	4b09      	ldr	r3, [pc, #36]	@ (800bf24 <pbuf_copy+0x188>)
 800befe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bf02:	490e      	ldr	r1, [pc, #56]	@ (800bf3c <pbuf_copy+0x1a0>)
 800bf04:	4809      	ldr	r0, [pc, #36]	@ (800bf2c <pbuf_copy+0x190>)
 800bf06:	f008 fd65 	bl	80149d4 <iprintf>
 800bf0a:	f06f 0305 	mvn.w	r3, #5
 800bf0e:	e004      	b.n	800bf1a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f47f af61 	bne.w	800bdda <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	08015fd0 	.word	0x08015fd0
 800bf28:	08016278 	.word	0x08016278
 800bf2c:	08016030 	.word	0x08016030
 800bf30:	080162a8 	.word	0x080162a8
 800bf34:	080162c0 	.word	0x080162c0
 800bf38:	080162dc 	.word	0x080162dc
 800bf3c:	080162ec 	.word	0x080162ec

0800bf40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	460b      	mov	r3, r1
 800bf50:	80fb      	strh	r3, [r7, #6]
 800bf52:	4613      	mov	r3, r2
 800bf54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d108      	bne.n	800bf76 <pbuf_copy_partial+0x36>
 800bf64:	4b2b      	ldr	r3, [pc, #172]	@ (800c014 <pbuf_copy_partial+0xd4>)
 800bf66:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bf6a:	492b      	ldr	r1, [pc, #172]	@ (800c018 <pbuf_copy_partial+0xd8>)
 800bf6c:	482b      	ldr	r0, [pc, #172]	@ (800c01c <pbuf_copy_partial+0xdc>)
 800bf6e:	f008 fd31 	bl	80149d4 <iprintf>
 800bf72:	2300      	movs	r3, #0
 800bf74:	e04a      	b.n	800c00c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d108      	bne.n	800bf8e <pbuf_copy_partial+0x4e>
 800bf7c:	4b25      	ldr	r3, [pc, #148]	@ (800c014 <pbuf_copy_partial+0xd4>)
 800bf7e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bf82:	4927      	ldr	r1, [pc, #156]	@ (800c020 <pbuf_copy_partial+0xe0>)
 800bf84:	4825      	ldr	r0, [pc, #148]	@ (800c01c <pbuf_copy_partial+0xdc>)
 800bf86:	f008 fd25 	bl	80149d4 <iprintf>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e03e      	b.n	800c00c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	e034      	b.n	800bffe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf94:	88bb      	ldrh	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <pbuf_copy_partial+0x70>
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	895b      	ldrh	r3, [r3, #10]
 800bf9e:	88ba      	ldrh	r2, [r7, #4]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d305      	bcc.n	800bfb0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	895b      	ldrh	r3, [r3, #10]
 800bfa8:	88ba      	ldrh	r2, [r7, #4]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	80bb      	strh	r3, [r7, #4]
 800bfae:	e023      	b.n	800bff8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	895a      	ldrh	r2, [r3, #10]
 800bfb4:	88bb      	ldrh	r3, [r7, #4]
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bfba:	8b3a      	ldrh	r2, [r7, #24]
 800bfbc:	88fb      	ldrh	r3, [r7, #6]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d901      	bls.n	800bfc6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bfc2:	88fb      	ldrh	r3, [r7, #6]
 800bfc4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bfc6:	8b7b      	ldrh	r3, [r7, #26]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	18d0      	adds	r0, r2, r3
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	88bb      	ldrh	r3, [r7, #4]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	8b3a      	ldrh	r2, [r7, #24]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f008 fdd7 	bl	8014b8a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bfdc:	8afa      	ldrh	r2, [r7, #22]
 800bfde:	8b3b      	ldrh	r3, [r7, #24]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bfe4:	8b7a      	ldrh	r2, [r7, #26]
 800bfe6:	8b3b      	ldrh	r3, [r7, #24]
 800bfe8:	4413      	add	r3, r2
 800bfea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bfec:	88fa      	ldrh	r2, [r7, #6]
 800bfee:	8b3b      	ldrh	r3, [r7, #24]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	88fb      	ldrh	r3, [r7, #6]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <pbuf_copy_partial+0xca>
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1c4      	bne.n	800bf94 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c00a:	8afb      	ldrh	r3, [r7, #22]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3720      	adds	r7, #32
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	08015fd0 	.word	0x08015fd0
 800c018:	08016318 	.word	0x08016318
 800c01c:	08016030 	.word	0x08016030
 800c020:	08016338 	.word	0x08016338

0800c024 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	603a      	str	r2, [r7, #0]
 800c02e:	71fb      	strb	r3, [r7, #7]
 800c030:	460b      	mov	r3, r1
 800c032:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	8919      	ldrh	r1, [r3, #8]
 800c038:	88ba      	ldrh	r2, [r7, #4]
 800c03a:	79fb      	ldrb	r3, [r7, #7]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fa95 	bl	800b56c <pbuf_alloc>
 800c042:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <pbuf_clone+0x2a>
    return NULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e011      	b.n	800c072 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7ff fea3 	bl	800bd9c <pbuf_copy>
 800c056:	4603      	mov	r3, r0
 800c058:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c05a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d006      	beq.n	800c070 <pbuf_clone+0x4c>
 800c062:	4b06      	ldr	r3, [pc, #24]	@ (800c07c <pbuf_clone+0x58>)
 800c064:	f240 5224 	movw	r2, #1316	@ 0x524
 800c068:	4905      	ldr	r1, [pc, #20]	@ (800c080 <pbuf_clone+0x5c>)
 800c06a:	4806      	ldr	r0, [pc, #24]	@ (800c084 <pbuf_clone+0x60>)
 800c06c:	f008 fcb2 	bl	80149d4 <iprintf>
  return q;
 800c070:	68fb      	ldr	r3, [r7, #12]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	08015fd0 	.word	0x08015fd0
 800c080:	08016444 	.word	0x08016444
 800c084:	08016030 	.word	0x08016030

0800c088 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c08c:	f008 fba2 	bl	80147d4 <rand>
 800c090:	4603      	mov	r3, r0
 800c092:	b29b      	uxth	r3, r3
 800c094:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	4b01      	ldr	r3, [pc, #4]	@ (800c0a8 <tcp_init+0x20>)
 800c0a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c0a4:	bf00      	nop
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	20000024 	.word	0x20000024

0800c0ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7d1b      	ldrb	r3, [r3, #20]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d105      	bne.n	800c0c8 <tcp_free+0x1c>
 800c0bc:	4b06      	ldr	r3, [pc, #24]	@ (800c0d8 <tcp_free+0x2c>)
 800c0be:	22d4      	movs	r2, #212	@ 0xd4
 800c0c0:	4906      	ldr	r1, [pc, #24]	@ (800c0dc <tcp_free+0x30>)
 800c0c2:	4807      	ldr	r0, [pc, #28]	@ (800c0e0 <tcp_free+0x34>)
 800c0c4:	f008 fc86 	bl	80149d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	f7fe fe8e 	bl	800adec <memp_free>
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	080164d0 	.word	0x080164d0
 800c0dc:	08016500 	.word	0x08016500
 800c0e0:	08016514 	.word	0x08016514

0800c0e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7d1b      	ldrb	r3, [r3, #20]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d105      	bne.n	800c100 <tcp_free_listen+0x1c>
 800c0f4:	4b06      	ldr	r3, [pc, #24]	@ (800c110 <tcp_free_listen+0x2c>)
 800c0f6:	22df      	movs	r2, #223	@ 0xdf
 800c0f8:	4906      	ldr	r1, [pc, #24]	@ (800c114 <tcp_free_listen+0x30>)
 800c0fa:	4807      	ldr	r0, [pc, #28]	@ (800c118 <tcp_free_listen+0x34>)
 800c0fc:	f008 fc6a 	bl	80149d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	2002      	movs	r0, #2
 800c104:	f7fe fe72 	bl	800adec <memp_free>
}
 800c108:	bf00      	nop
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	080164d0 	.word	0x080164d0
 800c114:	0801653c 	.word	0x0801653c
 800c118:	08016514 	.word	0x08016514

0800c11c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c120:	f000 fea4 	bl	800ce6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c124:	4b07      	ldr	r3, [pc, #28]	@ (800c144 <tcp_tmr+0x28>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	3301      	adds	r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	4b05      	ldr	r3, [pc, #20]	@ (800c144 <tcp_tmr+0x28>)
 800c12e:	701a      	strb	r2, [r3, #0]
 800c130:	4b04      	ldr	r3, [pc, #16]	@ (800c144 <tcp_tmr+0x28>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c13c:	f000 fb54 	bl	800c7e8 <tcp_slowtmr>
  }
}
 800c140:	bf00      	nop
 800c142:	bd80      	pop	{r7, pc}
 800c144:	2000d7f9 	.word	0x2000d7f9

0800c148 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d105      	bne.n	800c164 <tcp_remove_listener+0x1c>
 800c158:	4b0d      	ldr	r3, [pc, #52]	@ (800c190 <tcp_remove_listener+0x48>)
 800c15a:	22ff      	movs	r2, #255	@ 0xff
 800c15c:	490d      	ldr	r1, [pc, #52]	@ (800c194 <tcp_remove_listener+0x4c>)
 800c15e:	480e      	ldr	r0, [pc, #56]	@ (800c198 <tcp_remove_listener+0x50>)
 800c160:	f008 fc38 	bl	80149d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e00a      	b.n	800c180 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	429a      	cmp	r2, r3
 800c172:	d102      	bne.n	800c17a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1f1      	bne.n	800c16a <tcp_remove_listener+0x22>
    }
  }
}
 800c186:	bf00      	nop
 800c188:	bf00      	nop
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	080164d0 	.word	0x080164d0
 800c194:	08016558 	.word	0x08016558
 800c198:	08016514 	.word	0x08016514

0800c19c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d106      	bne.n	800c1b8 <tcp_listen_closed+0x1c>
 800c1aa:	4b14      	ldr	r3, [pc, #80]	@ (800c1fc <tcp_listen_closed+0x60>)
 800c1ac:	f240 1211 	movw	r2, #273	@ 0x111
 800c1b0:	4913      	ldr	r1, [pc, #76]	@ (800c200 <tcp_listen_closed+0x64>)
 800c1b2:	4814      	ldr	r0, [pc, #80]	@ (800c204 <tcp_listen_closed+0x68>)
 800c1b4:	f008 fc0e 	bl	80149d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7d1b      	ldrb	r3, [r3, #20]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d006      	beq.n	800c1ce <tcp_listen_closed+0x32>
 800c1c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c1fc <tcp_listen_closed+0x60>)
 800c1c2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c1c6:	4910      	ldr	r1, [pc, #64]	@ (800c208 <tcp_listen_closed+0x6c>)
 800c1c8:	480e      	ldr	r0, [pc, #56]	@ (800c204 <tcp_listen_closed+0x68>)
 800c1ca:	f008 fc03 	bl	80149d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	e00b      	b.n	800c1ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c1d4:	4a0d      	ldr	r2, [pc, #52]	@ (800c20c <tcp_listen_closed+0x70>)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff ffb1 	bl	800c148 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	d9f0      	bls.n	800c1d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c1f2:	bf00      	nop
 800c1f4:	bf00      	nop
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	080164d0 	.word	0x080164d0
 800c200:	08016580 	.word	0x08016580
 800c204:	08016514 	.word	0x08016514
 800c208:	0801658c 	.word	0x0801658c
 800c20c:	080184f0 	.word	0x080184f0

0800c210 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c210:	b5b0      	push	{r4, r5, r7, lr}
 800c212:	b088      	sub	sp, #32
 800c214:	af04      	add	r7, sp, #16
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <tcp_close_shutdown+0x20>
 800c222:	4b63      	ldr	r3, [pc, #396]	@ (800c3b0 <tcp_close_shutdown+0x1a0>)
 800c224:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c228:	4962      	ldr	r1, [pc, #392]	@ (800c3b4 <tcp_close_shutdown+0x1a4>)
 800c22a:	4863      	ldr	r0, [pc, #396]	@ (800c3b8 <tcp_close_shutdown+0x1a8>)
 800c22c:	f008 fbd2 	bl	80149d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d066      	beq.n	800c304 <tcp_close_shutdown+0xf4>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	7d1b      	ldrb	r3, [r3, #20]
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d003      	beq.n	800c246 <tcp_close_shutdown+0x36>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7d1b      	ldrb	r3, [r3, #20]
 800c242:	2b07      	cmp	r3, #7
 800c244:	d15e      	bne.n	800c304 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d104      	bne.n	800c258 <tcp_close_shutdown+0x48>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c252:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c256:	d055      	beq.n	800c304 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	8b5b      	ldrh	r3, [r3, #26]
 800c25c:	f003 0310 	and.w	r3, r3, #16
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <tcp_close_shutdown+0x62>
 800c264:	4b52      	ldr	r3, [pc, #328]	@ (800c3b0 <tcp_close_shutdown+0x1a0>)
 800c266:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c26a:	4954      	ldr	r1, [pc, #336]	@ (800c3bc <tcp_close_shutdown+0x1ac>)
 800c26c:	4852      	ldr	r0, [pc, #328]	@ (800c3b8 <tcp_close_shutdown+0x1a8>)
 800c26e:	f008 fbb1 	bl	80149d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c27a:	687d      	ldr	r5, [r7, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3304      	adds	r3, #4
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	8ad2      	ldrh	r2, [r2, #22]
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	8b09      	ldrh	r1, [r1, #24]
 800c288:	9102      	str	r1, [sp, #8]
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	462b      	mov	r3, r5
 800c290:	4622      	mov	r2, r4
 800c292:	4601      	mov	r1, r0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f004 fe8d 	bl	8010fb4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 f8c8 	bl	800d430 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c2a0:	4b47      	ldr	r3, [pc, #284]	@ (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d105      	bne.n	800c2b6 <tcp_close_shutdown+0xa6>
 800c2aa:	4b45      	ldr	r3, [pc, #276]	@ (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	4a43      	ldr	r2, [pc, #268]	@ (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2b2:	6013      	str	r3, [r2, #0]
 800c2b4:	e013      	b.n	800c2de <tcp_close_shutdown+0xce>
 800c2b6:	4b42      	ldr	r3, [pc, #264]	@ (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	e00c      	b.n	800c2d8 <tcp_close_shutdown+0xc8>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d104      	bne.n	800c2d2 <tcp_close_shutdown+0xc2>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68da      	ldr	r2, [r3, #12]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	60da      	str	r2, [r3, #12]
 800c2d0:	e005      	b.n	800c2de <tcp_close_shutdown+0xce>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1ef      	bne.n	800c2be <tcp_close_shutdown+0xae>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	60da      	str	r2, [r3, #12]
 800c2e4:	4b37      	ldr	r3, [pc, #220]	@ (800c3c4 <tcp_close_shutdown+0x1b4>)
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c2ea:	4b37      	ldr	r3, [pc, #220]	@ (800c3c8 <tcp_close_shutdown+0x1b8>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d102      	bne.n	800c2fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c2f4:	f003 fd5c 	bl	800fdb0 <tcp_trigger_input_pcb_close>
 800c2f8:	e002      	b.n	800c300 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff fed6 	bl	800c0ac <tcp_free>
      }
      return ERR_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	e050      	b.n	800c3a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	7d1b      	ldrb	r3, [r3, #20]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d03b      	beq.n	800c384 <tcp_close_shutdown+0x174>
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	dc44      	bgt.n	800c39a <tcp_close_shutdown+0x18a>
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <tcp_close_shutdown+0x10a>
 800c314:	2b01      	cmp	r3, #1
 800c316:	d02a      	beq.n	800c36e <tcp_close_shutdown+0x15e>
 800c318:	e03f      	b.n	800c39a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	8adb      	ldrh	r3, [r3, #22]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d021      	beq.n	800c366 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c322:	4b2a      	ldr	r3, [pc, #168]	@ (800c3cc <tcp_close_shutdown+0x1bc>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d105      	bne.n	800c338 <tcp_close_shutdown+0x128>
 800c32c:	4b27      	ldr	r3, [pc, #156]	@ (800c3cc <tcp_close_shutdown+0x1bc>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	4a26      	ldr	r2, [pc, #152]	@ (800c3cc <tcp_close_shutdown+0x1bc>)
 800c334:	6013      	str	r3, [r2, #0]
 800c336:	e013      	b.n	800c360 <tcp_close_shutdown+0x150>
 800c338:	4b24      	ldr	r3, [pc, #144]	@ (800c3cc <tcp_close_shutdown+0x1bc>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	60bb      	str	r3, [r7, #8]
 800c33e:	e00c      	b.n	800c35a <tcp_close_shutdown+0x14a>
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	429a      	cmp	r2, r3
 800c348:	d104      	bne.n	800c354 <tcp_close_shutdown+0x144>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	68da      	ldr	r2, [r3, #12]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	60da      	str	r2, [r3, #12]
 800c352:	e005      	b.n	800c360 <tcp_close_shutdown+0x150>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	60bb      	str	r3, [r7, #8]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1ef      	bne.n	800c340 <tcp_close_shutdown+0x130>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff fea0 	bl	800c0ac <tcp_free>
      break;
 800c36c:	e01a      	b.n	800c3a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff ff14 	bl	800c19c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4816      	ldr	r0, [pc, #88]	@ (800c3d0 <tcp_close_shutdown+0x1c0>)
 800c378:	f001 f8aa 	bl	800d4d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff feb1 	bl	800c0e4 <tcp_free_listen>
      break;
 800c382:	e00f      	b.n	800c3a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	480e      	ldr	r0, [pc, #56]	@ (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c388:	f001 f8a2 	bl	800d4d0 <tcp_pcb_remove>
 800c38c:	4b0d      	ldr	r3, [pc, #52]	@ (800c3c4 <tcp_close_shutdown+0x1b4>)
 800c38e:	2201      	movs	r2, #1
 800c390:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff fe8a 	bl	800c0ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c398:	e004      	b.n	800c3a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f81a 	bl	800c3d4 <tcp_close_shutdown_fin>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	e000      	b.n	800c3a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	080164d0 	.word	0x080164d0
 800c3b4:	080165a4 	.word	0x080165a4
 800c3b8:	08016514 	.word	0x08016514
 800c3bc:	080165c4 	.word	0x080165c4
 800c3c0:	2000d7f0 	.word	0x2000d7f0
 800c3c4:	2000d7f8 	.word	0x2000d7f8
 800c3c8:	2000d830 	.word	0x2000d830
 800c3cc:	2000d7e8 	.word	0x2000d7e8
 800c3d0:	2000d7ec 	.word	0x2000d7ec

0800c3d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <tcp_close_shutdown_fin+0x1c>
 800c3e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c49c <tcp_close_shutdown_fin+0xc8>)
 800c3e4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c3e8:	492d      	ldr	r1, [pc, #180]	@ (800c4a0 <tcp_close_shutdown_fin+0xcc>)
 800c3ea:	482e      	ldr	r0, [pc, #184]	@ (800c4a4 <tcp_close_shutdown_fin+0xd0>)
 800c3ec:	f008 faf2 	bl	80149d4 <iprintf>

  switch (pcb->state) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	7d1b      	ldrb	r3, [r3, #20]
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	d020      	beq.n	800c43a <tcp_close_shutdown_fin+0x66>
 800c3f8:	2b07      	cmp	r3, #7
 800c3fa:	dc2b      	bgt.n	800c454 <tcp_close_shutdown_fin+0x80>
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d002      	beq.n	800c406 <tcp_close_shutdown_fin+0x32>
 800c400:	2b04      	cmp	r3, #4
 800c402:	d00d      	beq.n	800c420 <tcp_close_shutdown_fin+0x4c>
 800c404:	e026      	b.n	800c454 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f003 fee2 	bl	80101d0 <tcp_send_fin>
 800c40c:	4603      	mov	r3, r0
 800c40e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d11f      	bne.n	800c458 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2205      	movs	r2, #5
 800c41c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c41e:	e01b      	b.n	800c458 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f003 fed5 	bl	80101d0 <tcp_send_fin>
 800c426:	4603      	mov	r3, r0
 800c428:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d114      	bne.n	800c45c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2205      	movs	r2, #5
 800c436:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c438:	e010      	b.n	800c45c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f003 fec8 	bl	80101d0 <tcp_send_fin>
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d109      	bne.n	800c460 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2209      	movs	r2, #9
 800c450:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c452:	e005      	b.n	800c460 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	e01c      	b.n	800c492 <tcp_close_shutdown_fin+0xbe>
      break;
 800c458:	bf00      	nop
 800c45a:	e002      	b.n	800c462 <tcp_close_shutdown_fin+0x8e>
      break;
 800c45c:	bf00      	nop
 800c45e:	e000      	b.n	800c462 <tcp_close_shutdown_fin+0x8e>
      break;
 800c460:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d103      	bne.n	800c472 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f003 ffee 	bl	801044c <tcp_output>
 800c470:	e00d      	b.n	800c48e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d108      	bne.n	800c48e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	8b5b      	ldrh	r3, [r3, #26]
 800c480:	f043 0308 	orr.w	r3, r3, #8
 800c484:	b29a      	uxth	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	e001      	b.n	800c492 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	080164d0 	.word	0x080164d0
 800c4a0:	08016580 	.word	0x08016580
 800c4a4:	08016514 	.word	0x08016514

0800c4a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d109      	bne.n	800c4ca <tcp_close+0x22>
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f4 <tcp_close+0x4c>)
 800c4b8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c4bc:	490e      	ldr	r1, [pc, #56]	@ (800c4f8 <tcp_close+0x50>)
 800c4be:	480f      	ldr	r0, [pc, #60]	@ (800c4fc <tcp_close+0x54>)
 800c4c0:	f008 fa88 	bl	80149d4 <iprintf>
 800c4c4:	f06f 030f 	mvn.w	r3, #15
 800c4c8:	e00f      	b.n	800c4ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7d1b      	ldrb	r3, [r3, #20]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d006      	beq.n	800c4e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	8b5b      	ldrh	r3, [r3, #26]
 800c4d6:	f043 0310 	orr.w	r3, r3, #16
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fe94 	bl	800c210 <tcp_close_shutdown>
 800c4e8:	4603      	mov	r3, r0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	080164d0 	.word	0x080164d0
 800c4f8:	080165e0 	.word	0x080165e0
 800c4fc:	08016514 	.word	0x08016514

0800c500 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08e      	sub	sp, #56	@ 0x38
 800c504:	af04      	add	r7, sp, #16
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d107      	bne.n	800c520 <tcp_abandon+0x20>
 800c510:	4b52      	ldr	r3, [pc, #328]	@ (800c65c <tcp_abandon+0x15c>)
 800c512:	f240 223d 	movw	r2, #573	@ 0x23d
 800c516:	4952      	ldr	r1, [pc, #328]	@ (800c660 <tcp_abandon+0x160>)
 800c518:	4852      	ldr	r0, [pc, #328]	@ (800c664 <tcp_abandon+0x164>)
 800c51a:	f008 fa5b 	bl	80149d4 <iprintf>
 800c51e:	e099      	b.n	800c654 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7d1b      	ldrb	r3, [r3, #20]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d106      	bne.n	800c536 <tcp_abandon+0x36>
 800c528:	4b4c      	ldr	r3, [pc, #304]	@ (800c65c <tcp_abandon+0x15c>)
 800c52a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c52e:	494e      	ldr	r1, [pc, #312]	@ (800c668 <tcp_abandon+0x168>)
 800c530:	484c      	ldr	r0, [pc, #304]	@ (800c664 <tcp_abandon+0x164>)
 800c532:	f008 fa4f 	bl	80149d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	7d1b      	ldrb	r3, [r3, #20]
 800c53a:	2b0a      	cmp	r3, #10
 800c53c:	d107      	bne.n	800c54e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	484a      	ldr	r0, [pc, #296]	@ (800c66c <tcp_abandon+0x16c>)
 800c542:	f000 ffc5 	bl	800d4d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff fdb0 	bl	800c0ac <tcp_free>
 800c54c:	e082      	b.n	800c654 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c54e:	2300      	movs	r3, #0
 800c550:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c55a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c560:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c568:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	7d1b      	ldrb	r3, [r3, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d126      	bne.n	800c5c6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	8adb      	ldrh	r3, [r3, #22]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d02e      	beq.n	800c5de <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c580:	4b3b      	ldr	r3, [pc, #236]	@ (800c670 <tcp_abandon+0x170>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	429a      	cmp	r2, r3
 800c588:	d105      	bne.n	800c596 <tcp_abandon+0x96>
 800c58a:	4b39      	ldr	r3, [pc, #228]	@ (800c670 <tcp_abandon+0x170>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	4a37      	ldr	r2, [pc, #220]	@ (800c670 <tcp_abandon+0x170>)
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	e013      	b.n	800c5be <tcp_abandon+0xbe>
 800c596:	4b36      	ldr	r3, [pc, #216]	@ (800c670 <tcp_abandon+0x170>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	61fb      	str	r3, [r7, #28]
 800c59c:	e00c      	b.n	800c5b8 <tcp_abandon+0xb8>
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d104      	bne.n	800c5b2 <tcp_abandon+0xb2>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68da      	ldr	r2, [r3, #12]
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	60da      	str	r2, [r3, #12]
 800c5b0:	e005      	b.n	800c5be <tcp_abandon+0xbe>
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1ef      	bne.n	800c59e <tcp_abandon+0x9e>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	60da      	str	r2, [r3, #12]
 800c5c4:	e00b      	b.n	800c5de <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	8adb      	ldrh	r3, [r3, #22]
 800c5ce:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4828      	ldr	r0, [pc, #160]	@ (800c674 <tcp_abandon+0x174>)
 800c5d4:	f000 ff7c 	bl	800d4d0 <tcp_pcb_remove>
 800c5d8:	4b27      	ldr	r3, [pc, #156]	@ (800c678 <tcp_abandon+0x178>)
 800c5da:	2201      	movs	r2, #1
 800c5dc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d004      	beq.n	800c5f0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fd1e 	bl	800d02c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 fd15 	bl	800d02c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fd0c 	bl	800d02c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00e      	beq.n	800c638 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c61a:	6879      	ldr	r1, [r7, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3304      	adds	r3, #4
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	8b12      	ldrh	r2, [r2, #24]
 800c624:	9202      	str	r2, [sp, #8]
 800c626:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c628:	9201      	str	r2, [sp, #4]
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	460b      	mov	r3, r1
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	69b9      	ldr	r1, [r7, #24]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f004 fcbe 	bl	8010fb4 <tcp_rst>
    }
    last_state = pcb->state;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7d1b      	ldrb	r3, [r3, #20]
 800c63c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff fd34 	bl	800c0ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <tcp_abandon+0x154>
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f06f 010c 	mvn.w	r1, #12
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	4798      	blx	r3
  }
}
 800c654:	3728      	adds	r7, #40	@ 0x28
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	080164d0 	.word	0x080164d0
 800c660:	08016614 	.word	0x08016614
 800c664:	08016514 	.word	0x08016514
 800c668:	08016630 	.word	0x08016630
 800c66c:	2000d7f4 	.word	0x2000d7f4
 800c670:	2000d7e8 	.word	0x2000d7e8
 800c674:	2000d7f0 	.word	0x2000d7f0
 800c678:	2000d7f8 	.word	0x2000d7f8

0800c67c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c684:	2101      	movs	r1, #1
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff ff3a 	bl	800c500 <tcp_abandon>
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d106      	bne.n	800c6b0 <tcp_update_rcv_ann_wnd+0x1c>
 800c6a2:	4b25      	ldr	r3, [pc, #148]	@ (800c738 <tcp_update_rcv_ann_wnd+0xa4>)
 800c6a4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c6a8:	4924      	ldr	r1, [pc, #144]	@ (800c73c <tcp_update_rcv_ann_wnd+0xa8>)
 800c6aa:	4825      	ldr	r0, [pc, #148]	@ (800c740 <tcp_update_rcv_ann_wnd+0xac>)
 800c6ac:	f008 f992 	bl	80149d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c6b8:	4413      	add	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c6c4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c6c8:	bf28      	it	cs
 800c6ca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c6ce:	b292      	uxth	r2, r2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	db08      	blt.n	800c6ec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	e020      	b.n	800c72e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dd03      	ble.n	800c702 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c700:	e014      	b.n	800c72c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c714:	d306      	bcc.n	800c724 <tcp_update_rcv_ann_wnd+0x90>
 800c716:	4b08      	ldr	r3, [pc, #32]	@ (800c738 <tcp_update_rcv_ann_wnd+0xa4>)
 800c718:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c71c:	4909      	ldr	r1, [pc, #36]	@ (800c744 <tcp_update_rcv_ann_wnd+0xb0>)
 800c71e:	4808      	ldr	r0, [pc, #32]	@ (800c740 <tcp_update_rcv_ann_wnd+0xac>)
 800c720:	f008 f958 	bl	80149d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	b29a      	uxth	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c72c:	2300      	movs	r3, #0
  }
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	080164d0 	.word	0x080164d0
 800c73c:	0801672c 	.word	0x0801672c
 800c740:	08016514 	.word	0x08016514
 800c744:	08016750 	.word	0x08016750

0800c748 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	460b      	mov	r3, r1
 800c752:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d107      	bne.n	800c76a <tcp_recved+0x22>
 800c75a:	4b1f      	ldr	r3, [pc, #124]	@ (800c7d8 <tcp_recved+0x90>)
 800c75c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c760:	491e      	ldr	r1, [pc, #120]	@ (800c7dc <tcp_recved+0x94>)
 800c762:	481f      	ldr	r0, [pc, #124]	@ (800c7e0 <tcp_recved+0x98>)
 800c764:	f008 f936 	bl	80149d4 <iprintf>
 800c768:	e032      	b.n	800c7d0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d106      	bne.n	800c780 <tcp_recved+0x38>
 800c772:	4b19      	ldr	r3, [pc, #100]	@ (800c7d8 <tcp_recved+0x90>)
 800c774:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c778:	491a      	ldr	r1, [pc, #104]	@ (800c7e4 <tcp_recved+0x9c>)
 800c77a:	4819      	ldr	r0, [pc, #100]	@ (800c7e0 <tcp_recved+0x98>)
 800c77c:	f008 f92a 	bl	80149d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c784:	887b      	ldrh	r3, [r7, #2]
 800c786:	4413      	add	r3, r2
 800c788:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c78a:	89fb      	ldrh	r3, [r7, #14]
 800c78c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c790:	d804      	bhi.n	800c79c <tcp_recved+0x54>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c796:	89fa      	ldrh	r2, [r7, #14]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d204      	bcs.n	800c7a6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c7a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c7a4:	e002      	b.n	800c7ac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	89fa      	ldrh	r2, [r7, #14]
 800c7aa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff ff71 	bl	800c694 <tcp_update_rcv_ann_wnd>
 800c7b2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c7ba:	d309      	bcc.n	800c7d0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	8b5b      	ldrh	r3, [r3, #26]
 800c7c0:	f043 0302 	orr.w	r3, r3, #2
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f003 fe3e 	bl	801044c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	080164d0 	.word	0x080164d0
 800c7dc:	0801676c 	.word	0x0801676c
 800c7e0:	08016514 	.word	0x08016514
 800c7e4:	08016784 	.word	0x08016784

0800c7e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c7e8:	b5b0      	push	{r4, r5, r7, lr}
 800c7ea:	b090      	sub	sp, #64	@ 0x40
 800c7ec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c7f4:	4b95      	ldr	r3, [pc, #596]	@ (800ca4c <tcp_slowtmr+0x264>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	4a94      	ldr	r2, [pc, #592]	@ (800ca4c <tcp_slowtmr+0x264>)
 800c7fc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c7fe:	4b94      	ldr	r3, [pc, #592]	@ (800ca50 <tcp_slowtmr+0x268>)
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	3301      	adds	r3, #1
 800c804:	b2da      	uxtb	r2, r3
 800c806:	4b92      	ldr	r3, [pc, #584]	@ (800ca50 <tcp_slowtmr+0x268>)
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	e000      	b.n	800c80e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c80c:	bf00      	nop
  prev = NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c812:	4b90      	ldr	r3, [pc, #576]	@ (800ca54 <tcp_slowtmr+0x26c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c818:	e29d      	b.n	800cd56 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81c:	7d1b      	ldrb	r3, [r3, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <tcp_slowtmr+0x48>
 800c822:	4b8d      	ldr	r3, [pc, #564]	@ (800ca58 <tcp_slowtmr+0x270>)
 800c824:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c828:	498c      	ldr	r1, [pc, #560]	@ (800ca5c <tcp_slowtmr+0x274>)
 800c82a:	488d      	ldr	r0, [pc, #564]	@ (800ca60 <tcp_slowtmr+0x278>)
 800c82c:	f008 f8d2 	bl	80149d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c832:	7d1b      	ldrb	r3, [r3, #20]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d106      	bne.n	800c846 <tcp_slowtmr+0x5e>
 800c838:	4b87      	ldr	r3, [pc, #540]	@ (800ca58 <tcp_slowtmr+0x270>)
 800c83a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c83e:	4989      	ldr	r1, [pc, #548]	@ (800ca64 <tcp_slowtmr+0x27c>)
 800c840:	4887      	ldr	r0, [pc, #540]	@ (800ca60 <tcp_slowtmr+0x278>)
 800c842:	f008 f8c7 	bl	80149d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c848:	7d1b      	ldrb	r3, [r3, #20]
 800c84a:	2b0a      	cmp	r3, #10
 800c84c:	d106      	bne.n	800c85c <tcp_slowtmr+0x74>
 800c84e:	4b82      	ldr	r3, [pc, #520]	@ (800ca58 <tcp_slowtmr+0x270>)
 800c850:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c854:	4984      	ldr	r1, [pc, #528]	@ (800ca68 <tcp_slowtmr+0x280>)
 800c856:	4882      	ldr	r0, [pc, #520]	@ (800ca60 <tcp_slowtmr+0x278>)
 800c858:	f008 f8bc 	bl	80149d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85e:	7f9a      	ldrb	r2, [r3, #30]
 800c860:	4b7b      	ldr	r3, [pc, #492]	@ (800ca50 <tcp_slowtmr+0x268>)
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	429a      	cmp	r2, r3
 800c866:	d105      	bne.n	800c874 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c872:	e270      	b.n	800cd56 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800c874:	4b76      	ldr	r3, [pc, #472]	@ (800ca50 <tcp_slowtmr+0x268>)
 800c876:	781a      	ldrb	r2, [r3, #0]
 800c878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88a:	7d1b      	ldrb	r3, [r3, #20]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d10a      	bne.n	800c8a6 <tcp_slowtmr+0xbe>
 800c890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c896:	2b05      	cmp	r3, #5
 800c898:	d905      	bls.n	800c8a6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c89a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c89e:	3301      	adds	r3, #1
 800c8a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8a4:	e11e      	b.n	800cae4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c8ac:	2b0b      	cmp	r3, #11
 800c8ae:	d905      	bls.n	800c8bc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8ba:	e113      	b.n	800cae4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d075      	beq.n	800c9b2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d006      	beq.n	800c8dc <tcp_slowtmr+0xf4>
 800c8ce:	4b62      	ldr	r3, [pc, #392]	@ (800ca58 <tcp_slowtmr+0x270>)
 800c8d0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c8d4:	4965      	ldr	r1, [pc, #404]	@ (800ca6c <tcp_slowtmr+0x284>)
 800c8d6:	4862      	ldr	r0, [pc, #392]	@ (800ca60 <tcp_slowtmr+0x278>)
 800c8d8:	f008 f87c 	bl	80149d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d106      	bne.n	800c8f2 <tcp_slowtmr+0x10a>
 800c8e4:	4b5c      	ldr	r3, [pc, #368]	@ (800ca58 <tcp_slowtmr+0x270>)
 800c8e6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c8ea:	4961      	ldr	r1, [pc, #388]	@ (800ca70 <tcp_slowtmr+0x288>)
 800c8ec:	485c      	ldr	r0, [pc, #368]	@ (800ca60 <tcp_slowtmr+0x278>)
 800c8ee:	f008 f871 	bl	80149d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c8f8:	2b0b      	cmp	r3, #11
 800c8fa:	d905      	bls.n	800c908 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c900:	3301      	adds	r3, #1
 800c902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c906:	e0ed      	b.n	800cae4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c90e:	3b01      	subs	r3, #1
 800c910:	4a58      	ldr	r2, [pc, #352]	@ (800ca74 <tcp_slowtmr+0x28c>)
 800c912:	5cd3      	ldrb	r3, [r2, r3]
 800c914:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c918:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c91c:	7c7a      	ldrb	r2, [r7, #17]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d907      	bls.n	800c932 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c924:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c928:	3301      	adds	r3, #1
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c934:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c938:	7c7a      	ldrb	r2, [r7, #17]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	f200 80d2 	bhi.w	800cae4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c940:	2301      	movs	r3, #1
 800c942:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d108      	bne.n	800c960 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c94e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c950:	f004 fc24 	bl	801119c <tcp_zero_window_probe>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d014      	beq.n	800c984 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c95a:	2300      	movs	r3, #0
 800c95c:	623b      	str	r3, [r7, #32]
 800c95e:	e011      	b.n	800c984 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c966:	4619      	mov	r1, r3
 800c968:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c96a:	f003 fae9 	bl	800ff40 <tcp_split_unsent_seg>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d107      	bne.n	800c984 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c974:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c976:	f003 fd69 	bl	801044c <tcp_output>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c980:	2300      	movs	r3, #0
 800c982:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 80ac 	beq.w	800cae4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c996:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c99a:	2b06      	cmp	r3, #6
 800c99c:	f200 80a2 	bhi.w	800cae4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c9b0:	e098      	b.n	800cae4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	db0f      	blt.n	800c9dc <tcp_slowtmr+0x1f4>
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c9c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d008      	beq.n	800c9dc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	b21a      	sxth	r2, r3
 800c9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9da:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	db7b      	blt.n	800cae4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c9ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9ee:	f004 f821 	bl	8010a34 <tcp_rexmit_rto_prepare>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d007      	beq.n	800ca08 <tcp_slowtmr+0x220>
 800c9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d171      	bne.n	800cae4 <tcp_slowtmr+0x2fc>
 800ca00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d06d      	beq.n	800cae4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ca08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0a:	7d1b      	ldrb	r3, [r3, #20]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	d03a      	beq.n	800ca86 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ca10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca16:	2b0c      	cmp	r3, #12
 800ca18:	bf28      	it	cs
 800ca1a:	230c      	movcs	r3, #12
 800ca1c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ca1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca24:	10db      	asrs	r3, r3, #3
 800ca26:	b21b      	sxth	r3, r3
 800ca28:	461a      	mov	r2, r3
 800ca2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca30:	4413      	add	r3, r2
 800ca32:	7efa      	ldrb	r2, [r7, #27]
 800ca34:	4910      	ldr	r1, [pc, #64]	@ (800ca78 <tcp_slowtmr+0x290>)
 800ca36:	5c8a      	ldrb	r2, [r1, r2]
 800ca38:	4093      	lsls	r3, r2
 800ca3a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ca42:	4293      	cmp	r3, r2
 800ca44:	dc1a      	bgt.n	800ca7c <tcp_slowtmr+0x294>
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	b21a      	sxth	r2, r3
 800ca4a:	e019      	b.n	800ca80 <tcp_slowtmr+0x298>
 800ca4c:	2000d7e4 	.word	0x2000d7e4
 800ca50:	2000d7fa 	.word	0x2000d7fa
 800ca54:	2000d7f0 	.word	0x2000d7f0
 800ca58:	080164d0 	.word	0x080164d0
 800ca5c:	08016814 	.word	0x08016814
 800ca60:	08016514 	.word	0x08016514
 800ca64:	08016840 	.word	0x08016840
 800ca68:	0801686c 	.word	0x0801686c
 800ca6c:	0801689c 	.word	0x0801689c
 800ca70:	080168d0 	.word	0x080168d0
 800ca74:	080184e8 	.word	0x080184e8
 800ca78:	080184d8 	.word	0x080184d8
 800ca7c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ca80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ca86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca88:	2200      	movs	r2, #0
 800ca8a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ca8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ca92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	bf28      	it	cs
 800ca9c:	4613      	movcs	r3, r2
 800ca9e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800caa0:	8a7b      	ldrh	r3, [r7, #18]
 800caa2:	085b      	lsrs	r3, r3, #1
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800caac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	b29b      	uxth	r3, r3
 800caba:	429a      	cmp	r2, r3
 800cabc:	d206      	bcs.n	800cacc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800cacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cace:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800cad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad8:	2200      	movs	r2, #0
 800cada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800cade:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cae0:	f004 f818 	bl	8010b14 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800cae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae6:	7d1b      	ldrb	r3, [r3, #20]
 800cae8:	2b06      	cmp	r3, #6
 800caea:	d111      	bne.n	800cb10 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800caec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caee:	8b5b      	ldrh	r3, [r3, #26]
 800caf0:	f003 0310 	and.w	r3, r3, #16
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00b      	beq.n	800cb10 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800caf8:	4b9c      	ldr	r3, [pc, #624]	@ (800cd6c <tcp_slowtmr+0x584>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafe:	6a1b      	ldr	r3, [r3, #32]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	2b28      	cmp	r3, #40	@ 0x28
 800cb04:	d904      	bls.n	800cb10 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800cb06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb12:	7a5b      	ldrb	r3, [r3, #9]
 800cb14:	f003 0308 	and.w	r3, r3, #8
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d04a      	beq.n	800cbb2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb20:	2b04      	cmp	r3, #4
 800cb22:	d003      	beq.n	800cb2c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb26:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cb28:	2b07      	cmp	r3, #7
 800cb2a:	d142      	bne.n	800cbb2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb2c:	4b8f      	ldr	r3, [pc, #572]	@ (800cd6c <tcp_slowtmr+0x584>)
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb38:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cb3c:	4b8c      	ldr	r3, [pc, #560]	@ (800cd70 <tcp_slowtmr+0x588>)
 800cb3e:	440b      	add	r3, r1
 800cb40:	498c      	ldr	r1, [pc, #560]	@ (800cd74 <tcp_slowtmr+0x58c>)
 800cb42:	fba1 1303 	umull	r1, r3, r1, r3
 800cb46:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d90a      	bls.n	800cb62 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800cb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb50:	3301      	adds	r3, #1
 800cb52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800cb56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb60:	e027      	b.n	800cbb2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb62:	4b82      	ldr	r3, [pc, #520]	@ (800cd6c <tcp_slowtmr+0x584>)
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb68:	6a1b      	ldr	r3, [r3, #32]
 800cb6a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb74:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cb78:	4618      	mov	r0, r3
 800cb7a:	4b7f      	ldr	r3, [pc, #508]	@ (800cd78 <tcp_slowtmr+0x590>)
 800cb7c:	fb00 f303 	mul.w	r3, r0, r3
 800cb80:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cb82:	497c      	ldr	r1, [pc, #496]	@ (800cd74 <tcp_slowtmr+0x58c>)
 800cb84:	fba1 1303 	umull	r1, r3, r1, r3
 800cb88:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d911      	bls.n	800cbb2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cb8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb90:	f004 fac4 	bl	801111c <tcp_keepalive>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cb9a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d107      	bne.n	800cbb2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cba8:	3301      	adds	r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d011      	beq.n	800cbde <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cbba:	4b6c      	ldr	r3, [pc, #432]	@ (800cd6c <tcp_slowtmr+0x584>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	1ad2      	subs	r2, r2, r3
 800cbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cbca:	4619      	mov	r1, r3
 800cbcc:	460b      	mov	r3, r1
 800cbce:	005b      	lsls	r3, r3, #1
 800cbd0:	440b      	add	r3, r1
 800cbd2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d302      	bcc.n	800cbde <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800cbd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbda:	f000 fddd 	bl	800d798 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe0:	7d1b      	ldrb	r3, [r3, #20]
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d10b      	bne.n	800cbfe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbe6:	4b61      	ldr	r3, [pc, #388]	@ (800cd6c <tcp_slowtmr+0x584>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2b28      	cmp	r3, #40	@ 0x28
 800cbf2:	d904      	bls.n	800cbfe <tcp_slowtmr+0x416>
        ++pcb_remove;
 800cbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc00:	7d1b      	ldrb	r3, [r3, #20]
 800cc02:	2b09      	cmp	r3, #9
 800cc04:	d10b      	bne.n	800cc1e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc06:	4b59      	ldr	r3, [pc, #356]	@ (800cd6c <tcp_slowtmr+0x584>)
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	2bf0      	cmp	r3, #240	@ 0xf0
 800cc12:	d904      	bls.n	800cc1e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cc14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc18:	3301      	adds	r3, #1
 800cc1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800cc1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d060      	beq.n	800cce8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800cc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc2c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800cc2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc30:	f000 fbfe 	bl	800d430 <tcp_pcb_purge>
      if (prev != NULL) {
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d010      	beq.n	800cc5c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cc3a:	4b50      	ldr	r3, [pc, #320]	@ (800cd7c <tcp_slowtmr+0x594>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d106      	bne.n	800cc52 <tcp_slowtmr+0x46a>
 800cc44:	4b4e      	ldr	r3, [pc, #312]	@ (800cd80 <tcp_slowtmr+0x598>)
 800cc46:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cc4a:	494e      	ldr	r1, [pc, #312]	@ (800cd84 <tcp_slowtmr+0x59c>)
 800cc4c:	484e      	ldr	r0, [pc, #312]	@ (800cd88 <tcp_slowtmr+0x5a0>)
 800cc4e:	f007 fec1 	bl	80149d4 <iprintf>
        prev->next = pcb->next;
 800cc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc54:	68da      	ldr	r2, [r3, #12]
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	60da      	str	r2, [r3, #12]
 800cc5a:	e00f      	b.n	800cc7c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cc5c:	4b47      	ldr	r3, [pc, #284]	@ (800cd7c <tcp_slowtmr+0x594>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d006      	beq.n	800cc74 <tcp_slowtmr+0x48c>
 800cc66:	4b46      	ldr	r3, [pc, #280]	@ (800cd80 <tcp_slowtmr+0x598>)
 800cc68:	f240 5271 	movw	r2, #1393	@ 0x571
 800cc6c:	4947      	ldr	r1, [pc, #284]	@ (800cd8c <tcp_slowtmr+0x5a4>)
 800cc6e:	4846      	ldr	r0, [pc, #280]	@ (800cd88 <tcp_slowtmr+0x5a0>)
 800cc70:	f007 feb0 	bl	80149d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	4a40      	ldr	r2, [pc, #256]	@ (800cd7c <tcp_slowtmr+0x594>)
 800cc7a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cc7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d013      	beq.n	800ccac <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc86:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cc8c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc90:	3304      	adds	r3, #4
 800cc92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc94:	8ad2      	ldrh	r2, [r2, #22]
 800cc96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc98:	8b09      	ldrh	r1, [r1, #24]
 800cc9a:	9102      	str	r1, [sp, #8]
 800cc9c:	9201      	str	r2, [sp, #4]
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	462b      	mov	r3, r5
 800cca2:	4622      	mov	r2, r4
 800cca4:	4601      	mov	r1, r0
 800cca6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cca8:	f004 f984 	bl	8010fb4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ccac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ccb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb4:	7d1b      	ldrb	r3, [r3, #20]
 800ccb6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ccb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ccbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ccc2:	6838      	ldr	r0, [r7, #0]
 800ccc4:	f7ff f9f2 	bl	800c0ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ccc8:	4b31      	ldr	r3, [pc, #196]	@ (800cd90 <tcp_slowtmr+0x5a8>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <tcp_slowtmr+0x4f6>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f06f 010c 	mvn.w	r1, #12
 800ccda:	68b8      	ldr	r0, [r7, #8]
 800ccdc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ccde:	4b2c      	ldr	r3, [pc, #176]	@ (800cd90 <tcp_slowtmr+0x5a8>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d037      	beq.n	800cd56 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cce6:	e592      	b.n	800c80e <tcp_slowtmr+0x26>
      prev = pcb;
 800cce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ccec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ccf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf4:	7f1b      	ldrb	r3, [r3, #28]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccfc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ccfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd00:	7f1a      	ldrb	r2, [r3, #28]
 800cd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd04:	7f5b      	ldrb	r3, [r3, #29]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d325      	bcc.n	800cd56 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800cd10:	4b1f      	ldr	r3, [pc, #124]	@ (800cd90 <tcp_slowtmr+0x5a8>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00b      	beq.n	800cd38 <tcp_slowtmr+0x550>
 800cd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd28:	6912      	ldr	r2, [r2, #16]
 800cd2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4798      	blx	r3
 800cd30:	4603      	mov	r3, r0
 800cd32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cd36:	e002      	b.n	800cd3e <tcp_slowtmr+0x556>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cd3e:	4b14      	ldr	r3, [pc, #80]	@ (800cd90 <tcp_slowtmr+0x5a8>)
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f47f ad62 	bne.w	800c80c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cd48:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d102      	bne.n	800cd56 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cd50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd52:	f003 fb7b 	bl	801044c <tcp_output>
  while (pcb != NULL) {
 800cd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f47f ad5e 	bne.w	800c81a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cd62:	4b0c      	ldr	r3, [pc, #48]	@ (800cd94 <tcp_slowtmr+0x5ac>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cd68:	e069      	b.n	800ce3e <tcp_slowtmr+0x656>
 800cd6a:	bf00      	nop
 800cd6c:	2000d7e4 	.word	0x2000d7e4
 800cd70:	000a4cb8 	.word	0x000a4cb8
 800cd74:	10624dd3 	.word	0x10624dd3
 800cd78:	000124f8 	.word	0x000124f8
 800cd7c:	2000d7f0 	.word	0x2000d7f0
 800cd80:	080164d0 	.word	0x080164d0
 800cd84:	08016908 	.word	0x08016908
 800cd88:	08016514 	.word	0x08016514
 800cd8c:	08016934 	.word	0x08016934
 800cd90:	2000d7f8 	.word	0x2000d7f8
 800cd94:	2000d7f4 	.word	0x2000d7f4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd9a:	7d1b      	ldrb	r3, [r3, #20]
 800cd9c:	2b0a      	cmp	r3, #10
 800cd9e:	d006      	beq.n	800cdae <tcp_slowtmr+0x5c6>
 800cda0:	4b2b      	ldr	r3, [pc, #172]	@ (800ce50 <tcp_slowtmr+0x668>)
 800cda2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800cda6:	492b      	ldr	r1, [pc, #172]	@ (800ce54 <tcp_slowtmr+0x66c>)
 800cda8:	482b      	ldr	r0, [pc, #172]	@ (800ce58 <tcp_slowtmr+0x670>)
 800cdaa:	f007 fe13 	bl	80149d4 <iprintf>
    pcb_remove = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cdb4:	4b29      	ldr	r3, [pc, #164]	@ (800ce5c <tcp_slowtmr+0x674>)
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	2bf0      	cmp	r3, #240	@ 0xf0
 800cdc0:	d904      	bls.n	800cdcc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800cdc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d02f      	beq.n	800ce34 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cdd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdd6:	f000 fb2b 	bl	800d430 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d010      	beq.n	800ce02 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cde0:	4b1f      	ldr	r3, [pc, #124]	@ (800ce60 <tcp_slowtmr+0x678>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d106      	bne.n	800cdf8 <tcp_slowtmr+0x610>
 800cdea:	4b19      	ldr	r3, [pc, #100]	@ (800ce50 <tcp_slowtmr+0x668>)
 800cdec:	f240 52af 	movw	r2, #1455	@ 0x5af
 800cdf0:	491c      	ldr	r1, [pc, #112]	@ (800ce64 <tcp_slowtmr+0x67c>)
 800cdf2:	4819      	ldr	r0, [pc, #100]	@ (800ce58 <tcp_slowtmr+0x670>)
 800cdf4:	f007 fdee 	bl	80149d4 <iprintf>
        prev->next = pcb->next;
 800cdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdfa:	68da      	ldr	r2, [r3, #12]
 800cdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfe:	60da      	str	r2, [r3, #12]
 800ce00:	e00f      	b.n	800ce22 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ce02:	4b17      	ldr	r3, [pc, #92]	@ (800ce60 <tcp_slowtmr+0x678>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d006      	beq.n	800ce1a <tcp_slowtmr+0x632>
 800ce0c:	4b10      	ldr	r3, [pc, #64]	@ (800ce50 <tcp_slowtmr+0x668>)
 800ce0e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ce12:	4915      	ldr	r1, [pc, #84]	@ (800ce68 <tcp_slowtmr+0x680>)
 800ce14:	4810      	ldr	r0, [pc, #64]	@ (800ce58 <tcp_slowtmr+0x670>)
 800ce16:	f007 fddd 	bl	80149d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ce1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	4a10      	ldr	r2, [pc, #64]	@ (800ce60 <tcp_slowtmr+0x678>)
 800ce20:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ce22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce24:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ce26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ce2c:	69f8      	ldr	r0, [r7, #28]
 800ce2e:	f7ff f93d 	bl	800c0ac <tcp_free>
 800ce32:	e004      	b.n	800ce3e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ce38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ce3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1a9      	bne.n	800cd98 <tcp_slowtmr+0x5b0>
    }
  }
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop
 800ce48:	3730      	adds	r7, #48	@ 0x30
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	080164d0 	.word	0x080164d0
 800ce54:	08016960 	.word	0x08016960
 800ce58:	08016514 	.word	0x08016514
 800ce5c:	2000d7e4 	.word	0x2000d7e4
 800ce60:	2000d7f4 	.word	0x2000d7f4
 800ce64:	08016990 	.word	0x08016990
 800ce68:	080169b8 	.word	0x080169b8

0800ce6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ce72:	4b2d      	ldr	r3, [pc, #180]	@ (800cf28 <tcp_fasttmr+0xbc>)
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	3301      	adds	r3, #1
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	4b2b      	ldr	r3, [pc, #172]	@ (800cf28 <tcp_fasttmr+0xbc>)
 800ce7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ce7e:	4b2b      	ldr	r3, [pc, #172]	@ (800cf2c <tcp_fasttmr+0xc0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ce84:	e048      	b.n	800cf18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	7f9a      	ldrb	r2, [r3, #30]
 800ce8a:	4b27      	ldr	r3, [pc, #156]	@ (800cf28 <tcp_fasttmr+0xbc>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d03f      	beq.n	800cf12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ce92:	4b25      	ldr	r3, [pc, #148]	@ (800cf28 <tcp_fasttmr+0xbc>)
 800ce94:	781a      	ldrb	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	8b5b      	ldrh	r3, [r3, #26]
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d010      	beq.n	800cec8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	8b5b      	ldrh	r3, [r3, #26]
 800ceaa:	f043 0302 	orr.w	r3, r3, #2
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f003 fac9 	bl	801044c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	8b5b      	ldrh	r3, [r3, #26]
 800cebe:	f023 0303 	bic.w	r3, r3, #3
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8b5b      	ldrh	r3, [r3, #26]
 800cecc:	f003 0308 	and.w	r3, r3, #8
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d009      	beq.n	800cee8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	8b5b      	ldrh	r3, [r3, #26]
 800ced8:	f023 0308 	bic.w	r3, r3, #8
 800cedc:	b29a      	uxth	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff fa76 	bl	800c3d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cef6:	4b0e      	ldr	r3, [pc, #56]	@ (800cf30 <tcp_fasttmr+0xc4>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f819 	bl	800cf34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cf02:	4b0b      	ldr	r3, [pc, #44]	@ (800cf30 <tcp_fasttmr+0xc4>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d000      	beq.n	800cf0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cf0a:	e7b8      	b.n	800ce7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	607b      	str	r3, [r7, #4]
 800cf10:	e002      	b.n	800cf18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1b3      	bne.n	800ce86 <tcp_fasttmr+0x1a>
    }
  }
}
 800cf1e:	bf00      	nop
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	2000d7fa 	.word	0x2000d7fa
 800cf2c:	2000d7f0 	.word	0x2000d7f0
 800cf30:	2000d7f8 	.word	0x2000d7f8

0800cf34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cf34:	b590      	push	{r4, r7, lr}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <tcp_process_refused_data+0x22>
 800cf42:	4b37      	ldr	r3, [pc, #220]	@ (800d020 <tcp_process_refused_data+0xec>)
 800cf44:	f240 6209 	movw	r2, #1545	@ 0x609
 800cf48:	4936      	ldr	r1, [pc, #216]	@ (800d024 <tcp_process_refused_data+0xf0>)
 800cf4a:	4837      	ldr	r0, [pc, #220]	@ (800d028 <tcp_process_refused_data+0xf4>)
 800cf4c:	f007 fd42 	bl	80149d4 <iprintf>
 800cf50:	f06f 030f 	mvn.w	r3, #15
 800cf54:	e060      	b.n	800d018 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf5a:	7b5b      	ldrb	r3, [r3, #13]
 800cf5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00b      	beq.n	800cf8c <tcp_process_refused_data+0x58>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6918      	ldr	r0, [r3, #16]
 800cf7e:	2300      	movs	r3, #0
 800cf80:	68ba      	ldr	r2, [r7, #8]
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	47a0      	blx	r4
 800cf86:	4603      	mov	r3, r0
 800cf88:	73fb      	strb	r3, [r7, #15]
 800cf8a:	e007      	b.n	800cf9c <tcp_process_refused_data+0x68>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	2000      	movs	r0, #0
 800cf94:	f000 f8a4 	bl	800d0e0 <tcp_recv_null>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d12a      	bne.n	800cffa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
 800cfa6:	f003 0320 	and.w	r3, r3, #32
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d033      	beq.n	800d016 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfb2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cfb6:	d005      	beq.n	800cfc4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00b      	beq.n	800cfe6 <tcp_process_refused_data+0xb2>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6918      	ldr	r0, [r3, #16]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	2200      	movs	r2, #0
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	47a0      	blx	r4
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73fb      	strb	r3, [r7, #15]
 800cfe4:	e001      	b.n	800cfea <tcp_process_refused_data+0xb6>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cfea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfee:	f113 0f0d 	cmn.w	r3, #13
 800cff2:	d110      	bne.n	800d016 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cff4:	f06f 030c 	mvn.w	r3, #12
 800cff8:	e00e      	b.n	800d018 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cffe:	f113 0f0d 	cmn.w	r3, #13
 800d002:	d102      	bne.n	800d00a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d004:	f06f 030c 	mvn.w	r3, #12
 800d008:	e006      	b.n	800d018 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d010:	f06f 0304 	mvn.w	r3, #4
 800d014:	e000      	b.n	800d018 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd90      	pop	{r4, r7, pc}
 800d020:	080164d0 	.word	0x080164d0
 800d024:	080169e0 	.word	0x080169e0
 800d028:	08016514 	.word	0x08016514

0800d02c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d034:	e007      	b.n	800d046 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f80a 	bl	800d056 <tcp_seg_free>
    seg = next;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f4      	bne.n	800d036 <tcp_segs_free+0xa>
  }
}
 800d04c:	bf00      	nop
 800d04e:	bf00      	nop
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00c      	beq.n	800d07e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d004      	beq.n	800d076 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	4618      	mov	r0, r3
 800d072:	f7fe fd5f 	bl	800bb34 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d076:	6879      	ldr	r1, [r7, #4]
 800d078:	2003      	movs	r0, #3
 800d07a:	f7fd feb7 	bl	800adec <memp_free>
  }
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
	...

0800d088 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d106      	bne.n	800d0a4 <tcp_seg_copy+0x1c>
 800d096:	4b0f      	ldr	r3, [pc, #60]	@ (800d0d4 <tcp_seg_copy+0x4c>)
 800d098:	f240 6282 	movw	r2, #1666	@ 0x682
 800d09c:	490e      	ldr	r1, [pc, #56]	@ (800d0d8 <tcp_seg_copy+0x50>)
 800d09e:	480f      	ldr	r0, [pc, #60]	@ (800d0dc <tcp_seg_copy+0x54>)
 800d0a0:	f007 fc98 	bl	80149d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d0a4:	2003      	movs	r0, #3
 800d0a6:	f7fd fe2b 	bl	800ad00 <memp_malloc>
 800d0aa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <tcp_seg_copy+0x2e>
    return NULL;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e00a      	b.n	800d0cc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d0b6:	2210      	movs	r2, #16
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f007 fd65 	bl	8014b8a <memcpy>
  pbuf_ref(cseg->p);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fddb 	bl	800bc80 <pbuf_ref>
  return cseg;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	080164d0 	.word	0x080164d0
 800d0d8:	08016a24 	.word	0x08016a24
 800d0dc:	08016514 	.word	0x08016514

0800d0e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
 800d0ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d109      	bne.n	800d108 <tcp_recv_null+0x28>
 800d0f4:	4b12      	ldr	r3, [pc, #72]	@ (800d140 <tcp_recv_null+0x60>)
 800d0f6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d0fa:	4912      	ldr	r1, [pc, #72]	@ (800d144 <tcp_recv_null+0x64>)
 800d0fc:	4812      	ldr	r0, [pc, #72]	@ (800d148 <tcp_recv_null+0x68>)
 800d0fe:	f007 fc69 	bl	80149d4 <iprintf>
 800d102:	f06f 030f 	mvn.w	r3, #15
 800d106:	e016      	b.n	800d136 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d009      	beq.n	800d122 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	891b      	ldrh	r3, [r3, #8]
 800d112:	4619      	mov	r1, r3
 800d114:	68b8      	ldr	r0, [r7, #8]
 800d116:	f7ff fb17 	bl	800c748 <tcp_recved>
    pbuf_free(p);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7fe fd0a 	bl	800bb34 <pbuf_free>
 800d120:	e008      	b.n	800d134 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d104      	bne.n	800d134 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d12a:	68b8      	ldr	r0, [r7, #8]
 800d12c:	f7ff f9bc 	bl	800c4a8 <tcp_close>
 800d130:	4603      	mov	r3, r0
 800d132:	e000      	b.n	800d136 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	080164d0 	.word	0x080164d0
 800d144:	08016a40 	.word	0x08016a40
 800d148:	08016514 	.word	0x08016514

0800d14c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	4603      	mov	r3, r0
 800d154:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	db01      	blt.n	800d162 <tcp_kill_prio+0x16>
 800d15e:	79fb      	ldrb	r3, [r7, #7]
 800d160:	e000      	b.n	800d164 <tcp_kill_prio+0x18>
 800d162:	237f      	movs	r3, #127	@ 0x7f
 800d164:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d166:	7afb      	ldrb	r3, [r7, #11]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d034      	beq.n	800d1d6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d16c:	7afb      	ldrb	r3, [r7, #11]
 800d16e:	3b01      	subs	r3, #1
 800d170:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d176:	2300      	movs	r3, #0
 800d178:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d17a:	4b19      	ldr	r3, [pc, #100]	@ (800d1e0 <tcp_kill_prio+0x94>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	e01f      	b.n	800d1c2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	7d5b      	ldrb	r3, [r3, #21]
 800d186:	7afa      	ldrb	r2, [r7, #11]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d80c      	bhi.n	800d1a6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d190:	7afa      	ldrb	r2, [r7, #11]
 800d192:	429a      	cmp	r2, r3
 800d194:	d112      	bne.n	800d1bc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d196:	4b13      	ldr	r3, [pc, #76]	@ (800d1e4 <tcp_kill_prio+0x98>)
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	6a1b      	ldr	r3, [r3, #32]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d80a      	bhi.n	800d1bc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d1e4 <tcp_kill_prio+0x98>)
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	6a1b      	ldr	r3, [r3, #32]
 800d1ae:	1ad3      	subs	r3, r2, r3
 800d1b0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	7d5b      	ldrb	r3, [r3, #21]
 800d1ba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	617b      	str	r3, [r7, #20]
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1dc      	bne.n	800d182 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d004      	beq.n	800d1d8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d1ce:	6938      	ldr	r0, [r7, #16]
 800d1d0:	f7ff fa54 	bl	800c67c <tcp_abort>
 800d1d4:	e000      	b.n	800d1d8 <tcp_kill_prio+0x8c>
    return;
 800d1d6:	bf00      	nop
  }
}
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	2000d7f0 	.word	0x2000d7f0
 800d1e4:	2000d7e4 	.word	0x2000d7e4

0800d1e8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b086      	sub	sp, #24
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	2b08      	cmp	r3, #8
 800d1f6:	d009      	beq.n	800d20c <tcp_kill_state+0x24>
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
 800d1fa:	2b09      	cmp	r3, #9
 800d1fc:	d006      	beq.n	800d20c <tcp_kill_state+0x24>
 800d1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d268 <tcp_kill_state+0x80>)
 800d200:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d204:	4919      	ldr	r1, [pc, #100]	@ (800d26c <tcp_kill_state+0x84>)
 800d206:	481a      	ldr	r0, [pc, #104]	@ (800d270 <tcp_kill_state+0x88>)
 800d208:	f007 fbe4 	bl	80149d4 <iprintf>

  inactivity = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d210:	2300      	movs	r3, #0
 800d212:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d214:	4b17      	ldr	r3, [pc, #92]	@ (800d274 <tcp_kill_state+0x8c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	617b      	str	r3, [r7, #20]
 800d21a:	e017      	b.n	800d24c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	7d1b      	ldrb	r3, [r3, #20]
 800d220:	79fa      	ldrb	r2, [r7, #7]
 800d222:	429a      	cmp	r2, r3
 800d224:	d10f      	bne.n	800d246 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d226:	4b14      	ldr	r3, [pc, #80]	@ (800d278 <tcp_kill_state+0x90>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	429a      	cmp	r2, r3
 800d234:	d807      	bhi.n	800d246 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d236:	4b10      	ldr	r3, [pc, #64]	@ (800d278 <tcp_kill_state+0x90>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1e4      	bne.n	800d21c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d003      	beq.n	800d260 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d258:	2100      	movs	r1, #0
 800d25a:	6938      	ldr	r0, [r7, #16]
 800d25c:	f7ff f950 	bl	800c500 <tcp_abandon>
  }
}
 800d260:	bf00      	nop
 800d262:	3718      	adds	r7, #24
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	080164d0 	.word	0x080164d0
 800d26c:	08016a5c 	.word	0x08016a5c
 800d270:	08016514 	.word	0x08016514
 800d274:	2000d7f0 	.word	0x2000d7f0
 800d278:	2000d7e4 	.word	0x2000d7e4

0800d27c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d28a:	4b12      	ldr	r3, [pc, #72]	@ (800d2d4 <tcp_kill_timewait+0x58>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e012      	b.n	800d2b8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d292:	4b11      	ldr	r3, [pc, #68]	@ (800d2d8 <tcp_kill_timewait+0x5c>)
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d807      	bhi.n	800d2b2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d8 <tcp_kill_timewait+0x5c>)
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e9      	bne.n	800d292 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d2c4:	68b8      	ldr	r0, [r7, #8]
 800d2c6:	f7ff f9d9 	bl	800c67c <tcp_abort>
  }
}
 800d2ca:	bf00      	nop
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	2000d7f4 	.word	0x2000d7f4
 800d2d8:	2000d7e4 	.word	0x2000d7e4

0800d2dc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d2e2:	4b10      	ldr	r3, [pc, #64]	@ (800d324 <tcp_handle_closepend+0x48>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d2e8:	e014      	b.n	800d314 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	8b5b      	ldrh	r3, [r3, #26]
 800d2f4:	f003 0308 	and.w	r3, r3, #8
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d009      	beq.n	800d310 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8b5b      	ldrh	r3, [r3, #26]
 800d300:	f023 0308 	bic.w	r3, r3, #8
 800d304:	b29a      	uxth	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7ff f862 	bl	800c3d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1e7      	bne.n	800d2ea <tcp_handle_closepend+0xe>
  }
}
 800d31a:	bf00      	nop
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	2000d7f0 	.word	0x2000d7f0

0800d328 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d332:	2001      	movs	r0, #1
 800d334:	f7fd fce4 	bl	800ad00 <memp_malloc>
 800d338:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d126      	bne.n	800d38e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d340:	f7ff ffcc 	bl	800d2dc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d344:	f7ff ff9a 	bl	800d27c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d348:	2001      	movs	r0, #1
 800d34a:	f7fd fcd9 	bl	800ad00 <memp_malloc>
 800d34e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d11b      	bne.n	800d38e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d356:	2009      	movs	r0, #9
 800d358:	f7ff ff46 	bl	800d1e8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d35c:	2001      	movs	r0, #1
 800d35e:	f7fd fccf 	bl	800ad00 <memp_malloc>
 800d362:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d111      	bne.n	800d38e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d36a:	2008      	movs	r0, #8
 800d36c:	f7ff ff3c 	bl	800d1e8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d370:	2001      	movs	r0, #1
 800d372:	f7fd fcc5 	bl	800ad00 <memp_malloc>
 800d376:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d107      	bne.n	800d38e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d37e:	79fb      	ldrb	r3, [r7, #7]
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff fee3 	bl	800d14c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d386:	2001      	movs	r0, #1
 800d388:	f7fd fcba 	bl	800ad00 <memp_malloc>
 800d38c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d03f      	beq.n	800d414 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d394:	229c      	movs	r2, #156	@ 0x9c
 800d396:	2100      	movs	r1, #0
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f007 fb80 	bl	8014a9e <memset>
    pcb->prio = prio;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	79fa      	ldrb	r2, [r7, #7]
 800d3a2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d3aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d3b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	22ff      	movs	r2, #255	@ 0xff
 800d3c2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d3ca:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2206      	movs	r2, #6
 800d3d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2206      	movs	r2, #6
 800d3d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3e0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d420 <tcp_alloc+0xf8>)
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d424 <tcp_alloc+0xfc>)
 800d3f4:	781a      	ldrb	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d400:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	4a08      	ldr	r2, [pc, #32]	@ (800d428 <tcp_alloc+0x100>)
 800d408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4a07      	ldr	r2, [pc, #28]	@ (800d42c <tcp_alloc+0x104>)
 800d410:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d414:	68fb      	ldr	r3, [r7, #12]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	2000d7e4 	.word	0x2000d7e4
 800d424:	2000d7fa 	.word	0x2000d7fa
 800d428:	0800d0e1 	.word	0x0800d0e1
 800d42c:	006ddd00 	.word	0x006ddd00

0800d430 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d107      	bne.n	800d44e <tcp_pcb_purge+0x1e>
 800d43e:	4b21      	ldr	r3, [pc, #132]	@ (800d4c4 <tcp_pcb_purge+0x94>)
 800d440:	f640 0251 	movw	r2, #2129	@ 0x851
 800d444:	4920      	ldr	r1, [pc, #128]	@ (800d4c8 <tcp_pcb_purge+0x98>)
 800d446:	4821      	ldr	r0, [pc, #132]	@ (800d4cc <tcp_pcb_purge+0x9c>)
 800d448:	f007 fac4 	bl	80149d4 <iprintf>
 800d44c:	e037      	b.n	800d4be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	7d1b      	ldrb	r3, [r3, #20]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d033      	beq.n	800d4be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d45a:	2b0a      	cmp	r3, #10
 800d45c:	d02f      	beq.n	800d4be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d462:	2b01      	cmp	r3, #1
 800d464:	d02b      	beq.n	800d4be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe fb5e 	bl	800bb34 <pbuf_free>
      pcb->refused_data = NULL;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f986 	bl	800d798 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d492:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff fdc7 	bl	800d02c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7ff fdc2 	bl	800d02c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	080164d0 	.word	0x080164d0
 800d4c8:	08016b1c 	.word	0x08016b1c
 800d4cc:	08016514 	.word	0x08016514

0800d4d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d106      	bne.n	800d4ee <tcp_pcb_remove+0x1e>
 800d4e0:	4b3e      	ldr	r3, [pc, #248]	@ (800d5dc <tcp_pcb_remove+0x10c>)
 800d4e2:	f640 0283 	movw	r2, #2179	@ 0x883
 800d4e6:	493e      	ldr	r1, [pc, #248]	@ (800d5e0 <tcp_pcb_remove+0x110>)
 800d4e8:	483e      	ldr	r0, [pc, #248]	@ (800d5e4 <tcp_pcb_remove+0x114>)
 800d4ea:	f007 fa73 	bl	80149d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d106      	bne.n	800d502 <tcp_pcb_remove+0x32>
 800d4f4:	4b39      	ldr	r3, [pc, #228]	@ (800d5dc <tcp_pcb_remove+0x10c>)
 800d4f6:	f640 0284 	movw	r2, #2180	@ 0x884
 800d4fa:	493b      	ldr	r1, [pc, #236]	@ (800d5e8 <tcp_pcb_remove+0x118>)
 800d4fc:	4839      	ldr	r0, [pc, #228]	@ (800d5e4 <tcp_pcb_remove+0x114>)
 800d4fe:	f007 fa69 	bl	80149d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d105      	bne.n	800d518 <tcp_pcb_remove+0x48>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68da      	ldr	r2, [r3, #12]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	e013      	b.n	800d540 <tcp_pcb_remove+0x70>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	60fb      	str	r3, [r7, #12]
 800d51e:	e00c      	b.n	800d53a <tcp_pcb_remove+0x6a>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	429a      	cmp	r2, r3
 800d528:	d104      	bne.n	800d534 <tcp_pcb_remove+0x64>
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	68da      	ldr	r2, [r3, #12]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	60da      	str	r2, [r3, #12]
 800d532:	e005      	b.n	800d540 <tcp_pcb_remove+0x70>
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	60fb      	str	r3, [r7, #12]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1ef      	bne.n	800d520 <tcp_pcb_remove+0x50>
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2200      	movs	r2, #0
 800d544:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d546:	6838      	ldr	r0, [r7, #0]
 800d548:	f7ff ff72 	bl	800d430 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	7d1b      	ldrb	r3, [r3, #20]
 800d550:	2b0a      	cmp	r3, #10
 800d552:	d013      	beq.n	800d57c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d00f      	beq.n	800d57c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	8b5b      	ldrh	r3, [r3, #26]
 800d560:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d564:	2b00      	cmp	r3, #0
 800d566:	d009      	beq.n	800d57c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	8b5b      	ldrh	r3, [r3, #26]
 800d56c:	f043 0302 	orr.w	r3, r3, #2
 800d570:	b29a      	uxth	r2, r3
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d576:	6838      	ldr	r0, [r7, #0]
 800d578:	f002 ff68 	bl	801044c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	7d1b      	ldrb	r3, [r3, #20]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d020      	beq.n	800d5c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d006      	beq.n	800d59a <tcp_pcb_remove+0xca>
 800d58c:	4b13      	ldr	r3, [pc, #76]	@ (800d5dc <tcp_pcb_remove+0x10c>)
 800d58e:	f640 0293 	movw	r2, #2195	@ 0x893
 800d592:	4916      	ldr	r1, [pc, #88]	@ (800d5ec <tcp_pcb_remove+0x11c>)
 800d594:	4813      	ldr	r0, [pc, #76]	@ (800d5e4 <tcp_pcb_remove+0x114>)
 800d596:	f007 fa1d 	bl	80149d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d006      	beq.n	800d5b0 <tcp_pcb_remove+0xe0>
 800d5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d5dc <tcp_pcb_remove+0x10c>)
 800d5a4:	f640 0294 	movw	r2, #2196	@ 0x894
 800d5a8:	4911      	ldr	r1, [pc, #68]	@ (800d5f0 <tcp_pcb_remove+0x120>)
 800d5aa:	480e      	ldr	r0, [pc, #56]	@ (800d5e4 <tcp_pcb_remove+0x114>)
 800d5ac:	f007 fa12 	bl	80149d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d006      	beq.n	800d5c6 <tcp_pcb_remove+0xf6>
 800d5b8:	4b08      	ldr	r3, [pc, #32]	@ (800d5dc <tcp_pcb_remove+0x10c>)
 800d5ba:	f640 0296 	movw	r2, #2198	@ 0x896
 800d5be:	490d      	ldr	r1, [pc, #52]	@ (800d5f4 <tcp_pcb_remove+0x124>)
 800d5c0:	4808      	ldr	r0, [pc, #32]	@ (800d5e4 <tcp_pcb_remove+0x114>)
 800d5c2:	f007 fa07 	bl	80149d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d5d2:	bf00      	nop
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	080164d0 	.word	0x080164d0
 800d5e0:	08016b38 	.word	0x08016b38
 800d5e4:	08016514 	.word	0x08016514
 800d5e8:	08016b54 	.word	0x08016b54
 800d5ec:	08016b74 	.word	0x08016b74
 800d5f0:	08016b8c 	.word	0x08016b8c
 800d5f4:	08016ba8 	.word	0x08016ba8

0800d5f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <tcp_next_iss+0x1c>
 800d606:	4b0a      	ldr	r3, [pc, #40]	@ (800d630 <tcp_next_iss+0x38>)
 800d608:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d60c:	4909      	ldr	r1, [pc, #36]	@ (800d634 <tcp_next_iss+0x3c>)
 800d60e:	480a      	ldr	r0, [pc, #40]	@ (800d638 <tcp_next_iss+0x40>)
 800d610:	f007 f9e0 	bl	80149d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d614:	4b09      	ldr	r3, [pc, #36]	@ (800d63c <tcp_next_iss+0x44>)
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	4b09      	ldr	r3, [pc, #36]	@ (800d640 <tcp_next_iss+0x48>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4413      	add	r3, r2
 800d61e:	4a07      	ldr	r2, [pc, #28]	@ (800d63c <tcp_next_iss+0x44>)
 800d620:	6013      	str	r3, [r2, #0]
  return iss;
 800d622:	4b06      	ldr	r3, [pc, #24]	@ (800d63c <tcp_next_iss+0x44>)
 800d624:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d626:	4618      	mov	r0, r3
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	080164d0 	.word	0x080164d0
 800d634:	08016bc0 	.word	0x08016bc0
 800d638:	08016514 	.word	0x08016514
 800d63c:	20000028 	.word	0x20000028
 800d640:	2000d7e4 	.word	0x2000d7e4

0800d644 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d106      	bne.n	800d666 <tcp_eff_send_mss_netif+0x22>
 800d658:	4b14      	ldr	r3, [pc, #80]	@ (800d6ac <tcp_eff_send_mss_netif+0x68>)
 800d65a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d65e:	4914      	ldr	r1, [pc, #80]	@ (800d6b0 <tcp_eff_send_mss_netif+0x6c>)
 800d660:	4814      	ldr	r0, [pc, #80]	@ (800d6b4 <tcp_eff_send_mss_netif+0x70>)
 800d662:	f007 f9b7 	bl	80149d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d66c:	89fb      	ldrh	r3, [r7, #14]
 800d66e:	e019      	b.n	800d6a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d674:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d676:	8afb      	ldrh	r3, [r7, #22]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d012      	beq.n	800d6a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d67c:	2328      	movs	r3, #40	@ 0x28
 800d67e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d680:	8afa      	ldrh	r2, [r7, #22]
 800d682:	8abb      	ldrh	r3, [r7, #20]
 800d684:	429a      	cmp	r2, r3
 800d686:	d904      	bls.n	800d692 <tcp_eff_send_mss_netif+0x4e>
 800d688:	8afa      	ldrh	r2, [r7, #22]
 800d68a:	8abb      	ldrh	r3, [r7, #20]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	b29b      	uxth	r3, r3
 800d690:	e000      	b.n	800d694 <tcp_eff_send_mss_netif+0x50>
 800d692:	2300      	movs	r3, #0
 800d694:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d696:	8a7a      	ldrh	r2, [r7, #18]
 800d698:	89fb      	ldrh	r3, [r7, #14]
 800d69a:	4293      	cmp	r3, r2
 800d69c:	bf28      	it	cs
 800d69e:	4613      	movcs	r3, r2
 800d6a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d6a2:	89fb      	ldrh	r3, [r7, #14]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	080164d0 	.word	0x080164d0
 800d6b0:	08016bdc 	.word	0x08016bdc
 800d6b4:	08016514 	.word	0x08016514

0800d6b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d119      	bne.n	800d700 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d6cc:	4b10      	ldr	r3, [pc, #64]	@ (800d710 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d6ce:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d6d2:	4910      	ldr	r1, [pc, #64]	@ (800d714 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d6d4:	4810      	ldr	r0, [pc, #64]	@ (800d718 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d6d6:	f007 f97d 	bl	80149d4 <iprintf>

  while (pcb != NULL) {
 800d6da:	e011      	b.n	800d700 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d108      	bne.n	800d6fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f7fe ffc4 	bl	800c67c <tcp_abort>
      pcb = next;
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	60fb      	str	r3, [r7, #12]
 800d6f8:	e002      	b.n	800d700 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1ea      	bne.n	800d6dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d706:	bf00      	nop
 800d708:	bf00      	nop
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	080164d0 	.word	0x080164d0
 800d714:	08016c04 	.word	0x08016c04
 800d718:	08016514 	.word	0x08016514

0800d71c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d02a      	beq.n	800d782 <tcp_netif_ip_addr_changed+0x66>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d026      	beq.n	800d782 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d734:	4b15      	ldr	r3, [pc, #84]	@ (800d78c <tcp_netif_ip_addr_changed+0x70>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff ffbc 	bl	800d6b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d740:	4b13      	ldr	r3, [pc, #76]	@ (800d790 <tcp_netif_ip_addr_changed+0x74>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff ffb6 	bl	800d6b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d017      	beq.n	800d782 <tcp_netif_ip_addr_changed+0x66>
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d013      	beq.n	800d782 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d75a:	4b0e      	ldr	r3, [pc, #56]	@ (800d794 <tcp_netif_ip_addr_changed+0x78>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	e00c      	b.n	800d77c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d103      	bne.n	800d776 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	60fb      	str	r3, [r7, #12]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d1ef      	bne.n	800d762 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d782:	bf00      	nop
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	2000d7f0 	.word	0x2000d7f0
 800d790:	2000d7e8 	.word	0x2000d7e8
 800d794:	2000d7ec 	.word	0x2000d7ec

0800d798 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d007      	beq.n	800d7b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7ff fc3d 	bl	800d02c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d7c0:	b590      	push	{r4, r7, lr}
 800d7c2:	b08d      	sub	sp, #52	@ 0x34
 800d7c4:	af04      	add	r7, sp, #16
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d105      	bne.n	800d7dc <tcp_input+0x1c>
 800d7d0:	4b9b      	ldr	r3, [pc, #620]	@ (800da40 <tcp_input+0x280>)
 800d7d2:	2283      	movs	r2, #131	@ 0x83
 800d7d4:	499b      	ldr	r1, [pc, #620]	@ (800da44 <tcp_input+0x284>)
 800d7d6:	489c      	ldr	r0, [pc, #624]	@ (800da48 <tcp_input+0x288>)
 800d7d8:	f007 f8fc 	bl	80149d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	4a9a      	ldr	r2, [pc, #616]	@ (800da4c <tcp_input+0x28c>)
 800d7e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	895b      	ldrh	r3, [r3, #10]
 800d7e8:	2b13      	cmp	r3, #19
 800d7ea:	f240 83d1 	bls.w	800df90 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7ee:	4b98      	ldr	r3, [pc, #608]	@ (800da50 <tcp_input+0x290>)
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	4a97      	ldr	r2, [pc, #604]	@ (800da50 <tcp_input+0x290>)
 800d7f4:	6812      	ldr	r2, [r2, #0]
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f005 feef 	bl	80135dc <ip4_addr_isbroadcast_u32>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	f040 83c7 	bne.w	800df94 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d806:	4b92      	ldr	r3, [pc, #584]	@ (800da50 <tcp_input+0x290>)
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d80e:	2be0      	cmp	r3, #224	@ 0xe0
 800d810:	f000 83c0 	beq.w	800df94 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d814:	4b8d      	ldr	r3, [pc, #564]	@ (800da4c <tcp_input+0x28c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	899b      	ldrh	r3, [r3, #12]
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fc fd97 	bl	800a350 <lwip_htons>
 800d822:	4603      	mov	r3, r0
 800d824:	0b1b      	lsrs	r3, r3, #12
 800d826:	b29b      	uxth	r3, r3
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d82e:	7cbb      	ldrb	r3, [r7, #18]
 800d830:	2b13      	cmp	r3, #19
 800d832:	f240 83b1 	bls.w	800df98 <tcp_input+0x7d8>
 800d836:	7cbb      	ldrb	r3, [r7, #18]
 800d838:	b29a      	uxth	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	891b      	ldrh	r3, [r3, #8]
 800d83e:	429a      	cmp	r2, r3
 800d840:	f200 83aa 	bhi.w	800df98 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d844:	7cbb      	ldrb	r3, [r7, #18]
 800d846:	b29b      	uxth	r3, r3
 800d848:	3b14      	subs	r3, #20
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	4b81      	ldr	r3, [pc, #516]	@ (800da54 <tcp_input+0x294>)
 800d84e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d850:	4b81      	ldr	r3, [pc, #516]	@ (800da58 <tcp_input+0x298>)
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	895a      	ldrh	r2, [r3, #10]
 800d85a:	7cbb      	ldrb	r3, [r7, #18]
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	429a      	cmp	r2, r3
 800d860:	d309      	bcc.n	800d876 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d862:	4b7c      	ldr	r3, [pc, #496]	@ (800da54 <tcp_input+0x294>)
 800d864:	881a      	ldrh	r2, [r3, #0]
 800d866:	4b7d      	ldr	r3, [pc, #500]	@ (800da5c <tcp_input+0x29c>)
 800d868:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d86a:	7cbb      	ldrb	r3, [r7, #18]
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7fe f8da 	bl	800ba28 <pbuf_remove_header>
 800d874:	e04e      	b.n	800d914 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d105      	bne.n	800d88a <tcp_input+0xca>
 800d87e:	4b70      	ldr	r3, [pc, #448]	@ (800da40 <tcp_input+0x280>)
 800d880:	22c2      	movs	r2, #194	@ 0xc2
 800d882:	4977      	ldr	r1, [pc, #476]	@ (800da60 <tcp_input+0x2a0>)
 800d884:	4870      	ldr	r0, [pc, #448]	@ (800da48 <tcp_input+0x288>)
 800d886:	f007 f8a5 	bl	80149d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d88a:	2114      	movs	r1, #20
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7fe f8cb 	bl	800ba28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	895a      	ldrh	r2, [r3, #10]
 800d896:	4b71      	ldr	r3, [pc, #452]	@ (800da5c <tcp_input+0x29c>)
 800d898:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d89a:	4b6e      	ldr	r3, [pc, #440]	@ (800da54 <tcp_input+0x294>)
 800d89c:	881a      	ldrh	r2, [r3, #0]
 800d89e:	4b6f      	ldr	r3, [pc, #444]	@ (800da5c <tcp_input+0x29c>)
 800d8a0:	881b      	ldrh	r3, [r3, #0]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d8a6:	4b6d      	ldr	r3, [pc, #436]	@ (800da5c <tcp_input+0x29c>)
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7fe f8bb 	bl	800ba28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	895b      	ldrh	r3, [r3, #10]
 800d8b8:	8a3a      	ldrh	r2, [r7, #16]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	f200 836e 	bhi.w	800df9c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	4a64      	ldr	r2, [pc, #400]	@ (800da58 <tcp_input+0x298>)
 800d8c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	8a3a      	ldrh	r2, [r7, #16]
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fe f8a8 	bl	800ba28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	891a      	ldrh	r2, [r3, #8]
 800d8dc:	8a3b      	ldrh	r3, [r7, #16]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	895b      	ldrh	r3, [r3, #10]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d005      	beq.n	800d8fa <tcp_input+0x13a>
 800d8ee:	4b54      	ldr	r3, [pc, #336]	@ (800da40 <tcp_input+0x280>)
 800d8f0:	22df      	movs	r2, #223	@ 0xdf
 800d8f2:	495c      	ldr	r1, [pc, #368]	@ (800da64 <tcp_input+0x2a4>)
 800d8f4:	4854      	ldr	r0, [pc, #336]	@ (800da48 <tcp_input+0x288>)
 800d8f6:	f007 f86d 	bl	80149d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	891a      	ldrh	r2, [r3, #8]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	891b      	ldrh	r3, [r3, #8]
 800d904:	429a      	cmp	r2, r3
 800d906:	d005      	beq.n	800d914 <tcp_input+0x154>
 800d908:	4b4d      	ldr	r3, [pc, #308]	@ (800da40 <tcp_input+0x280>)
 800d90a:	22e0      	movs	r2, #224	@ 0xe0
 800d90c:	4956      	ldr	r1, [pc, #344]	@ (800da68 <tcp_input+0x2a8>)
 800d90e:	484e      	ldr	r0, [pc, #312]	@ (800da48 <tcp_input+0x288>)
 800d910:	f007 f860 	bl	80149d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d914:	4b4d      	ldr	r3, [pc, #308]	@ (800da4c <tcp_input+0x28c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4a4b      	ldr	r2, [pc, #300]	@ (800da4c <tcp_input+0x28c>)
 800d91e:	6814      	ldr	r4, [r2, #0]
 800d920:	4618      	mov	r0, r3
 800d922:	f7fc fd15 	bl	800a350 <lwip_htons>
 800d926:	4603      	mov	r3, r0
 800d928:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d92a:	4b48      	ldr	r3, [pc, #288]	@ (800da4c <tcp_input+0x28c>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	885b      	ldrh	r3, [r3, #2]
 800d930:	b29b      	uxth	r3, r3
 800d932:	4a46      	ldr	r2, [pc, #280]	@ (800da4c <tcp_input+0x28c>)
 800d934:	6814      	ldr	r4, [r2, #0]
 800d936:	4618      	mov	r0, r3
 800d938:	f7fc fd0a 	bl	800a350 <lwip_htons>
 800d93c:	4603      	mov	r3, r0
 800d93e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d940:	4b42      	ldr	r3, [pc, #264]	@ (800da4c <tcp_input+0x28c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	4a41      	ldr	r2, [pc, #260]	@ (800da4c <tcp_input+0x28c>)
 800d948:	6814      	ldr	r4, [r2, #0]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fc fd15 	bl	800a37a <lwip_htonl>
 800d950:	4603      	mov	r3, r0
 800d952:	6063      	str	r3, [r4, #4]
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	4a45      	ldr	r2, [pc, #276]	@ (800da6c <tcp_input+0x2ac>)
 800d958:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d95a:	4b3c      	ldr	r3, [pc, #240]	@ (800da4c <tcp_input+0x28c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	4a3a      	ldr	r2, [pc, #232]	@ (800da4c <tcp_input+0x28c>)
 800d962:	6814      	ldr	r4, [r2, #0]
 800d964:	4618      	mov	r0, r3
 800d966:	f7fc fd08 	bl	800a37a <lwip_htonl>
 800d96a:	4603      	mov	r3, r0
 800d96c:	60a3      	str	r3, [r4, #8]
 800d96e:	68a3      	ldr	r3, [r4, #8]
 800d970:	4a3f      	ldr	r2, [pc, #252]	@ (800da70 <tcp_input+0x2b0>)
 800d972:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d974:	4b35      	ldr	r3, [pc, #212]	@ (800da4c <tcp_input+0x28c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	89db      	ldrh	r3, [r3, #14]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	4a33      	ldr	r2, [pc, #204]	@ (800da4c <tcp_input+0x28c>)
 800d97e:	6814      	ldr	r4, [r2, #0]
 800d980:	4618      	mov	r0, r3
 800d982:	f7fc fce5 	bl	800a350 <lwip_htons>
 800d986:	4603      	mov	r3, r0
 800d988:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d98a:	4b30      	ldr	r3, [pc, #192]	@ (800da4c <tcp_input+0x28c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	899b      	ldrh	r3, [r3, #12]
 800d990:	b29b      	uxth	r3, r3
 800d992:	4618      	mov	r0, r3
 800d994:	f7fc fcdc 	bl	800a350 <lwip_htons>
 800d998:	4603      	mov	r3, r0
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	4b34      	ldr	r3, [pc, #208]	@ (800da74 <tcp_input+0x2b4>)
 800d9a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	891a      	ldrh	r2, [r3, #8]
 800d9aa:	4b33      	ldr	r3, [pc, #204]	@ (800da78 <tcp_input+0x2b8>)
 800d9ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d9ae:	4b31      	ldr	r3, [pc, #196]	@ (800da74 <tcp_input+0x2b4>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	f003 0303 	and.w	r3, r3, #3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00c      	beq.n	800d9d4 <tcp_input+0x214>
    tcplen++;
 800d9ba:	4b2f      	ldr	r3, [pc, #188]	@ (800da78 <tcp_input+0x2b8>)
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	4b2d      	ldr	r3, [pc, #180]	@ (800da78 <tcp_input+0x2b8>)
 800d9c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	891a      	ldrh	r2, [r3, #8]
 800d9ca:	4b2b      	ldr	r3, [pc, #172]	@ (800da78 <tcp_input+0x2b8>)
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	f200 82e6 	bhi.w	800dfa0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9d8:	4b28      	ldr	r3, [pc, #160]	@ (800da7c <tcp_input+0x2bc>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	61fb      	str	r3, [r7, #28]
 800d9de:	e09d      	b.n	800db1c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	7d1b      	ldrb	r3, [r3, #20]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d105      	bne.n	800d9f4 <tcp_input+0x234>
 800d9e8:	4b15      	ldr	r3, [pc, #84]	@ (800da40 <tcp_input+0x280>)
 800d9ea:	22fb      	movs	r2, #251	@ 0xfb
 800d9ec:	4924      	ldr	r1, [pc, #144]	@ (800da80 <tcp_input+0x2c0>)
 800d9ee:	4816      	ldr	r0, [pc, #88]	@ (800da48 <tcp_input+0x288>)
 800d9f0:	f006 fff0 	bl	80149d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	7d1b      	ldrb	r3, [r3, #20]
 800d9f8:	2b0a      	cmp	r3, #10
 800d9fa:	d105      	bne.n	800da08 <tcp_input+0x248>
 800d9fc:	4b10      	ldr	r3, [pc, #64]	@ (800da40 <tcp_input+0x280>)
 800d9fe:	22fc      	movs	r2, #252	@ 0xfc
 800da00:	4920      	ldr	r1, [pc, #128]	@ (800da84 <tcp_input+0x2c4>)
 800da02:	4811      	ldr	r0, [pc, #68]	@ (800da48 <tcp_input+0x288>)
 800da04:	f006 ffe6 	bl	80149d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	7d1b      	ldrb	r3, [r3, #20]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d105      	bne.n	800da1c <tcp_input+0x25c>
 800da10:	4b0b      	ldr	r3, [pc, #44]	@ (800da40 <tcp_input+0x280>)
 800da12:	22fd      	movs	r2, #253	@ 0xfd
 800da14:	491c      	ldr	r1, [pc, #112]	@ (800da88 <tcp_input+0x2c8>)
 800da16:	480c      	ldr	r0, [pc, #48]	@ (800da48 <tcp_input+0x288>)
 800da18:	f006 ffdc 	bl	80149d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	7a1b      	ldrb	r3, [r3, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d033      	beq.n	800da8c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	7a1a      	ldrb	r2, [r3, #8]
 800da28:	4b09      	ldr	r3, [pc, #36]	@ (800da50 <tcp_input+0x290>)
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da30:	3301      	adds	r3, #1
 800da32:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da34:	429a      	cmp	r2, r3
 800da36:	d029      	beq.n	800da8c <tcp_input+0x2cc>
      prev = pcb;
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	61bb      	str	r3, [r7, #24]
      continue;
 800da3c:	e06b      	b.n	800db16 <tcp_input+0x356>
 800da3e:	bf00      	nop
 800da40:	08016c38 	.word	0x08016c38
 800da44:	08016c6c 	.word	0x08016c6c
 800da48:	08016c84 	.word	0x08016c84
 800da4c:	2000d80c 	.word	0x2000d80c
 800da50:	2000a090 	.word	0x2000a090
 800da54:	2000d810 	.word	0x2000d810
 800da58:	2000d814 	.word	0x2000d814
 800da5c:	2000d812 	.word	0x2000d812
 800da60:	08016cac 	.word	0x08016cac
 800da64:	08016cbc 	.word	0x08016cbc
 800da68:	08016cc8 	.word	0x08016cc8
 800da6c:	2000d81c 	.word	0x2000d81c
 800da70:	2000d820 	.word	0x2000d820
 800da74:	2000d828 	.word	0x2000d828
 800da78:	2000d826 	.word	0x2000d826
 800da7c:	2000d7f0 	.word	0x2000d7f0
 800da80:	08016ce8 	.word	0x08016ce8
 800da84:	08016d10 	.word	0x08016d10
 800da88:	08016d3c 	.word	0x08016d3c
    }

    if (pcb->remote_port == tcphdr->src &&
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	8b1a      	ldrh	r2, [r3, #24]
 800da90:	4b72      	ldr	r3, [pc, #456]	@ (800dc5c <tcp_input+0x49c>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	b29b      	uxth	r3, r3
 800da98:	429a      	cmp	r2, r3
 800da9a:	d13a      	bne.n	800db12 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	8ada      	ldrh	r2, [r3, #22]
 800daa0:	4b6e      	ldr	r3, [pc, #440]	@ (800dc5c <tcp_input+0x49c>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	885b      	ldrh	r3, [r3, #2]
 800daa6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d132      	bne.n	800db12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	685a      	ldr	r2, [r3, #4]
 800dab0:	4b6b      	ldr	r3, [pc, #428]	@ (800dc60 <tcp_input+0x4a0>)
 800dab2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d12c      	bne.n	800db12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	4b68      	ldr	r3, [pc, #416]	@ (800dc60 <tcp_input+0x4a0>)
 800dabe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d126      	bne.n	800db12 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	69fa      	ldr	r2, [r7, #28]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d106      	bne.n	800dadc <tcp_input+0x31c>
 800dace:	4b65      	ldr	r3, [pc, #404]	@ (800dc64 <tcp_input+0x4a4>)
 800dad0:	f240 120d 	movw	r2, #269	@ 0x10d
 800dad4:	4964      	ldr	r1, [pc, #400]	@ (800dc68 <tcp_input+0x4a8>)
 800dad6:	4865      	ldr	r0, [pc, #404]	@ (800dc6c <tcp_input+0x4ac>)
 800dad8:	f006 ff7c 	bl	80149d4 <iprintf>
      if (prev != NULL) {
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00a      	beq.n	800daf8 <tcp_input+0x338>
        prev->next = pcb->next;
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	68da      	ldr	r2, [r3, #12]
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800daea:	4b61      	ldr	r3, [pc, #388]	@ (800dc70 <tcp_input+0x4b0>)
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800daf2:	4a5f      	ldr	r2, [pc, #380]	@ (800dc70 <tcp_input+0x4b0>)
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	69fa      	ldr	r2, [r7, #28]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d111      	bne.n	800db26 <tcp_input+0x366>
 800db02:	4b58      	ldr	r3, [pc, #352]	@ (800dc64 <tcp_input+0x4a4>)
 800db04:	f240 1215 	movw	r2, #277	@ 0x115
 800db08:	495a      	ldr	r1, [pc, #360]	@ (800dc74 <tcp_input+0x4b4>)
 800db0a:	4858      	ldr	r0, [pc, #352]	@ (800dc6c <tcp_input+0x4ac>)
 800db0c:	f006 ff62 	bl	80149d4 <iprintf>
      break;
 800db10:	e009      	b.n	800db26 <tcp_input+0x366>
    }
    prev = pcb;
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	61fb      	str	r3, [r7, #28]
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f47f af5e 	bne.w	800d9e0 <tcp_input+0x220>
 800db24:	e000      	b.n	800db28 <tcp_input+0x368>
      break;
 800db26:	bf00      	nop
  }

  if (pcb == NULL) {
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f040 80aa 	bne.w	800dc84 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db30:	4b51      	ldr	r3, [pc, #324]	@ (800dc78 <tcp_input+0x4b8>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	61fb      	str	r3, [r7, #28]
 800db36:	e03f      	b.n	800dbb8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	7d1b      	ldrb	r3, [r3, #20]
 800db3c:	2b0a      	cmp	r3, #10
 800db3e:	d006      	beq.n	800db4e <tcp_input+0x38e>
 800db40:	4b48      	ldr	r3, [pc, #288]	@ (800dc64 <tcp_input+0x4a4>)
 800db42:	f240 121f 	movw	r2, #287	@ 0x11f
 800db46:	494d      	ldr	r1, [pc, #308]	@ (800dc7c <tcp_input+0x4bc>)
 800db48:	4848      	ldr	r0, [pc, #288]	@ (800dc6c <tcp_input+0x4ac>)
 800db4a:	f006 ff43 	bl	80149d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	7a1b      	ldrb	r3, [r3, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d009      	beq.n	800db6a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	7a1a      	ldrb	r2, [r3, #8]
 800db5a:	4b41      	ldr	r3, [pc, #260]	@ (800dc60 <tcp_input+0x4a0>)
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db62:	3301      	adds	r3, #1
 800db64:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db66:	429a      	cmp	r2, r3
 800db68:	d122      	bne.n	800dbb0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	8b1a      	ldrh	r2, [r3, #24]
 800db6e:	4b3b      	ldr	r3, [pc, #236]	@ (800dc5c <tcp_input+0x49c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	b29b      	uxth	r3, r3
 800db76:	429a      	cmp	r2, r3
 800db78:	d11b      	bne.n	800dbb2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	8ada      	ldrh	r2, [r3, #22]
 800db7e:	4b37      	ldr	r3, [pc, #220]	@ (800dc5c <tcp_input+0x49c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	885b      	ldrh	r3, [r3, #2]
 800db84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800db86:	429a      	cmp	r2, r3
 800db88:	d113      	bne.n	800dbb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	4b34      	ldr	r3, [pc, #208]	@ (800dc60 <tcp_input+0x4a0>)
 800db90:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800db92:	429a      	cmp	r2, r3
 800db94:	d10d      	bne.n	800dbb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	4b31      	ldr	r3, [pc, #196]	@ (800dc60 <tcp_input+0x4a0>)
 800db9c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d107      	bne.n	800dbb2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dba2:	69f8      	ldr	r0, [r7, #28]
 800dba4:	f000 fb56 	bl	800e254 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7fd ffc3 	bl	800bb34 <pbuf_free>
        return;
 800dbae:	e1fd      	b.n	800dfac <tcp_input+0x7ec>
        continue;
 800dbb0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	61fb      	str	r3, [r7, #28]
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1bc      	bne.n	800db38 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbc2:	4b2f      	ldr	r3, [pc, #188]	@ (800dc80 <tcp_input+0x4c0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	e02a      	b.n	800dc20 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	7a1b      	ldrb	r3, [r3, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00c      	beq.n	800dbec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	7a1a      	ldrb	r2, [r3, #8]
 800dbd6:	4b22      	ldr	r3, [pc, #136]	@ (800dc60 <tcp_input+0x4a0>)
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dbde:	3301      	adds	r3, #1
 800dbe0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d002      	beq.n	800dbec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	61bb      	str	r3, [r7, #24]
        continue;
 800dbea:	e016      	b.n	800dc1a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	8ada      	ldrh	r2, [r3, #22]
 800dbf0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc5c <tcp_input+0x49c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	885b      	ldrh	r3, [r3, #2]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d10c      	bne.n	800dc16 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	4b17      	ldr	r3, [pc, #92]	@ (800dc60 <tcp_input+0x4a0>)
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d00f      	beq.n	800dc28 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00d      	beq.n	800dc2a <tcp_input+0x46a>
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d009      	beq.n	800dc2a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1d1      	bne.n	800dbca <tcp_input+0x40a>
 800dc26:	e000      	b.n	800dc2a <tcp_input+0x46a>
            break;
 800dc28:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d029      	beq.n	800dc84 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00a      	beq.n	800dc4c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	68da      	ldr	r2, [r3, #12]
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dc3e:	4b10      	ldr	r3, [pc, #64]	@ (800dc80 <tcp_input+0x4c0>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dc46:	4a0e      	ldr	r2, [pc, #56]	@ (800dc80 <tcp_input+0x4c0>)
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dc4c:	6978      	ldr	r0, [r7, #20]
 800dc4e:	f000 fa03 	bl	800e058 <tcp_listen_input>
      }
      pbuf_free(p);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7fd ff6e 	bl	800bb34 <pbuf_free>
      return;
 800dc58:	e1a8      	b.n	800dfac <tcp_input+0x7ec>
 800dc5a:	bf00      	nop
 800dc5c:	2000d80c 	.word	0x2000d80c
 800dc60:	2000a090 	.word	0x2000a090
 800dc64:	08016c38 	.word	0x08016c38
 800dc68:	08016d64 	.word	0x08016d64
 800dc6c:	08016c84 	.word	0x08016c84
 800dc70:	2000d7f0 	.word	0x2000d7f0
 800dc74:	08016d90 	.word	0x08016d90
 800dc78:	2000d7f4 	.word	0x2000d7f4
 800dc7c:	08016dbc 	.word	0x08016dbc
 800dc80:	2000d7ec 	.word	0x2000d7ec
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f000 8158 	beq.w	800df3c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dc8c:	4b95      	ldr	r3, [pc, #596]	@ (800dee4 <tcp_input+0x724>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	891a      	ldrh	r2, [r3, #8]
 800dc96:	4b93      	ldr	r3, [pc, #588]	@ (800dee4 <tcp_input+0x724>)
 800dc98:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dc9a:	4a92      	ldr	r2, [pc, #584]	@ (800dee4 <tcp_input+0x724>)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dca0:	4b91      	ldr	r3, [pc, #580]	@ (800dee8 <tcp_input+0x728>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a8f      	ldr	r2, [pc, #572]	@ (800dee4 <tcp_input+0x724>)
 800dca6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dca8:	4b90      	ldr	r3, [pc, #576]	@ (800deec <tcp_input+0x72c>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dcae:	4b90      	ldr	r3, [pc, #576]	@ (800def0 <tcp_input+0x730>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dcb4:	4b8f      	ldr	r3, [pc, #572]	@ (800def4 <tcp_input+0x734>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dcba:	4b8f      	ldr	r3, [pc, #572]	@ (800def8 <tcp_input+0x738>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	f003 0308 	and.w	r3, r3, #8
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	7b5b      	ldrb	r3, [r3, #13]
 800dcca:	f043 0301 	orr.w	r3, r3, #1
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d017      	beq.n	800dd0c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dcdc:	69f8      	ldr	r0, [r7, #28]
 800dcde:	f7ff f929 	bl	800cf34 <tcp_process_refused_data>
 800dce2:	4603      	mov	r3, r0
 800dce4:	f113 0f0d 	cmn.w	r3, #13
 800dce8:	d007      	beq.n	800dcfa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00c      	beq.n	800dd0c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dcf2:	4b82      	ldr	r3, [pc, #520]	@ (800defc <tcp_input+0x73c>)
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d008      	beq.n	800dd0c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f040 80e3 	bne.w	800deca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dd04:	69f8      	ldr	r0, [r7, #28]
 800dd06:	f003 f9a7 	bl	8011058 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dd0a:	e0de      	b.n	800deca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dd0c:	4a7c      	ldr	r2, [pc, #496]	@ (800df00 <tcp_input+0x740>)
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dd12:	69f8      	ldr	r0, [r7, #28]
 800dd14:	f000 fb18 	bl	800e348 <tcp_process>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dd1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd20:	f113 0f0d 	cmn.w	r3, #13
 800dd24:	f000 80d3 	beq.w	800dece <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dd28:	4b71      	ldr	r3, [pc, #452]	@ (800def0 <tcp_input+0x730>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	f003 0308 	and.w	r3, r3, #8
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d015      	beq.n	800dd60 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d008      	beq.n	800dd50 <tcp_input+0x590>
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd44:	69fa      	ldr	r2, [r7, #28]
 800dd46:	6912      	ldr	r2, [r2, #16]
 800dd48:	f06f 010d 	mvn.w	r1, #13
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd50:	69f9      	ldr	r1, [r7, #28]
 800dd52:	486c      	ldr	r0, [pc, #432]	@ (800df04 <tcp_input+0x744>)
 800dd54:	f7ff fbbc 	bl	800d4d0 <tcp_pcb_remove>
        tcp_free(pcb);
 800dd58:	69f8      	ldr	r0, [r7, #28]
 800dd5a:	f7fe f9a7 	bl	800c0ac <tcp_free>
 800dd5e:	e0da      	b.n	800df16 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dd60:	2300      	movs	r3, #0
 800dd62:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dd64:	4b63      	ldr	r3, [pc, #396]	@ (800def4 <tcp_input+0x734>)
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d01d      	beq.n	800dda8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dd6c:	4b61      	ldr	r3, [pc, #388]	@ (800def4 <tcp_input+0x734>)
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00a      	beq.n	800dd92 <tcp_input+0x5d2>
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd82:	69fa      	ldr	r2, [r7, #28]
 800dd84:	6910      	ldr	r0, [r2, #16]
 800dd86:	89fa      	ldrh	r2, [r7, #14]
 800dd88:	69f9      	ldr	r1, [r7, #28]
 800dd8a:	4798      	blx	r3
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	74fb      	strb	r3, [r7, #19]
 800dd90:	e001      	b.n	800dd96 <tcp_input+0x5d6>
 800dd92:	2300      	movs	r3, #0
 800dd94:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd9a:	f113 0f0d 	cmn.w	r3, #13
 800dd9e:	f000 8098 	beq.w	800ded2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dda2:	4b54      	ldr	r3, [pc, #336]	@ (800def4 <tcp_input+0x734>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dda8:	69f8      	ldr	r0, [r7, #28]
 800ddaa:	f000 f915 	bl	800dfd8 <tcp_input_delayed_close>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f040 8090 	bne.w	800ded6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ddb6:	4b4d      	ldr	r3, [pc, #308]	@ (800deec <tcp_input+0x72c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d041      	beq.n	800de42 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d006      	beq.n	800ddd4 <tcp_input+0x614>
 800ddc6:	4b50      	ldr	r3, [pc, #320]	@ (800df08 <tcp_input+0x748>)
 800ddc8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ddcc:	494f      	ldr	r1, [pc, #316]	@ (800df0c <tcp_input+0x74c>)
 800ddce:	4850      	ldr	r0, [pc, #320]	@ (800df10 <tcp_input+0x750>)
 800ddd0:	f006 fe00 	bl	80149d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	8b5b      	ldrh	r3, [r3, #26]
 800ddd8:	f003 0310 	and.w	r3, r3, #16
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d008      	beq.n	800ddf2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dde0:	4b42      	ldr	r3, [pc, #264]	@ (800deec <tcp_input+0x72c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fd fea5 	bl	800bb34 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ddea:	69f8      	ldr	r0, [r7, #28]
 800ddec:	f7fe fc46 	bl	800c67c <tcp_abort>
            goto aborted;
 800ddf0:	e091      	b.n	800df16 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00c      	beq.n	800de16 <tcp_input+0x656>
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	6918      	ldr	r0, [r3, #16]
 800de06:	4b39      	ldr	r3, [pc, #228]	@ (800deec <tcp_input+0x72c>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	2300      	movs	r3, #0
 800de0c:	69f9      	ldr	r1, [r7, #28]
 800de0e:	47a0      	blx	r4
 800de10:	4603      	mov	r3, r0
 800de12:	74fb      	strb	r3, [r7, #19]
 800de14:	e008      	b.n	800de28 <tcp_input+0x668>
 800de16:	4b35      	ldr	r3, [pc, #212]	@ (800deec <tcp_input+0x72c>)
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	2300      	movs	r3, #0
 800de1c:	69f9      	ldr	r1, [r7, #28]
 800de1e:	2000      	movs	r0, #0
 800de20:	f7ff f95e 	bl	800d0e0 <tcp_recv_null>
 800de24:	4603      	mov	r3, r0
 800de26:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800de28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de2c:	f113 0f0d 	cmn.w	r3, #13
 800de30:	d053      	beq.n	800deda <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800de32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800de3a:	4b2c      	ldr	r3, [pc, #176]	@ (800deec <tcp_input+0x72c>)
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800de42:	4b2b      	ldr	r3, [pc, #172]	@ (800def0 <tcp_input+0x730>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	f003 0320 	and.w	r3, r3, #32
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d030      	beq.n	800deb0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de52:	2b00      	cmp	r3, #0
 800de54:	d009      	beq.n	800de6a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de5a:	7b5a      	ldrb	r2, [r3, #13]
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de60:	f042 0220 	orr.w	r2, r2, #32
 800de64:	b2d2      	uxtb	r2, r2
 800de66:	735a      	strb	r2, [r3, #13]
 800de68:	e022      	b.n	800deb0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de6e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800de72:	d005      	beq.n	800de80 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de78:	3301      	adds	r3, #1
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00b      	beq.n	800dea2 <tcp_input+0x6e2>
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	6918      	ldr	r0, [r3, #16]
 800de94:	2300      	movs	r3, #0
 800de96:	2200      	movs	r2, #0
 800de98:	69f9      	ldr	r1, [r7, #28]
 800de9a:	47a0      	blx	r4
 800de9c:	4603      	mov	r3, r0
 800de9e:	74fb      	strb	r3, [r7, #19]
 800dea0:	e001      	b.n	800dea6 <tcp_input+0x6e6>
 800dea2:	2300      	movs	r3, #0
 800dea4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800deaa:	f113 0f0d 	cmn.w	r3, #13
 800deae:	d016      	beq.n	800dede <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800deb0:	4b13      	ldr	r3, [pc, #76]	@ (800df00 <tcp_input+0x740>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800deb6:	69f8      	ldr	r0, [r7, #28]
 800deb8:	f000 f88e 	bl	800dfd8 <tcp_input_delayed_close>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d128      	bne.n	800df14 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dec2:	69f8      	ldr	r0, [r7, #28]
 800dec4:	f002 fac2 	bl	801044c <tcp_output>
 800dec8:	e025      	b.n	800df16 <tcp_input+0x756>
        goto aborted;
 800deca:	bf00      	nop
 800decc:	e023      	b.n	800df16 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dece:	bf00      	nop
 800ded0:	e021      	b.n	800df16 <tcp_input+0x756>
              goto aborted;
 800ded2:	bf00      	nop
 800ded4:	e01f      	b.n	800df16 <tcp_input+0x756>
          goto aborted;
 800ded6:	bf00      	nop
 800ded8:	e01d      	b.n	800df16 <tcp_input+0x756>
            goto aborted;
 800deda:	bf00      	nop
 800dedc:	e01b      	b.n	800df16 <tcp_input+0x756>
              goto aborted;
 800dede:	bf00      	nop
 800dee0:	e019      	b.n	800df16 <tcp_input+0x756>
 800dee2:	bf00      	nop
 800dee4:	2000d7fc 	.word	0x2000d7fc
 800dee8:	2000d80c 	.word	0x2000d80c
 800deec:	2000d82c 	.word	0x2000d82c
 800def0:	2000d829 	.word	0x2000d829
 800def4:	2000d824 	.word	0x2000d824
 800def8:	2000d828 	.word	0x2000d828
 800defc:	2000d826 	.word	0x2000d826
 800df00:	2000d830 	.word	0x2000d830
 800df04:	2000d7f0 	.word	0x2000d7f0
 800df08:	08016c38 	.word	0x08016c38
 800df0c:	08016dec 	.word	0x08016dec
 800df10:	08016c84 	.word	0x08016c84
          goto aborted;
 800df14:	bf00      	nop
    tcp_input_pcb = NULL;
 800df16:	4b27      	ldr	r3, [pc, #156]	@ (800dfb4 <tcp_input+0x7f4>)
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800df1c:	4b26      	ldr	r3, [pc, #152]	@ (800dfb8 <tcp_input+0x7f8>)
 800df1e:	2200      	movs	r2, #0
 800df20:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800df22:	4b26      	ldr	r3, [pc, #152]	@ (800dfbc <tcp_input+0x7fc>)
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d03f      	beq.n	800dfaa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800df2a:	4b24      	ldr	r3, [pc, #144]	@ (800dfbc <tcp_input+0x7fc>)
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fd fe00 	bl	800bb34 <pbuf_free>
      inseg.p = NULL;
 800df34:	4b21      	ldr	r3, [pc, #132]	@ (800dfbc <tcp_input+0x7fc>)
 800df36:	2200      	movs	r2, #0
 800df38:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800df3a:	e036      	b.n	800dfaa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800df3c:	4b20      	ldr	r3, [pc, #128]	@ (800dfc0 <tcp_input+0x800>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	899b      	ldrh	r3, [r3, #12]
 800df42:	b29b      	uxth	r3, r3
 800df44:	4618      	mov	r0, r3
 800df46:	f7fc fa03 	bl	800a350 <lwip_htons>
 800df4a:	4603      	mov	r3, r0
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f003 0304 	and.w	r3, r3, #4
 800df52:	2b00      	cmp	r3, #0
 800df54:	d118      	bne.n	800df88 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df56:	4b1b      	ldr	r3, [pc, #108]	@ (800dfc4 <tcp_input+0x804>)
 800df58:	6819      	ldr	r1, [r3, #0]
 800df5a:	4b1b      	ldr	r3, [pc, #108]	@ (800dfc8 <tcp_input+0x808>)
 800df5c:	881b      	ldrh	r3, [r3, #0]
 800df5e:	461a      	mov	r2, r3
 800df60:	4b1a      	ldr	r3, [pc, #104]	@ (800dfcc <tcp_input+0x80c>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df66:	4b16      	ldr	r3, [pc, #88]	@ (800dfc0 <tcp_input+0x800>)
 800df68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df6a:	885b      	ldrh	r3, [r3, #2]
 800df6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df6e:	4a14      	ldr	r2, [pc, #80]	@ (800dfc0 <tcp_input+0x800>)
 800df70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df72:	8812      	ldrh	r2, [r2, #0]
 800df74:	b292      	uxth	r2, r2
 800df76:	9202      	str	r2, [sp, #8]
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	4b15      	ldr	r3, [pc, #84]	@ (800dfd0 <tcp_input+0x810>)
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	4b15      	ldr	r3, [pc, #84]	@ (800dfd4 <tcp_input+0x814>)
 800df80:	4602      	mov	r2, r0
 800df82:	2000      	movs	r0, #0
 800df84:	f003 f816 	bl	8010fb4 <tcp_rst>
    pbuf_free(p);
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f7fd fdd3 	bl	800bb34 <pbuf_free>
  return;
 800df8e:	e00c      	b.n	800dfaa <tcp_input+0x7ea>
    goto dropped;
 800df90:	bf00      	nop
 800df92:	e006      	b.n	800dfa2 <tcp_input+0x7e2>
    goto dropped;
 800df94:	bf00      	nop
 800df96:	e004      	b.n	800dfa2 <tcp_input+0x7e2>
    goto dropped;
 800df98:	bf00      	nop
 800df9a:	e002      	b.n	800dfa2 <tcp_input+0x7e2>
      goto dropped;
 800df9c:	bf00      	nop
 800df9e:	e000      	b.n	800dfa2 <tcp_input+0x7e2>
      goto dropped;
 800dfa0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7fd fdc6 	bl	800bb34 <pbuf_free>
 800dfa8:	e000      	b.n	800dfac <tcp_input+0x7ec>
  return;
 800dfaa:	bf00      	nop
}
 800dfac:	3724      	adds	r7, #36	@ 0x24
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd90      	pop	{r4, r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	2000d830 	.word	0x2000d830
 800dfb8:	2000d82c 	.word	0x2000d82c
 800dfbc:	2000d7fc 	.word	0x2000d7fc
 800dfc0:	2000d80c 	.word	0x2000d80c
 800dfc4:	2000d820 	.word	0x2000d820
 800dfc8:	2000d826 	.word	0x2000d826
 800dfcc:	2000d81c 	.word	0x2000d81c
 800dfd0:	2000a0a0 	.word	0x2000a0a0
 800dfd4:	2000a0a4 	.word	0x2000a0a4

0800dfd8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d106      	bne.n	800dff4 <tcp_input_delayed_close+0x1c>
 800dfe6:	4b17      	ldr	r3, [pc, #92]	@ (800e044 <tcp_input_delayed_close+0x6c>)
 800dfe8:	f240 225a 	movw	r2, #602	@ 0x25a
 800dfec:	4916      	ldr	r1, [pc, #88]	@ (800e048 <tcp_input_delayed_close+0x70>)
 800dfee:	4817      	ldr	r0, [pc, #92]	@ (800e04c <tcp_input_delayed_close+0x74>)
 800dff0:	f006 fcf0 	bl	80149d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dff4:	4b16      	ldr	r3, [pc, #88]	@ (800e050 <tcp_input_delayed_close+0x78>)
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	f003 0310 	and.w	r3, r3, #16
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d01c      	beq.n	800e03a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	8b5b      	ldrh	r3, [r3, #26]
 800e004:	f003 0310 	and.w	r3, r3, #16
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10d      	bne.n	800e028 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e012:	2b00      	cmp	r3, #0
 800e014:	d008      	beq.n	800e028 <tcp_input_delayed_close+0x50>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	6912      	ldr	r2, [r2, #16]
 800e020:	f06f 010e 	mvn.w	r1, #14
 800e024:	4610      	mov	r0, r2
 800e026:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e028:	6879      	ldr	r1, [r7, #4]
 800e02a:	480a      	ldr	r0, [pc, #40]	@ (800e054 <tcp_input_delayed_close+0x7c>)
 800e02c:	f7ff fa50 	bl	800d4d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7fe f83b 	bl	800c0ac <tcp_free>
    return 1;
 800e036:	2301      	movs	r3, #1
 800e038:	e000      	b.n	800e03c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	08016c38 	.word	0x08016c38
 800e048:	08016e08 	.word	0x08016e08
 800e04c:	08016c84 	.word	0x08016c84
 800e050:	2000d829 	.word	0x2000d829
 800e054:	2000d7f0 	.word	0x2000d7f0

0800e058 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e058:	b590      	push	{r4, r7, lr}
 800e05a:	b08b      	sub	sp, #44	@ 0x2c
 800e05c:	af04      	add	r7, sp, #16
 800e05e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e060:	4b6f      	ldr	r3, [pc, #444]	@ (800e220 <tcp_listen_input+0x1c8>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f003 0304 	and.w	r3, r3, #4
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f040 80d2 	bne.w	800e212 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d106      	bne.n	800e082 <tcp_listen_input+0x2a>
 800e074:	4b6b      	ldr	r3, [pc, #428]	@ (800e224 <tcp_listen_input+0x1cc>)
 800e076:	f240 2281 	movw	r2, #641	@ 0x281
 800e07a:	496b      	ldr	r1, [pc, #428]	@ (800e228 <tcp_listen_input+0x1d0>)
 800e07c:	486b      	ldr	r0, [pc, #428]	@ (800e22c <tcp_listen_input+0x1d4>)
 800e07e:	f006 fca9 	bl	80149d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e082:	4b67      	ldr	r3, [pc, #412]	@ (800e220 <tcp_listen_input+0x1c8>)
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	f003 0310 	and.w	r3, r3, #16
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d019      	beq.n	800e0c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e08e:	4b68      	ldr	r3, [pc, #416]	@ (800e230 <tcp_listen_input+0x1d8>)
 800e090:	6819      	ldr	r1, [r3, #0]
 800e092:	4b68      	ldr	r3, [pc, #416]	@ (800e234 <tcp_listen_input+0x1dc>)
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	461a      	mov	r2, r3
 800e098:	4b67      	ldr	r3, [pc, #412]	@ (800e238 <tcp_listen_input+0x1e0>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e09e:	4b67      	ldr	r3, [pc, #412]	@ (800e23c <tcp_listen_input+0x1e4>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0a2:	885b      	ldrh	r3, [r3, #2]
 800e0a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0a6:	4a65      	ldr	r2, [pc, #404]	@ (800e23c <tcp_listen_input+0x1e4>)
 800e0a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0aa:	8812      	ldrh	r2, [r2, #0]
 800e0ac:	b292      	uxth	r2, r2
 800e0ae:	9202      	str	r2, [sp, #8]
 800e0b0:	9301      	str	r3, [sp, #4]
 800e0b2:	4b63      	ldr	r3, [pc, #396]	@ (800e240 <tcp_listen_input+0x1e8>)
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	4b63      	ldr	r3, [pc, #396]	@ (800e244 <tcp_listen_input+0x1ec>)
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f002 ff7a 	bl	8010fb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e0c0:	e0a9      	b.n	800e216 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e0c2:	4b57      	ldr	r3, [pc, #348]	@ (800e220 <tcp_listen_input+0x1c8>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	f003 0302 	and.w	r3, r3, #2
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f000 80a3 	beq.w	800e216 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	7d5b      	ldrb	r3, [r3, #21]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff f927 	bl	800d328 <tcp_alloc>
 800e0da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d111      	bne.n	800e106 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00a      	beq.n	800e100 <tcp_listen_input+0xa8>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	699b      	ldr	r3, [r3, #24]
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	6910      	ldr	r0, [r2, #16]
 800e0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	4798      	blx	r3
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	73bb      	strb	r3, [r7, #14]
      return;
 800e0fe:	e08b      	b.n	800e218 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e100:	23f0      	movs	r3, #240	@ 0xf0
 800e102:	73bb      	strb	r3, [r7, #14]
      return;
 800e104:	e088      	b.n	800e218 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e106:	4b50      	ldr	r3, [pc, #320]	@ (800e248 <tcp_listen_input+0x1f0>)
 800e108:	695a      	ldr	r2, [r3, #20]
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e10e:	4b4e      	ldr	r3, [pc, #312]	@ (800e248 <tcp_listen_input+0x1f0>)
 800e110:	691a      	ldr	r2, [r3, #16]
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	8ada      	ldrh	r2, [r3, #22]
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e11e:	4b47      	ldr	r3, [pc, #284]	@ (800e23c <tcp_listen_input+0x1e4>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	b29a      	uxth	r2, r3
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2203      	movs	r2, #3
 800e12e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e130:	4b41      	ldr	r3, [pc, #260]	@ (800e238 <tcp_listen_input+0x1e0>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e142:	6978      	ldr	r0, [r7, #20]
 800e144:	f7ff fa58 	bl	800d5f8 <tcp_next_iss>
 800e148:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	693a      	ldr	r2, [r7, #16]
 800e14e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	693a      	ldr	r2, [r7, #16]
 800e154:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	693a      	ldr	r2, [r7, #16]
 800e160:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e162:	4b35      	ldr	r3, [pc, #212]	@ (800e238 <tcp_listen_input+0x1e0>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	1e5a      	subs	r2, r3, #1
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	691a      	ldr	r2, [r3, #16]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	7a5b      	ldrb	r3, [r3, #9]
 800e17e:	f003 030c 	and.w	r3, r3, #12
 800e182:	b2da      	uxtb	r2, r3
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	7a1a      	ldrb	r2, [r3, #8]
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e190:	4b2e      	ldr	r3, [pc, #184]	@ (800e24c <tcp_listen_input+0x1f4>)
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	60da      	str	r2, [r3, #12]
 800e198:	4a2c      	ldr	r2, [pc, #176]	@ (800e24c <tcp_listen_input+0x1f4>)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	6013      	str	r3, [r2, #0]
 800e19e:	f003 f8cb 	bl	8011338 <tcp_timer_needed>
 800e1a2:	4b2b      	ldr	r3, [pc, #172]	@ (800e250 <tcp_listen_input+0x1f8>)
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e1a8:	6978      	ldr	r0, [r7, #20]
 800e1aa:	f001 fd8b 	bl	800fcc4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e1ae:	4b23      	ldr	r3, [pc, #140]	@ (800e23c <tcp_listen_input+0x1e4>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	89db      	ldrh	r3, [r3, #14]
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f004 ff6d 	bl	80130b0 <ip4_route>
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	3304      	adds	r3, #4
 800e1dc:	461a      	mov	r2, r3
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f7ff fa30 	bl	800d644 <tcp_eff_send_mss_netif>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e1ec:	2112      	movs	r1, #18
 800e1ee:	6978      	ldr	r0, [r7, #20]
 800e1f0:	f002 f83e 	bl	8010270 <tcp_enqueue_flags>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e1f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d004      	beq.n	800e20a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e200:	2100      	movs	r1, #0
 800e202:	6978      	ldr	r0, [r7, #20]
 800e204:	f7fe f97c 	bl	800c500 <tcp_abandon>
      return;
 800e208:	e006      	b.n	800e218 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e20a:	6978      	ldr	r0, [r7, #20]
 800e20c:	f002 f91e 	bl	801044c <tcp_output>
  return;
 800e210:	e001      	b.n	800e216 <tcp_listen_input+0x1be>
    return;
 800e212:	bf00      	nop
 800e214:	e000      	b.n	800e218 <tcp_listen_input+0x1c0>
  return;
 800e216:	bf00      	nop
}
 800e218:	371c      	adds	r7, #28
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd90      	pop	{r4, r7, pc}
 800e21e:	bf00      	nop
 800e220:	2000d828 	.word	0x2000d828
 800e224:	08016c38 	.word	0x08016c38
 800e228:	08016e30 	.word	0x08016e30
 800e22c:	08016c84 	.word	0x08016c84
 800e230:	2000d820 	.word	0x2000d820
 800e234:	2000d826 	.word	0x2000d826
 800e238:	2000d81c 	.word	0x2000d81c
 800e23c:	2000d80c 	.word	0x2000d80c
 800e240:	2000a0a0 	.word	0x2000a0a0
 800e244:	2000a0a4 	.word	0x2000a0a4
 800e248:	2000a090 	.word	0x2000a090
 800e24c:	2000d7f0 	.word	0x2000d7f0
 800e250:	2000d7f8 	.word	0x2000d7f8

0800e254 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af04      	add	r7, sp, #16
 800e25a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e25c:	4b2f      	ldr	r3, [pc, #188]	@ (800e31c <tcp_timewait_input+0xc8>)
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	f003 0304 	and.w	r3, r3, #4
 800e264:	2b00      	cmp	r3, #0
 800e266:	d153      	bne.n	800e310 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d106      	bne.n	800e27c <tcp_timewait_input+0x28>
 800e26e:	4b2c      	ldr	r3, [pc, #176]	@ (800e320 <tcp_timewait_input+0xcc>)
 800e270:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e274:	492b      	ldr	r1, [pc, #172]	@ (800e324 <tcp_timewait_input+0xd0>)
 800e276:	482c      	ldr	r0, [pc, #176]	@ (800e328 <tcp_timewait_input+0xd4>)
 800e278:	f006 fbac 	bl	80149d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e27c:	4b27      	ldr	r3, [pc, #156]	@ (800e31c <tcp_timewait_input+0xc8>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	f003 0302 	and.w	r3, r3, #2
 800e284:	2b00      	cmp	r3, #0
 800e286:	d02a      	beq.n	800e2de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e288:	4b28      	ldr	r3, [pc, #160]	@ (800e32c <tcp_timewait_input+0xd8>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	db2d      	blt.n	800e2f2 <tcp_timewait_input+0x9e>
 800e296:	4b25      	ldr	r3, [pc, #148]	@ (800e32c <tcp_timewait_input+0xd8>)
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e29e:	6879      	ldr	r1, [r7, #4]
 800e2a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e2a2:	440b      	add	r3, r1
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	dc23      	bgt.n	800e2f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2aa:	4b21      	ldr	r3, [pc, #132]	@ (800e330 <tcp_timewait_input+0xdc>)
 800e2ac:	6819      	ldr	r1, [r3, #0]
 800e2ae:	4b21      	ldr	r3, [pc, #132]	@ (800e334 <tcp_timewait_input+0xe0>)
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e32c <tcp_timewait_input+0xd8>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2ba:	4b1f      	ldr	r3, [pc, #124]	@ (800e338 <tcp_timewait_input+0xe4>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2be:	885b      	ldrh	r3, [r3, #2]
 800e2c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2c2:	4a1d      	ldr	r2, [pc, #116]	@ (800e338 <tcp_timewait_input+0xe4>)
 800e2c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2c6:	8812      	ldrh	r2, [r2, #0]
 800e2c8:	b292      	uxth	r2, r2
 800e2ca:	9202      	str	r2, [sp, #8]
 800e2cc:	9301      	str	r3, [sp, #4]
 800e2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e33c <tcp_timewait_input+0xe8>)
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e340 <tcp_timewait_input+0xec>)
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f002 fe6c 	bl	8010fb4 <tcp_rst>
      return;
 800e2dc:	e01b      	b.n	800e316 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e2de:	4b0f      	ldr	r3, [pc, #60]	@ (800e31c <tcp_timewait_input+0xc8>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d003      	beq.n	800e2f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e2ea:	4b16      	ldr	r3, [pc, #88]	@ (800e344 <tcp_timewait_input+0xf0>)
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e2f2:	4b10      	ldr	r3, [pc, #64]	@ (800e334 <tcp_timewait_input+0xe0>)
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00c      	beq.n	800e314 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	8b5b      	ldrh	r3, [r3, #26]
 800e2fe:	f043 0302 	orr.w	r3, r3, #2
 800e302:	b29a      	uxth	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f002 f89f 	bl	801044c <tcp_output>
  }
  return;
 800e30e:	e001      	b.n	800e314 <tcp_timewait_input+0xc0>
    return;
 800e310:	bf00      	nop
 800e312:	e000      	b.n	800e316 <tcp_timewait_input+0xc2>
  return;
 800e314:	bf00      	nop
}
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	2000d828 	.word	0x2000d828
 800e320:	08016c38 	.word	0x08016c38
 800e324:	08016e50 	.word	0x08016e50
 800e328:	08016c84 	.word	0x08016c84
 800e32c:	2000d81c 	.word	0x2000d81c
 800e330:	2000d820 	.word	0x2000d820
 800e334:	2000d826 	.word	0x2000d826
 800e338:	2000d80c 	.word	0x2000d80c
 800e33c:	2000a0a0 	.word	0x2000a0a0
 800e340:	2000a0a4 	.word	0x2000a0a4
 800e344:	2000d7e4 	.word	0x2000d7e4

0800e348 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e348:	b590      	push	{r4, r7, lr}
 800e34a:	b08d      	sub	sp, #52	@ 0x34
 800e34c:	af04      	add	r7, sp, #16
 800e34e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e354:	2300      	movs	r3, #0
 800e356:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d106      	bne.n	800e36c <tcp_process+0x24>
 800e35e:	4b9d      	ldr	r3, [pc, #628]	@ (800e5d4 <tcp_process+0x28c>)
 800e360:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e364:	499c      	ldr	r1, [pc, #624]	@ (800e5d8 <tcp_process+0x290>)
 800e366:	489d      	ldr	r0, [pc, #628]	@ (800e5dc <tcp_process+0x294>)
 800e368:	f006 fb34 	bl	80149d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e36c:	4b9c      	ldr	r3, [pc, #624]	@ (800e5e0 <tcp_process+0x298>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	f003 0304 	and.w	r3, r3, #4
 800e374:	2b00      	cmp	r3, #0
 800e376:	d04e      	beq.n	800e416 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	7d1b      	ldrb	r3, [r3, #20]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d108      	bne.n	800e392 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e384:	4b97      	ldr	r3, [pc, #604]	@ (800e5e4 <tcp_process+0x29c>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d123      	bne.n	800e3d4 <tcp_process+0x8c>
        acceptable = 1;
 800e38c:	2301      	movs	r3, #1
 800e38e:	76fb      	strb	r3, [r7, #27]
 800e390:	e020      	b.n	800e3d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e396:	4b94      	ldr	r3, [pc, #592]	@ (800e5e8 <tcp_process+0x2a0>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d102      	bne.n	800e3a4 <tcp_process+0x5c>
        acceptable = 1;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	76fb      	strb	r3, [r7, #27]
 800e3a2:	e017      	b.n	800e3d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e3a4:	4b90      	ldr	r3, [pc, #576]	@ (800e5e8 <tcp_process+0x2a0>)
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ac:	1ad3      	subs	r3, r2, r3
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	db10      	blt.n	800e3d4 <tcp_process+0x8c>
 800e3b2:	4b8d      	ldr	r3, [pc, #564]	@ (800e5e8 <tcp_process+0x2a0>)
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ba:	6879      	ldr	r1, [r7, #4]
 800e3bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e3be:	440b      	add	r3, r1
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	dc06      	bgt.n	800e3d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	8b5b      	ldrh	r3, [r3, #26]
 800e3ca:	f043 0302 	orr.w	r3, r3, #2
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e3d4:	7efb      	ldrb	r3, [r7, #27]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d01b      	beq.n	800e412 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	7d1b      	ldrb	r3, [r3, #20]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d106      	bne.n	800e3f0 <tcp_process+0xa8>
 800e3e2:	4b7c      	ldr	r3, [pc, #496]	@ (800e5d4 <tcp_process+0x28c>)
 800e3e4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e3e8:	4980      	ldr	r1, [pc, #512]	@ (800e5ec <tcp_process+0x2a4>)
 800e3ea:	487c      	ldr	r0, [pc, #496]	@ (800e5dc <tcp_process+0x294>)
 800e3ec:	f006 faf2 	bl	80149d4 <iprintf>
      recv_flags |= TF_RESET;
 800e3f0:	4b7f      	ldr	r3, [pc, #508]	@ (800e5f0 <tcp_process+0x2a8>)
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	f043 0308 	orr.w	r3, r3, #8
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	4b7d      	ldr	r3, [pc, #500]	@ (800e5f0 <tcp_process+0x2a8>)
 800e3fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	8b5b      	ldrh	r3, [r3, #26]
 800e402:	f023 0301 	bic.w	r3, r3, #1
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e40c:	f06f 030d 	mvn.w	r3, #13
 800e410:	e37a      	b.n	800eb08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e412:	2300      	movs	r3, #0
 800e414:	e378      	b.n	800eb08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e416:	4b72      	ldr	r3, [pc, #456]	@ (800e5e0 <tcp_process+0x298>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	f003 0302 	and.w	r3, r3, #2
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d010      	beq.n	800e444 <tcp_process+0xfc>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7d1b      	ldrb	r3, [r3, #20]
 800e426:	2b02      	cmp	r3, #2
 800e428:	d00c      	beq.n	800e444 <tcp_process+0xfc>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7d1b      	ldrb	r3, [r3, #20]
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d008      	beq.n	800e444 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	8b5b      	ldrh	r3, [r3, #26]
 800e436:	f043 0302 	orr.w	r3, r3, #2
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e440:	2300      	movs	r3, #0
 800e442:	e361      	b.n	800eb08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	8b5b      	ldrh	r3, [r3, #26]
 800e448:	f003 0310 	and.w	r3, r3, #16
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d103      	bne.n	800e458 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e450:	4b68      	ldr	r3, [pc, #416]	@ (800e5f4 <tcp_process+0x2ac>)
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f001 fc2b 	bl	800fcc4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	7d1b      	ldrb	r3, [r3, #20]
 800e472:	3b02      	subs	r3, #2
 800e474:	2b07      	cmp	r3, #7
 800e476:	f200 8337 	bhi.w	800eae8 <tcp_process+0x7a0>
 800e47a:	a201      	add	r2, pc, #4	@ (adr r2, 800e480 <tcp_process+0x138>)
 800e47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e480:	0800e4a1 	.word	0x0800e4a1
 800e484:	0800e6d1 	.word	0x0800e6d1
 800e488:	0800e849 	.word	0x0800e849
 800e48c:	0800e873 	.word	0x0800e873
 800e490:	0800e997 	.word	0x0800e997
 800e494:	0800e849 	.word	0x0800e849
 800e498:	0800ea23 	.word	0x0800ea23
 800e49c:	0800eab3 	.word	0x0800eab3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e4a0:	4b4f      	ldr	r3, [pc, #316]	@ (800e5e0 <tcp_process+0x298>)
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	f003 0310 	and.w	r3, r3, #16
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 80e4 	beq.w	800e676 <tcp_process+0x32e>
 800e4ae:	4b4c      	ldr	r3, [pc, #304]	@ (800e5e0 <tcp_process+0x298>)
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	f003 0302 	and.w	r3, r3, #2
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f000 80dd 	beq.w	800e676 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4c0:	1c5a      	adds	r2, r3, #1
 800e4c2:	4b48      	ldr	r3, [pc, #288]	@ (800e5e4 <tcp_process+0x29c>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	f040 80d5 	bne.w	800e676 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e4cc:	4b46      	ldr	r3, [pc, #280]	@ (800e5e8 <tcp_process+0x2a0>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	1c5a      	adds	r2, r3, #1
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e4de:	4b41      	ldr	r3, [pc, #260]	@ (800e5e4 <tcp_process+0x29c>)
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e4e6:	4b44      	ldr	r3, [pc, #272]	@ (800e5f8 <tcp_process+0x2b0>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	89db      	ldrh	r3, [r3, #14]
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e500:	4b39      	ldr	r3, [pc, #228]	@ (800e5e8 <tcp_process+0x2a0>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	1e5a      	subs	r2, r3, #1
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2204      	movs	r2, #4
 800e50e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	3304      	adds	r3, #4
 800e518:	4618      	mov	r0, r3
 800e51a:	f004 fdc9 	bl	80130b0 <ip4_route>
 800e51e:	4601      	mov	r1, r0
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3304      	adds	r3, #4
 800e524:	461a      	mov	r2, r3
 800e526:	4620      	mov	r0, r4
 800e528:	f7ff f88c 	bl	800d644 <tcp_eff_send_mss_netif>
 800e52c:	4603      	mov	r3, r0
 800e52e:	461a      	mov	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e538:	009a      	lsls	r2, r3, #2
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e53e:	005b      	lsls	r3, r3, #1
 800e540:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e544:	428b      	cmp	r3, r1
 800e546:	bf38      	it	cc
 800e548:	460b      	movcc	r3, r1
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d204      	bcs.n	800e558 <tcp_process+0x210>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	b29b      	uxth	r3, r3
 800e556:	e00d      	b.n	800e574 <tcp_process+0x22c>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e562:	4293      	cmp	r3, r2
 800e564:	d904      	bls.n	800e570 <tcp_process+0x228>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	e001      	b.n	800e574 <tcp_process+0x22c>
 800e570:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e580:	2b00      	cmp	r3, #0
 800e582:	d106      	bne.n	800e592 <tcp_process+0x24a>
 800e584:	4b13      	ldr	r3, [pc, #76]	@ (800e5d4 <tcp_process+0x28c>)
 800e586:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e58a:	491c      	ldr	r1, [pc, #112]	@ (800e5fc <tcp_process+0x2b4>)
 800e58c:	4813      	ldr	r0, [pc, #76]	@ (800e5dc <tcp_process+0x294>)
 800e58e:	f006 fa21 	bl	80149d4 <iprintf>
        --pcb->snd_queuelen;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e598:	3b01      	subs	r3, #1
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d12a      	bne.n	800e604 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d106      	bne.n	800e5c8 <tcp_process+0x280>
 800e5ba:	4b06      	ldr	r3, [pc, #24]	@ (800e5d4 <tcp_process+0x28c>)
 800e5bc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e5c0:	490f      	ldr	r1, [pc, #60]	@ (800e600 <tcp_process+0x2b8>)
 800e5c2:	4806      	ldr	r0, [pc, #24]	@ (800e5dc <tcp_process+0x294>)
 800e5c4:	f006 fa06 	bl	80149d4 <iprintf>
          pcb->unsent = rseg->next;
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e5d0:	e01c      	b.n	800e60c <tcp_process+0x2c4>
 800e5d2:	bf00      	nop
 800e5d4:	08016c38 	.word	0x08016c38
 800e5d8:	08016e70 	.word	0x08016e70
 800e5dc:	08016c84 	.word	0x08016c84
 800e5e0:	2000d828 	.word	0x2000d828
 800e5e4:	2000d820 	.word	0x2000d820
 800e5e8:	2000d81c 	.word	0x2000d81c
 800e5ec:	08016e8c 	.word	0x08016e8c
 800e5f0:	2000d829 	.word	0x2000d829
 800e5f4:	2000d7e4 	.word	0x2000d7e4
 800e5f8:	2000d80c 	.word	0x2000d80c
 800e5fc:	08016eac 	.word	0x08016eac
 800e600:	08016ec4 	.word	0x08016ec4
        } else {
          pcb->unacked = rseg->next;
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e60c:	69f8      	ldr	r0, [r7, #28]
 800e60e:	f7fe fd22 	bl	800d056 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e616:	2b00      	cmp	r3, #0
 800e618:	d104      	bne.n	800e624 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e620:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e622:	e006      	b.n	800e632 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00a      	beq.n	800e652 <tcp_process+0x30a>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	6910      	ldr	r0, [r2, #16]
 800e646:	2200      	movs	r2, #0
 800e648:	6879      	ldr	r1, [r7, #4]
 800e64a:	4798      	blx	r3
 800e64c:	4603      	mov	r3, r0
 800e64e:	76bb      	strb	r3, [r7, #26]
 800e650:	e001      	b.n	800e656 <tcp_process+0x30e>
 800e652:	2300      	movs	r3, #0
 800e654:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e656:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e65a:	f113 0f0d 	cmn.w	r3, #13
 800e65e:	d102      	bne.n	800e666 <tcp_process+0x31e>
          return ERR_ABRT;
 800e660:	f06f 030c 	mvn.w	r3, #12
 800e664:	e250      	b.n	800eb08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	8b5b      	ldrh	r3, [r3, #26]
 800e66a:	f043 0302 	orr.w	r3, r3, #2
 800e66e:	b29a      	uxth	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e674:	e23a      	b.n	800eaec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e676:	4b98      	ldr	r3, [pc, #608]	@ (800e8d8 <tcp_process+0x590>)
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	f003 0310 	and.w	r3, r3, #16
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f000 8234 	beq.w	800eaec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e684:	4b95      	ldr	r3, [pc, #596]	@ (800e8dc <tcp_process+0x594>)
 800e686:	6819      	ldr	r1, [r3, #0]
 800e688:	4b95      	ldr	r3, [pc, #596]	@ (800e8e0 <tcp_process+0x598>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	461a      	mov	r2, r3
 800e68e:	4b95      	ldr	r3, [pc, #596]	@ (800e8e4 <tcp_process+0x59c>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e694:	4b94      	ldr	r3, [pc, #592]	@ (800e8e8 <tcp_process+0x5a0>)
 800e696:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e698:	885b      	ldrh	r3, [r3, #2]
 800e69a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e69c:	4a92      	ldr	r2, [pc, #584]	@ (800e8e8 <tcp_process+0x5a0>)
 800e69e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6a0:	8812      	ldrh	r2, [r2, #0]
 800e6a2:	b292      	uxth	r2, r2
 800e6a4:	9202      	str	r2, [sp, #8]
 800e6a6:	9301      	str	r3, [sp, #4]
 800e6a8:	4b90      	ldr	r3, [pc, #576]	@ (800e8ec <tcp_process+0x5a4>)
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	4b90      	ldr	r3, [pc, #576]	@ (800e8f0 <tcp_process+0x5a8>)
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f002 fc7f 	bl	8010fb4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6bc:	2b05      	cmp	r3, #5
 800e6be:	f200 8215 	bhi.w	800eaec <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f002 fa4b 	bl	8010b64 <tcp_rexmit_rto>
      break;
 800e6ce:	e20d      	b.n	800eaec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e6d0:	4b81      	ldr	r3, [pc, #516]	@ (800e8d8 <tcp_process+0x590>)
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	f003 0310 	and.w	r3, r3, #16
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f000 80a1 	beq.w	800e820 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e6de:	4b7f      	ldr	r3, [pc, #508]	@ (800e8dc <tcp_process+0x594>)
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	db7e      	blt.n	800e7ec <tcp_process+0x4a4>
 800e6ee:	4b7b      	ldr	r3, [pc, #492]	@ (800e8dc <tcp_process+0x594>)
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	dc77      	bgt.n	800e7ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2204      	movs	r2, #4
 800e700:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e706:	2b00      	cmp	r3, #0
 800e708:	d102      	bne.n	800e710 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e70a:	23fa      	movs	r3, #250	@ 0xfa
 800e70c:	76bb      	strb	r3, [r7, #26]
 800e70e:	e01d      	b.n	800e74c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d106      	bne.n	800e728 <tcp_process+0x3e0>
 800e71a:	4b76      	ldr	r3, [pc, #472]	@ (800e8f4 <tcp_process+0x5ac>)
 800e71c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e720:	4975      	ldr	r1, [pc, #468]	@ (800e8f8 <tcp_process+0x5b0>)
 800e722:	4876      	ldr	r0, [pc, #472]	@ (800e8fc <tcp_process+0x5b4>)
 800e724:	f006 f956 	bl	80149d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00a      	beq.n	800e748 <tcp_process+0x400>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e736:	699b      	ldr	r3, [r3, #24]
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	6910      	ldr	r0, [r2, #16]
 800e73c:	2200      	movs	r2, #0
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	4798      	blx	r3
 800e742:	4603      	mov	r3, r0
 800e744:	76bb      	strb	r3, [r7, #26]
 800e746:	e001      	b.n	800e74c <tcp_process+0x404>
 800e748:	23f0      	movs	r3, #240	@ 0xf0
 800e74a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e74c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00a      	beq.n	800e76a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e754:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e758:	f113 0f0d 	cmn.w	r3, #13
 800e75c:	d002      	beq.n	800e764 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7fd ff8c 	bl	800c67c <tcp_abort>
            }
            return ERR_ABRT;
 800e764:	f06f 030c 	mvn.w	r3, #12
 800e768:	e1ce      	b.n	800eb08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fae0 	bl	800ed30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e770:	4b63      	ldr	r3, [pc, #396]	@ (800e900 <tcp_process+0x5b8>)
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d005      	beq.n	800e784 <tcp_process+0x43c>
            recv_acked--;
 800e778:	4b61      	ldr	r3, [pc, #388]	@ (800e900 <tcp_process+0x5b8>)
 800e77a:	881b      	ldrh	r3, [r3, #0]
 800e77c:	3b01      	subs	r3, #1
 800e77e:	b29a      	uxth	r2, r3
 800e780:	4b5f      	ldr	r3, [pc, #380]	@ (800e900 <tcp_process+0x5b8>)
 800e782:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e788:	009a      	lsls	r2, r3, #2
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e794:	428b      	cmp	r3, r1
 800e796:	bf38      	it	cc
 800e798:	460b      	movcc	r3, r1
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d204      	bcs.n	800e7a8 <tcp_process+0x460>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	e00d      	b.n	800e7c4 <tcp_process+0x47c>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7ac:	005b      	lsls	r3, r3, #1
 800e7ae:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d904      	bls.n	800e7c0 <tcp_process+0x478>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7ba:	005b      	lsls	r3, r3, #1
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	e001      	b.n	800e7c4 <tcp_process+0x47c>
 800e7c0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e7ca:	4b4e      	ldr	r3, [pc, #312]	@ (800e904 <tcp_process+0x5bc>)
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	f003 0320 	and.w	r3, r3, #32
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d037      	beq.n	800e846 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	8b5b      	ldrh	r3, [r3, #26]
 800e7da:	f043 0302 	orr.w	r3, r3, #2
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2207      	movs	r2, #7
 800e7e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e7ea:	e02c      	b.n	800e846 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ec:	4b3b      	ldr	r3, [pc, #236]	@ (800e8dc <tcp_process+0x594>)
 800e7ee:	6819      	ldr	r1, [r3, #0]
 800e7f0:	4b3b      	ldr	r3, [pc, #236]	@ (800e8e0 <tcp_process+0x598>)
 800e7f2:	881b      	ldrh	r3, [r3, #0]
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	4b3b      	ldr	r3, [pc, #236]	@ (800e8e4 <tcp_process+0x59c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7fc:	4b3a      	ldr	r3, [pc, #232]	@ (800e8e8 <tcp_process+0x5a0>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e800:	885b      	ldrh	r3, [r3, #2]
 800e802:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e804:	4a38      	ldr	r2, [pc, #224]	@ (800e8e8 <tcp_process+0x5a0>)
 800e806:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e808:	8812      	ldrh	r2, [r2, #0]
 800e80a:	b292      	uxth	r2, r2
 800e80c:	9202      	str	r2, [sp, #8]
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	4b36      	ldr	r3, [pc, #216]	@ (800e8ec <tcp_process+0x5a4>)
 800e812:	9300      	str	r3, [sp, #0]
 800e814:	4b36      	ldr	r3, [pc, #216]	@ (800e8f0 <tcp_process+0x5a8>)
 800e816:	4602      	mov	r2, r0
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f002 fbcb 	bl	8010fb4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e81e:	e167      	b.n	800eaf0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e820:	4b2d      	ldr	r3, [pc, #180]	@ (800e8d8 <tcp_process+0x590>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	f003 0302 	and.w	r3, r3, #2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f000 8161 	beq.w	800eaf0 <tcp_process+0x7a8>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e832:	1e5a      	subs	r2, r3, #1
 800e834:	4b2b      	ldr	r3, [pc, #172]	@ (800e8e4 <tcp_process+0x59c>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	429a      	cmp	r2, r3
 800e83a:	f040 8159 	bne.w	800eaf0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f002 f9b2 	bl	8010ba8 <tcp_rexmit>
      break;
 800e844:	e154      	b.n	800eaf0 <tcp_process+0x7a8>
 800e846:	e153      	b.n	800eaf0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fa71 	bl	800ed30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e84e:	4b2d      	ldr	r3, [pc, #180]	@ (800e904 <tcp_process+0x5bc>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	f003 0320 	and.w	r3, r3, #32
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 814c 	beq.w	800eaf4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	8b5b      	ldrh	r3, [r3, #26]
 800e860:	f043 0302 	orr.w	r3, r3, #2
 800e864:	b29a      	uxth	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2207      	movs	r2, #7
 800e86e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e870:	e140      	b.n	800eaf4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 fa5c 	bl	800ed30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e878:	4b22      	ldr	r3, [pc, #136]	@ (800e904 <tcp_process+0x5bc>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	f003 0320 	and.w	r3, r3, #32
 800e880:	2b00      	cmp	r3, #0
 800e882:	d071      	beq.n	800e968 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e884:	4b14      	ldr	r3, [pc, #80]	@ (800e8d8 <tcp_process+0x590>)
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	f003 0310 	and.w	r3, r3, #16
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d060      	beq.n	800e952 <tcp_process+0x60a>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e894:	4b11      	ldr	r3, [pc, #68]	@ (800e8dc <tcp_process+0x594>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d15a      	bne.n	800e952 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d156      	bne.n	800e952 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	8b5b      	ldrh	r3, [r3, #26]
 800e8a8:	f043 0302 	orr.w	r3, r3, #2
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7fe fdbc 	bl	800d430 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e8b8:	4b13      	ldr	r3, [pc, #76]	@ (800e908 <tcp_process+0x5c0>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d105      	bne.n	800e8ce <tcp_process+0x586>
 800e8c2:	4b11      	ldr	r3, [pc, #68]	@ (800e908 <tcp_process+0x5c0>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	4a0f      	ldr	r2, [pc, #60]	@ (800e908 <tcp_process+0x5c0>)
 800e8ca:	6013      	str	r3, [r2, #0]
 800e8cc:	e02e      	b.n	800e92c <tcp_process+0x5e4>
 800e8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e908 <tcp_process+0x5c0>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	617b      	str	r3, [r7, #20]
 800e8d4:	e027      	b.n	800e926 <tcp_process+0x5de>
 800e8d6:	bf00      	nop
 800e8d8:	2000d828 	.word	0x2000d828
 800e8dc:	2000d820 	.word	0x2000d820
 800e8e0:	2000d826 	.word	0x2000d826
 800e8e4:	2000d81c 	.word	0x2000d81c
 800e8e8:	2000d80c 	.word	0x2000d80c
 800e8ec:	2000a0a0 	.word	0x2000a0a0
 800e8f0:	2000a0a4 	.word	0x2000a0a4
 800e8f4:	08016c38 	.word	0x08016c38
 800e8f8:	08016ed8 	.word	0x08016ed8
 800e8fc:	08016c84 	.word	0x08016c84
 800e900:	2000d824 	.word	0x2000d824
 800e904:	2000d829 	.word	0x2000d829
 800e908:	2000d7f0 	.word	0x2000d7f0
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	429a      	cmp	r2, r3
 800e914:	d104      	bne.n	800e920 <tcp_process+0x5d8>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68da      	ldr	r2, [r3, #12]
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	60da      	str	r2, [r3, #12]
 800e91e:	e005      	b.n	800e92c <tcp_process+0x5e4>
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	617b      	str	r3, [r7, #20]
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1ef      	bne.n	800e90c <tcp_process+0x5c4>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	4b77      	ldr	r3, [pc, #476]	@ (800eb10 <tcp_process+0x7c8>)
 800e934:	2201      	movs	r2, #1
 800e936:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	220a      	movs	r2, #10
 800e93c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e93e:	4b75      	ldr	r3, [pc, #468]	@ (800eb14 <tcp_process+0x7cc>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	60da      	str	r2, [r3, #12]
 800e946:	4a73      	ldr	r2, [pc, #460]	@ (800eb14 <tcp_process+0x7cc>)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	f002 fcf4 	bl	8011338 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e950:	e0d2      	b.n	800eaf8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	8b5b      	ldrh	r3, [r3, #26]
 800e956:	f043 0302 	orr.w	r3, r3, #2
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2208      	movs	r2, #8
 800e964:	751a      	strb	r2, [r3, #20]
      break;
 800e966:	e0c7      	b.n	800eaf8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e968:	4b6b      	ldr	r3, [pc, #428]	@ (800eb18 <tcp_process+0x7d0>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f003 0310 	and.w	r3, r3, #16
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 80c1 	beq.w	800eaf8 <tcp_process+0x7b0>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e97a:	4b68      	ldr	r3, [pc, #416]	@ (800eb1c <tcp_process+0x7d4>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	429a      	cmp	r2, r3
 800e980:	f040 80ba 	bne.w	800eaf8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f040 80b5 	bne.w	800eaf8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2206      	movs	r2, #6
 800e992:	751a      	strb	r2, [r3, #20]
      break;
 800e994:	e0b0      	b.n	800eaf8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 f9ca 	bl	800ed30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e99c:	4b60      	ldr	r3, [pc, #384]	@ (800eb20 <tcp_process+0x7d8>)
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	f003 0320 	and.w	r3, r3, #32
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 80a9 	beq.w	800eafc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	8b5b      	ldrh	r3, [r3, #26]
 800e9ae:	f043 0302 	orr.w	r3, r3, #2
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7fe fd39 	bl	800d430 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e9be:	4b59      	ldr	r3, [pc, #356]	@ (800eb24 <tcp_process+0x7dc>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d105      	bne.n	800e9d4 <tcp_process+0x68c>
 800e9c8:	4b56      	ldr	r3, [pc, #344]	@ (800eb24 <tcp_process+0x7dc>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	4a55      	ldr	r2, [pc, #340]	@ (800eb24 <tcp_process+0x7dc>)
 800e9d0:	6013      	str	r3, [r2, #0]
 800e9d2:	e013      	b.n	800e9fc <tcp_process+0x6b4>
 800e9d4:	4b53      	ldr	r3, [pc, #332]	@ (800eb24 <tcp_process+0x7dc>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	613b      	str	r3, [r7, #16]
 800e9da:	e00c      	b.n	800e9f6 <tcp_process+0x6ae>
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d104      	bne.n	800e9f0 <tcp_process+0x6a8>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	68da      	ldr	r2, [r3, #12]
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	60da      	str	r2, [r3, #12]
 800e9ee:	e005      	b.n	800e9fc <tcp_process+0x6b4>
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	613b      	str	r3, [r7, #16]
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1ef      	bne.n	800e9dc <tcp_process+0x694>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	60da      	str	r2, [r3, #12]
 800ea02:	4b43      	ldr	r3, [pc, #268]	@ (800eb10 <tcp_process+0x7c8>)
 800ea04:	2201      	movs	r2, #1
 800ea06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	220a      	movs	r2, #10
 800ea0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea0e:	4b41      	ldr	r3, [pc, #260]	@ (800eb14 <tcp_process+0x7cc>)
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	60da      	str	r2, [r3, #12]
 800ea16:	4a3f      	ldr	r2, [pc, #252]	@ (800eb14 <tcp_process+0x7cc>)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6013      	str	r3, [r2, #0]
 800ea1c:	f002 fc8c 	bl	8011338 <tcp_timer_needed>
      }
      break;
 800ea20:	e06c      	b.n	800eafc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 f984 	bl	800ed30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea28:	4b3b      	ldr	r3, [pc, #236]	@ (800eb18 <tcp_process+0x7d0>)
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	f003 0310 	and.w	r3, r3, #16
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d065      	beq.n	800eb00 <tcp_process+0x7b8>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea38:	4b38      	ldr	r3, [pc, #224]	@ (800eb1c <tcp_process+0x7d4>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d15f      	bne.n	800eb00 <tcp_process+0x7b8>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d15b      	bne.n	800eb00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fe fcf1 	bl	800d430 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea4e:	4b35      	ldr	r3, [pc, #212]	@ (800eb24 <tcp_process+0x7dc>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d105      	bne.n	800ea64 <tcp_process+0x71c>
 800ea58:	4b32      	ldr	r3, [pc, #200]	@ (800eb24 <tcp_process+0x7dc>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	4a31      	ldr	r2, [pc, #196]	@ (800eb24 <tcp_process+0x7dc>)
 800ea60:	6013      	str	r3, [r2, #0]
 800ea62:	e013      	b.n	800ea8c <tcp_process+0x744>
 800ea64:	4b2f      	ldr	r3, [pc, #188]	@ (800eb24 <tcp_process+0x7dc>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	60fb      	str	r3, [r7, #12]
 800ea6a:	e00c      	b.n	800ea86 <tcp_process+0x73e>
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d104      	bne.n	800ea80 <tcp_process+0x738>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	68da      	ldr	r2, [r3, #12]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	60da      	str	r2, [r3, #12]
 800ea7e:	e005      	b.n	800ea8c <tcp_process+0x744>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	60fb      	str	r3, [r7, #12]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1ef      	bne.n	800ea6c <tcp_process+0x724>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	60da      	str	r2, [r3, #12]
 800ea92:	4b1f      	ldr	r3, [pc, #124]	@ (800eb10 <tcp_process+0x7c8>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	220a      	movs	r2, #10
 800ea9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea9e:	4b1d      	ldr	r3, [pc, #116]	@ (800eb14 <tcp_process+0x7cc>)
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	60da      	str	r2, [r3, #12]
 800eaa6:	4a1b      	ldr	r2, [pc, #108]	@ (800eb14 <tcp_process+0x7cc>)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6013      	str	r3, [r2, #0]
 800eaac:	f002 fc44 	bl	8011338 <tcp_timer_needed>
      }
      break;
 800eab0:	e026      	b.n	800eb00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f93c 	bl	800ed30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eab8:	4b17      	ldr	r3, [pc, #92]	@ (800eb18 <tcp_process+0x7d0>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	f003 0310 	and.w	r3, r3, #16
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d01f      	beq.n	800eb04 <tcp_process+0x7bc>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eac8:	4b14      	ldr	r3, [pc, #80]	@ (800eb1c <tcp_process+0x7d4>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d119      	bne.n	800eb04 <tcp_process+0x7bc>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d115      	bne.n	800eb04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ead8:	4b11      	ldr	r3, [pc, #68]	@ (800eb20 <tcp_process+0x7d8>)
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	f043 0310 	orr.w	r3, r3, #16
 800eae0:	b2da      	uxtb	r2, r3
 800eae2:	4b0f      	ldr	r3, [pc, #60]	@ (800eb20 <tcp_process+0x7d8>)
 800eae4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eae6:	e00d      	b.n	800eb04 <tcp_process+0x7bc>
    default:
      break;
 800eae8:	bf00      	nop
 800eaea:	e00c      	b.n	800eb06 <tcp_process+0x7be>
      break;
 800eaec:	bf00      	nop
 800eaee:	e00a      	b.n	800eb06 <tcp_process+0x7be>
      break;
 800eaf0:	bf00      	nop
 800eaf2:	e008      	b.n	800eb06 <tcp_process+0x7be>
      break;
 800eaf4:	bf00      	nop
 800eaf6:	e006      	b.n	800eb06 <tcp_process+0x7be>
      break;
 800eaf8:	bf00      	nop
 800eafa:	e004      	b.n	800eb06 <tcp_process+0x7be>
      break;
 800eafc:	bf00      	nop
 800eafe:	e002      	b.n	800eb06 <tcp_process+0x7be>
      break;
 800eb00:	bf00      	nop
 800eb02:	e000      	b.n	800eb06 <tcp_process+0x7be>
      break;
 800eb04:	bf00      	nop
  }
  return ERR_OK;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3724      	adds	r7, #36	@ 0x24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd90      	pop	{r4, r7, pc}
 800eb10:	2000d7f8 	.word	0x2000d7f8
 800eb14:	2000d7f4 	.word	0x2000d7f4
 800eb18:	2000d828 	.word	0x2000d828
 800eb1c:	2000d820 	.word	0x2000d820
 800eb20:	2000d829 	.word	0x2000d829
 800eb24:	2000d7f0 	.word	0x2000d7f0

0800eb28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800eb28:	b590      	push	{r4, r7, lr}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d106      	bne.n	800eb46 <tcp_oos_insert_segment+0x1e>
 800eb38:	4b3b      	ldr	r3, [pc, #236]	@ (800ec28 <tcp_oos_insert_segment+0x100>)
 800eb3a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800eb3e:	493b      	ldr	r1, [pc, #236]	@ (800ec2c <tcp_oos_insert_segment+0x104>)
 800eb40:	483b      	ldr	r0, [pc, #236]	@ (800ec30 <tcp_oos_insert_segment+0x108>)
 800eb42:	f005 ff47 	bl	80149d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	899b      	ldrh	r3, [r3, #12]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fb fbfe 	bl	800a350 <lwip_htons>
 800eb54:	4603      	mov	r3, r0
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	f003 0301 	and.w	r3, r3, #1
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d028      	beq.n	800ebb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eb60:	6838      	ldr	r0, [r7, #0]
 800eb62:	f7fe fa63 	bl	800d02c <tcp_segs_free>
    next = NULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	603b      	str	r3, [r7, #0]
 800eb6a:	e056      	b.n	800ec1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	899b      	ldrh	r3, [r3, #12]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fb fbeb 	bl	800a350 <lwip_htons>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00d      	beq.n	800eba2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	899b      	ldrh	r3, [r3, #12]
 800eb8c:	b29c      	uxth	r4, r3
 800eb8e:	2001      	movs	r0, #1
 800eb90:	f7fb fbde 	bl	800a350 <lwip_htons>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	68db      	ldr	r3, [r3, #12]
 800eb9c:	4322      	orrs	r2, r4
 800eb9e:	b292      	uxth	r2, r2
 800eba0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f7fe fa52 	bl	800d056 <tcp_seg_free>
    while (next &&
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00e      	beq.n	800ebd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	891b      	ldrh	r3, [r3, #8]
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ec34 <tcp_oos_insert_segment+0x10c>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	441a      	add	r2, r3
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	6839      	ldr	r1, [r7, #0]
 800ebcc:	8909      	ldrh	r1, [r1, #8]
 800ebce:	440b      	add	r3, r1
 800ebd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	daca      	bge.n	800eb6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d01e      	beq.n	800ec1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	891b      	ldrh	r3, [r3, #8]
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	4b14      	ldr	r3, [pc, #80]	@ (800ec34 <tcp_oos_insert_segment+0x10c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	441a      	add	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	dd12      	ble.n	800ec1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	4b0d      	ldr	r3, [pc, #52]	@ (800ec34 <tcp_oos_insert_segment+0x10c>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	685a      	ldr	r2, [r3, #4]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	891b      	ldrh	r3, [r3, #8]
 800ec12:	4619      	mov	r1, r3
 800ec14:	4610      	mov	r0, r2
 800ec16:	f7fc fe07 	bl	800b828 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	683a      	ldr	r2, [r7, #0]
 800ec1e:	601a      	str	r2, [r3, #0]
}
 800ec20:	bf00      	nop
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd90      	pop	{r4, r7, pc}
 800ec28:	08016c38 	.word	0x08016c38
 800ec2c:	08016ef8 	.word	0x08016ef8
 800ec30:	08016c84 	.word	0x08016c84
 800ec34:	2000d81c 	.word	0x2000d81c

0800ec38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ec38:	b5b0      	push	{r4, r5, r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ec46:	e03e      	b.n	800ecc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fc fffa 	bl	800bc50 <pbuf_clen>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ec66:	8a7a      	ldrh	r2, [r7, #18]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d906      	bls.n	800ec7a <tcp_free_acked_segments+0x42>
 800ec6c:	4b2a      	ldr	r3, [pc, #168]	@ (800ed18 <tcp_free_acked_segments+0xe0>)
 800ec6e:	f240 4257 	movw	r2, #1111	@ 0x457
 800ec72:	492a      	ldr	r1, [pc, #168]	@ (800ed1c <tcp_free_acked_segments+0xe4>)
 800ec74:	482a      	ldr	r0, [pc, #168]	@ (800ed20 <tcp_free_acked_segments+0xe8>)
 800ec76:	f005 fead 	bl	80149d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ec80:	8a7b      	ldrh	r3, [r7, #18]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	891a      	ldrh	r2, [r3, #8]
 800ec90:	4b24      	ldr	r3, [pc, #144]	@ (800ed24 <tcp_free_acked_segments+0xec>)
 800ec92:	881b      	ldrh	r3, [r3, #0]
 800ec94:	4413      	add	r3, r2
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	4b22      	ldr	r3, [pc, #136]	@ (800ed24 <tcp_free_acked_segments+0xec>)
 800ec9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ec9c:	6978      	ldr	r0, [r7, #20]
 800ec9e:	f7fe f9da 	bl	800d056 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00c      	beq.n	800ecc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d109      	bne.n	800ecc6 <tcp_free_acked_segments+0x8e>
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d106      	bne.n	800ecc6 <tcp_free_acked_segments+0x8e>
 800ecb8:	4b17      	ldr	r3, [pc, #92]	@ (800ed18 <tcp_free_acked_segments+0xe0>)
 800ecba:	f240 4261 	movw	r2, #1121	@ 0x461
 800ecbe:	491a      	ldr	r1, [pc, #104]	@ (800ed28 <tcp_free_acked_segments+0xf0>)
 800ecc0:	4817      	ldr	r0, [pc, #92]	@ (800ed20 <tcp_free_acked_segments+0xe8>)
 800ecc2:	f005 fe87 	bl	80149d4 <iprintf>
  while (seg_list != NULL &&
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d020      	beq.n	800ed0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fb fb51 	bl	800a37a <lwip_htonl>
 800ecd8:	4604      	mov	r4, r0
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	891b      	ldrh	r3, [r3, #8]
 800ecde:	461d      	mov	r5, r3
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	899b      	ldrh	r3, [r3, #12]
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fb fb31 	bl	800a350 <lwip_htons>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	f003 0303 	and.w	r3, r3, #3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d001      	beq.n	800ecfe <tcp_free_acked_segments+0xc6>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e000      	b.n	800ed00 <tcp_free_acked_segments+0xc8>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	442b      	add	r3, r5
 800ed02:	18e2      	adds	r2, r4, r3
 800ed04:	4b09      	ldr	r3, [pc, #36]	@ (800ed2c <tcp_free_acked_segments+0xf4>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	dd9c      	ble.n	800ec48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ed0e:	68bb      	ldr	r3, [r7, #8]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3718      	adds	r7, #24
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bdb0      	pop	{r4, r5, r7, pc}
 800ed18:	08016c38 	.word	0x08016c38
 800ed1c:	08016f20 	.word	0x08016f20
 800ed20:	08016c84 	.word	0x08016c84
 800ed24:	2000d824 	.word	0x2000d824
 800ed28:	08016f48 	.word	0x08016f48
 800ed2c:	2000d820 	.word	0x2000d820

0800ed30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ed30:	b5b0      	push	{r4, r5, r7, lr}
 800ed32:	b094      	sub	sp, #80	@ 0x50
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <tcp_receive+0x20>
 800ed42:	4b91      	ldr	r3, [pc, #580]	@ (800ef88 <tcp_receive+0x258>)
 800ed44:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ed48:	4990      	ldr	r1, [pc, #576]	@ (800ef8c <tcp_receive+0x25c>)
 800ed4a:	4891      	ldr	r0, [pc, #580]	@ (800ef90 <tcp_receive+0x260>)
 800ed4c:	f005 fe42 	bl	80149d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	7d1b      	ldrb	r3, [r3, #20]
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d806      	bhi.n	800ed66 <tcp_receive+0x36>
 800ed58:	4b8b      	ldr	r3, [pc, #556]	@ (800ef88 <tcp_receive+0x258>)
 800ed5a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ed5e:	498d      	ldr	r1, [pc, #564]	@ (800ef94 <tcp_receive+0x264>)
 800ed60:	488b      	ldr	r0, [pc, #556]	@ (800ef90 <tcp_receive+0x260>)
 800ed62:	f005 fe37 	bl	80149d4 <iprintf>

  if (flags & TCP_ACK) {
 800ed66:	4b8c      	ldr	r3, [pc, #560]	@ (800ef98 <tcp_receive+0x268>)
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	f003 0310 	and.w	r3, r3, #16
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f000 8264 	beq.w	800f23c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed80:	4413      	add	r3, r2
 800ed82:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed88:	4b84      	ldr	r3, [pc, #528]	@ (800ef9c <tcp_receive+0x26c>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	db1b      	blt.n	800edca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed96:	4b81      	ldr	r3, [pc, #516]	@ (800ef9c <tcp_receive+0x26c>)
 800ed98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d106      	bne.n	800edac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eda2:	4b7f      	ldr	r3, [pc, #508]	@ (800efa0 <tcp_receive+0x270>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	db0e      	blt.n	800edca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800edb0:	4b7b      	ldr	r3, [pc, #492]	@ (800efa0 <tcp_receive+0x270>)
 800edb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d125      	bne.n	800ee04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800edb8:	4b7a      	ldr	r3, [pc, #488]	@ (800efa4 <tcp_receive+0x274>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	89db      	ldrh	r3, [r3, #14]
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d91c      	bls.n	800ee04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800edca:	4b76      	ldr	r3, [pc, #472]	@ (800efa4 <tcp_receive+0x274>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	89db      	ldrh	r3, [r3, #14]
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d205      	bcs.n	800edf4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800edf4:	4b69      	ldr	r3, [pc, #420]	@ (800ef9c <tcp_receive+0x26c>)
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800edfc:	4b68      	ldr	r3, [pc, #416]	@ (800efa0 <tcp_receive+0x270>)
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ee04:	4b66      	ldr	r3, [pc, #408]	@ (800efa0 <tcp_receive+0x270>)
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee0c:	1ad3      	subs	r3, r2, r3
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	dc58      	bgt.n	800eec4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ee12:	4b65      	ldr	r3, [pc, #404]	@ (800efa8 <tcp_receive+0x278>)
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d14b      	bne.n	800eeb2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ee24:	4413      	add	r3, r2
 800ee26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d142      	bne.n	800eeb2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	db3d      	blt.n	800eeb2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee3a:	4b59      	ldr	r3, [pc, #356]	@ (800efa0 <tcp_receive+0x270>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d137      	bne.n	800eeb2 <tcp_receive+0x182>
              found_dupack = 1;
 800ee42:	2301      	movs	r3, #1
 800ee44:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee4c:	2bff      	cmp	r3, #255	@ 0xff
 800ee4e:	d007      	beq.n	800ee60 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee56:	3301      	adds	r3, #1
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	d91b      	bls.n	800eea2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee74:	4413      	add	r3, r2
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d30a      	bcc.n	800ee98 <tcp_receive+0x168>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee8c:	4413      	add	r3, r2
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ee96:	e004      	b.n	800eea2 <tcp_receive+0x172>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eea8:	2b02      	cmp	r3, #2
 800eeaa:	d902      	bls.n	800eeb2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f001 fee7 	bl	8010c80 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800eeb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f040 8161 	bne.w	800f17c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eec2:	e15b      	b.n	800f17c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eec4:	4b36      	ldr	r3, [pc, #216]	@ (800efa0 <tcp_receive+0x270>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	3b01      	subs	r3, #1
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f2c0 814e 	blt.w	800f172 <tcp_receive+0x442>
 800eed6:	4b32      	ldr	r3, [pc, #200]	@ (800efa0 <tcp_receive+0x270>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	f300 8146 	bgt.w	800f172 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	8b5b      	ldrh	r3, [r3, #26]
 800eeea:	f003 0304 	and.w	r3, r3, #4
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d010      	beq.n	800ef14 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	8b5b      	ldrh	r3, [r3, #26]
 800eef6:	f023 0304 	bic.w	r3, r3, #4
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ef22:	10db      	asrs	r3, r3, #3
 800ef24:	b21b      	sxth	r3, r3
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	4413      	add	r3, r2
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	b21a      	sxth	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ef3c:	4b18      	ldr	r3, [pc, #96]	@ (800efa0 <tcp_receive+0x270>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800ef54:	4b12      	ldr	r3, [pc, #72]	@ (800efa0 <tcp_receive+0x270>)
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	7d1b      	ldrb	r3, [r3, #20]
 800ef60:	2b03      	cmp	r3, #3
 800ef62:	f240 8097 	bls.w	800f094 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d245      	bcs.n	800f002 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	8b5b      	ldrh	r3, [r3, #26]
 800ef7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d014      	beq.n	800efac <tcp_receive+0x27c>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e013      	b.n	800efae <tcp_receive+0x27e>
 800ef86:	bf00      	nop
 800ef88:	08016c38 	.word	0x08016c38
 800ef8c:	08016f68 	.word	0x08016f68
 800ef90:	08016c84 	.word	0x08016c84
 800ef94:	08016f84 	.word	0x08016f84
 800ef98:	2000d828 	.word	0x2000d828
 800ef9c:	2000d81c 	.word	0x2000d81c
 800efa0:	2000d820 	.word	0x2000d820
 800efa4:	2000d80c 	.word	0x2000d80c
 800efa8:	2000d826 	.word	0x2000d826
 800efac:	2302      	movs	r3, #2
 800efae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800efb2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800efbc:	fb12 f303 	smulbb	r3, r2, r3
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800efc4:	4293      	cmp	r3, r2
 800efc6:	bf28      	it	cs
 800efc8:	4613      	movcs	r3, r2
 800efca:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800efd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800efd4:	4413      	add	r3, r2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800efde:	429a      	cmp	r2, r3
 800efe0:	d309      	bcc.n	800eff6 <tcp_receive+0x2c6>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800efe8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800efea:	4413      	add	r3, r2
 800efec:	b29a      	uxth	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800eff4:	e04e      	b.n	800f094 <tcp_receive+0x364>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800effc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f000:	e048      	b.n	800f094 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f008:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f00a:	4413      	add	r3, r2
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f014:	429a      	cmp	r2, r3
 800f016:	d309      	bcc.n	800f02c <tcp_receive+0x2fc>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f01e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f020:	4413      	add	r3, r2
 800f022:	b29a      	uxth	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f02a:	e004      	b.n	800f036 <tcp_receive+0x306>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f032:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f042:	429a      	cmp	r2, r3
 800f044:	d326      	bcc.n	800f094 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f052:	1ad3      	subs	r3, r2, r3
 800f054:	b29a      	uxth	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f066:	4413      	add	r3, r2
 800f068:	b29a      	uxth	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f070:	429a      	cmp	r2, r3
 800f072:	d30a      	bcc.n	800f08a <tcp_receive+0x35a>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f07e:	4413      	add	r3, r2
 800f080:	b29a      	uxth	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f088:	e004      	b.n	800f094 <tcp_receive+0x364>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f090:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f09c:	4a98      	ldr	r2, [pc, #608]	@ (800f300 <tcp_receive+0x5d0>)
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7ff fdca 	bl	800ec38 <tcp_free_acked_segments>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0b2:	4a94      	ldr	r2, [pc, #592]	@ (800f304 <tcp_receive+0x5d4>)
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7ff fdbf 	bl	800ec38 <tcp_free_acked_segments>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d104      	bne.n	800f0d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0ce:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f0d0:	e002      	b.n	800f0d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d103      	bne.n	800f0ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f0f4:	4b84      	ldr	r3, [pc, #528]	@ (800f308 <tcp_receive+0x5d8>)
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	8b5b      	ldrh	r3, [r3, #26]
 800f106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d035      	beq.n	800f17a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f112:	2b00      	cmp	r3, #0
 800f114:	d118      	bne.n	800f148 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00c      	beq.n	800f138 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fb f925 	bl	800a37a <lwip_htonl>
 800f130:	4603      	mov	r3, r0
 800f132:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f134:	2b00      	cmp	r3, #0
 800f136:	dc20      	bgt.n	800f17a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	8b5b      	ldrh	r3, [r3, #26]
 800f13c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f140:	b29a      	uxth	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f146:	e018      	b.n	800f17a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	4618      	mov	r0, r3
 800f156:	f7fb f910 	bl	800a37a <lwip_htonl>
 800f15a:	4603      	mov	r3, r0
 800f15c:	1ae3      	subs	r3, r4, r3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	dc0b      	bgt.n	800f17a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	8b5b      	ldrh	r3, [r3, #26]
 800f166:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f170:	e003      	b.n	800f17a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f001 ff70 	bl	8011058 <tcp_send_empty_ack>
 800f178:	e000      	b.n	800f17c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f17a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f180:	2b00      	cmp	r3, #0
 800f182:	d05b      	beq.n	800f23c <tcp_receive+0x50c>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f188:	4b60      	ldr	r3, [pc, #384]	@ (800f30c <tcp_receive+0x5dc>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	da54      	bge.n	800f23c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f192:	4b5f      	ldr	r3, [pc, #380]	@ (800f310 <tcp_receive+0x5e0>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	b29a      	uxth	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f1a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f1b0:	10db      	asrs	r3, r3, #3
 800f1b2:	b21b      	sxth	r3, r3
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f1ca:	4413      	add	r3, r2
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	b21a      	sxth	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f1d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	da05      	bge.n	800f1e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f1dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f1e0:	425b      	negs	r3, r3
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f1e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f1f2:	109b      	asrs	r3, r3, #2
 800f1f4:	b21b      	sxth	r3, r3
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f206:	b29a      	uxth	r2, r3
 800f208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f20c:	4413      	add	r3, r2
 800f20e:	b29b      	uxth	r3, r3
 800f210:	b21a      	sxth	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f21c:	10db      	asrs	r3, r3, #3
 800f21e:	b21b      	sxth	r3, r3
 800f220:	b29a      	uxth	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f228:	b29b      	uxth	r3, r3
 800f22a:	4413      	add	r3, r2
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	b21a      	sxth	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2200      	movs	r2, #0
 800f23a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f23c:	4b35      	ldr	r3, [pc, #212]	@ (800f314 <tcp_receive+0x5e4>)
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	f000 84df 	beq.w	800fc04 <tcp_receive+0xed4>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	7d1b      	ldrb	r3, [r3, #20]
 800f24a:	2b06      	cmp	r3, #6
 800f24c:	f200 84da 	bhi.w	800fc04 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f254:	4b30      	ldr	r3, [pc, #192]	@ (800f318 <tcp_receive+0x5e8>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	3b01      	subs	r3, #1
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f2c0 808f 	blt.w	800f380 <tcp_receive+0x650>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f266:	4b2b      	ldr	r3, [pc, #172]	@ (800f314 <tcp_receive+0x5e4>)
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	4619      	mov	r1, r3
 800f26c:	4b2a      	ldr	r3, [pc, #168]	@ (800f318 <tcp_receive+0x5e8>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	440b      	add	r3, r1
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	3301      	adds	r3, #1
 800f276:	2b00      	cmp	r3, #0
 800f278:	f300 8082 	bgt.w	800f380 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f27c:	4b27      	ldr	r3, [pc, #156]	@ (800f31c <tcp_receive+0x5ec>)
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f286:	4b24      	ldr	r3, [pc, #144]	@ (800f318 <tcp_receive+0x5e8>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f28e:	4b23      	ldr	r3, [pc, #140]	@ (800f31c <tcp_receive+0x5ec>)
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <tcp_receive+0x574>
 800f296:	4b22      	ldr	r3, [pc, #136]	@ (800f320 <tcp_receive+0x5f0>)
 800f298:	f240 5294 	movw	r2, #1428	@ 0x594
 800f29c:	4921      	ldr	r1, [pc, #132]	@ (800f324 <tcp_receive+0x5f4>)
 800f29e:	4822      	ldr	r0, [pc, #136]	@ (800f328 <tcp_receive+0x5f8>)
 800f2a0:	f005 fb98 	bl	80149d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d906      	bls.n	800f2bc <tcp_receive+0x58c>
 800f2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800f320 <tcp_receive+0x5f0>)
 800f2b0:	f240 5295 	movw	r2, #1429	@ 0x595
 800f2b4:	491d      	ldr	r1, [pc, #116]	@ (800f32c <tcp_receive+0x5fc>)
 800f2b6:	481c      	ldr	r0, [pc, #112]	@ (800f328 <tcp_receive+0x5f8>)
 800f2b8:	f005 fb8c 	bl	80149d4 <iprintf>
      off = (u16_t)off32;
 800f2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f2c2:	4b16      	ldr	r3, [pc, #88]	@ (800f31c <tcp_receive+0x5ec>)
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	891b      	ldrh	r3, [r3, #8]
 800f2c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d906      	bls.n	800f2de <tcp_receive+0x5ae>
 800f2d0:	4b13      	ldr	r3, [pc, #76]	@ (800f320 <tcp_receive+0x5f0>)
 800f2d2:	f240 5297 	movw	r2, #1431	@ 0x597
 800f2d6:	4916      	ldr	r1, [pc, #88]	@ (800f330 <tcp_receive+0x600>)
 800f2d8:	4813      	ldr	r0, [pc, #76]	@ (800f328 <tcp_receive+0x5f8>)
 800f2da:	f005 fb7b 	bl	80149d4 <iprintf>
      inseg.len -= off;
 800f2de:	4b0f      	ldr	r3, [pc, #60]	@ (800f31c <tcp_receive+0x5ec>)
 800f2e0:	891a      	ldrh	r2, [r3, #8]
 800f2e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	4b0c      	ldr	r3, [pc, #48]	@ (800f31c <tcp_receive+0x5ec>)
 800f2ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f2ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f31c <tcp_receive+0x5ec>)
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	891a      	ldrh	r2, [r3, #8]
 800f2f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f2f8:	1ad3      	subs	r3, r2, r3
 800f2fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f2fc:	e02a      	b.n	800f354 <tcp_receive+0x624>
 800f2fe:	bf00      	nop
 800f300:	08016fa0 	.word	0x08016fa0
 800f304:	08016fa8 	.word	0x08016fa8
 800f308:	2000d824 	.word	0x2000d824
 800f30c:	2000d820 	.word	0x2000d820
 800f310:	2000d7e4 	.word	0x2000d7e4
 800f314:	2000d826 	.word	0x2000d826
 800f318:	2000d81c 	.word	0x2000d81c
 800f31c:	2000d7fc 	.word	0x2000d7fc
 800f320:	08016c38 	.word	0x08016c38
 800f324:	08016fb0 	.word	0x08016fb0
 800f328:	08016c84 	.word	0x08016c84
 800f32c:	08016fc0 	.word	0x08016fc0
 800f330:	08016fd0 	.word	0x08016fd0
        off -= p->len;
 800f334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f336:	895b      	ldrh	r3, [r3, #10]
 800f338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f344:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f346:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f34a:	2200      	movs	r2, #0
 800f34c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f34e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f356:	895b      	ldrh	r3, [r3, #10]
 800f358:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d8e9      	bhi.n	800f334 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f364:	4619      	mov	r1, r3
 800f366:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f368:	f7fc fb5e 	bl	800ba28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f370:	4a90      	ldr	r2, [pc, #576]	@ (800f5b4 <tcp_receive+0x884>)
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	4b90      	ldr	r3, [pc, #576]	@ (800f5b8 <tcp_receive+0x888>)
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	4a8e      	ldr	r2, [pc, #568]	@ (800f5b4 <tcp_receive+0x884>)
 800f37a:	6812      	ldr	r2, [r2, #0]
 800f37c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f37e:	e00d      	b.n	800f39c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f380:	4b8c      	ldr	r3, [pc, #560]	@ (800f5b4 <tcp_receive+0x884>)
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	da06      	bge.n	800f39c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	8b5b      	ldrh	r3, [r3, #26]
 800f392:	f043 0302 	orr.w	r3, r3, #2
 800f396:	b29a      	uxth	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f39c:	4b85      	ldr	r3, [pc, #532]	@ (800f5b4 <tcp_receive+0x884>)
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f2c0 8427 	blt.w	800fbfa <tcp_receive+0xeca>
 800f3ac:	4b81      	ldr	r3, [pc, #516]	@ (800f5b4 <tcp_receive+0x884>)
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b4:	6879      	ldr	r1, [r7, #4]
 800f3b6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f3b8:	440b      	add	r3, r1
 800f3ba:	1ad3      	subs	r3, r2, r3
 800f3bc:	3301      	adds	r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f300 841b 	bgt.w	800fbfa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3c8:	4b7a      	ldr	r3, [pc, #488]	@ (800f5b4 <tcp_receive+0x884>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	f040 8298 	bne.w	800f902 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f3d2:	4b79      	ldr	r3, [pc, #484]	@ (800f5b8 <tcp_receive+0x888>)
 800f3d4:	891c      	ldrh	r4, [r3, #8]
 800f3d6:	4b78      	ldr	r3, [pc, #480]	@ (800f5b8 <tcp_receive+0x888>)
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	899b      	ldrh	r3, [r3, #12]
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fa ffb6 	bl	800a350 <lwip_htons>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	f003 0303 	and.w	r3, r3, #3
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d001      	beq.n	800f3f4 <tcp_receive+0x6c4>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e000      	b.n	800f3f6 <tcp_receive+0x6c6>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	4423      	add	r3, r4
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	4b70      	ldr	r3, [pc, #448]	@ (800f5bc <tcp_receive+0x88c>)
 800f3fc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f402:	4b6e      	ldr	r3, [pc, #440]	@ (800f5bc <tcp_receive+0x88c>)
 800f404:	881b      	ldrh	r3, [r3, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	d274      	bcs.n	800f4f4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f40a:	4b6b      	ldr	r3, [pc, #428]	@ (800f5b8 <tcp_receive+0x888>)
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	899b      	ldrh	r3, [r3, #12]
 800f410:	b29b      	uxth	r3, r3
 800f412:	4618      	mov	r0, r3
 800f414:	f7fa ff9c 	bl	800a350 <lwip_htons>
 800f418:	4603      	mov	r3, r0
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	f003 0301 	and.w	r3, r3, #1
 800f420:	2b00      	cmp	r3, #0
 800f422:	d01e      	beq.n	800f462 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f424:	4b64      	ldr	r3, [pc, #400]	@ (800f5b8 <tcp_receive+0x888>)
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	899b      	ldrh	r3, [r3, #12]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	b21b      	sxth	r3, r3
 800f42e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f432:	b21c      	sxth	r4, r3
 800f434:	4b60      	ldr	r3, [pc, #384]	@ (800f5b8 <tcp_receive+0x888>)
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	899b      	ldrh	r3, [r3, #12]
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fa ff87 	bl	800a350 <lwip_htons>
 800f442:	4603      	mov	r3, r0
 800f444:	b2db      	uxtb	r3, r3
 800f446:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fa ff7f 	bl	800a350 <lwip_htons>
 800f452:	4603      	mov	r3, r0
 800f454:	b21b      	sxth	r3, r3
 800f456:	4323      	orrs	r3, r4
 800f458:	b21a      	sxth	r2, r3
 800f45a:	4b57      	ldr	r3, [pc, #348]	@ (800f5b8 <tcp_receive+0x888>)
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	b292      	uxth	r2, r2
 800f460:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f466:	4b54      	ldr	r3, [pc, #336]	@ (800f5b8 <tcp_receive+0x888>)
 800f468:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f46a:	4b53      	ldr	r3, [pc, #332]	@ (800f5b8 <tcp_receive+0x888>)
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	899b      	ldrh	r3, [r3, #12]
 800f470:	b29b      	uxth	r3, r3
 800f472:	4618      	mov	r0, r3
 800f474:	f7fa ff6c 	bl	800a350 <lwip_htons>
 800f478:	4603      	mov	r3, r0
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	f003 0302 	and.w	r3, r3, #2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d005      	beq.n	800f490 <tcp_receive+0x760>
            inseg.len -= 1;
 800f484:	4b4c      	ldr	r3, [pc, #304]	@ (800f5b8 <tcp_receive+0x888>)
 800f486:	891b      	ldrh	r3, [r3, #8]
 800f488:	3b01      	subs	r3, #1
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	4b4a      	ldr	r3, [pc, #296]	@ (800f5b8 <tcp_receive+0x888>)
 800f48e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f490:	4b49      	ldr	r3, [pc, #292]	@ (800f5b8 <tcp_receive+0x888>)
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	4a48      	ldr	r2, [pc, #288]	@ (800f5b8 <tcp_receive+0x888>)
 800f496:	8912      	ldrh	r2, [r2, #8]
 800f498:	4611      	mov	r1, r2
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fc f9c4 	bl	800b828 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f4a0:	4b45      	ldr	r3, [pc, #276]	@ (800f5b8 <tcp_receive+0x888>)
 800f4a2:	891c      	ldrh	r4, [r3, #8]
 800f4a4:	4b44      	ldr	r3, [pc, #272]	@ (800f5b8 <tcp_receive+0x888>)
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	899b      	ldrh	r3, [r3, #12]
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fa ff4f 	bl	800a350 <lwip_htons>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	f003 0303 	and.w	r3, r3, #3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <tcp_receive+0x792>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e000      	b.n	800f4c4 <tcp_receive+0x794>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	4423      	add	r3, r4
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	4b3c      	ldr	r3, [pc, #240]	@ (800f5bc <tcp_receive+0x88c>)
 800f4ca:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4cc:	4b3b      	ldr	r3, [pc, #236]	@ (800f5bc <tcp_receive+0x88c>)
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4b38      	ldr	r3, [pc, #224]	@ (800f5b4 <tcp_receive+0x884>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	441a      	add	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4dc:	6879      	ldr	r1, [r7, #4]
 800f4de:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f4e0:	440b      	add	r3, r1
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d006      	beq.n	800f4f4 <tcp_receive+0x7c4>
 800f4e6:	4b36      	ldr	r3, [pc, #216]	@ (800f5c0 <tcp_receive+0x890>)
 800f4e8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f4ec:	4935      	ldr	r1, [pc, #212]	@ (800f5c4 <tcp_receive+0x894>)
 800f4ee:	4836      	ldr	r0, [pc, #216]	@ (800f5c8 <tcp_receive+0x898>)
 800f4f0:	f005 fa70 	bl	80149d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 80e6 	beq.w	800f6ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f4fe:	4b2e      	ldr	r3, [pc, #184]	@ (800f5b8 <tcp_receive+0x888>)
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	899b      	ldrh	r3, [r3, #12]
 800f504:	b29b      	uxth	r3, r3
 800f506:	4618      	mov	r0, r3
 800f508:	f7fa ff22 	bl	800a350 <lwip_htons>
 800f50c:	4603      	mov	r3, r0
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	f003 0301 	and.w	r3, r3, #1
 800f514:	2b00      	cmp	r3, #0
 800f516:	d010      	beq.n	800f53a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f518:	e00a      	b.n	800f530 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f51e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	f7fd fd93 	bl	800d056 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f534:	2b00      	cmp	r3, #0
 800f536:	d1f0      	bne.n	800f51a <tcp_receive+0x7ea>
 800f538:	e0c7      	b.n	800f6ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f540:	e051      	b.n	800f5e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	899b      	ldrh	r3, [r3, #12]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fa ff00 	bl	800a350 <lwip_htons>
 800f550:	4603      	mov	r3, r0
 800f552:	b2db      	uxtb	r3, r3
 800f554:	f003 0301 	and.w	r3, r3, #1
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d03c      	beq.n	800f5d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f55c:	4b16      	ldr	r3, [pc, #88]	@ (800f5b8 <tcp_receive+0x888>)
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	899b      	ldrh	r3, [r3, #12]
 800f562:	b29b      	uxth	r3, r3
 800f564:	4618      	mov	r0, r3
 800f566:	f7fa fef3 	bl	800a350 <lwip_htons>
 800f56a:	4603      	mov	r3, r0
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f572:	2b00      	cmp	r3, #0
 800f574:	d12f      	bne.n	800f5d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f576:	4b10      	ldr	r3, [pc, #64]	@ (800f5b8 <tcp_receive+0x888>)
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	899b      	ldrh	r3, [r3, #12]
 800f57c:	b29c      	uxth	r4, r3
 800f57e:	2001      	movs	r0, #1
 800f580:	f7fa fee6 	bl	800a350 <lwip_htons>
 800f584:	4603      	mov	r3, r0
 800f586:	461a      	mov	r2, r3
 800f588:	4b0b      	ldr	r3, [pc, #44]	@ (800f5b8 <tcp_receive+0x888>)
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	4322      	orrs	r2, r4
 800f58e:	b292      	uxth	r2, r2
 800f590:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f592:	4b09      	ldr	r3, [pc, #36]	@ (800f5b8 <tcp_receive+0x888>)
 800f594:	891c      	ldrh	r4, [r3, #8]
 800f596:	4b08      	ldr	r3, [pc, #32]	@ (800f5b8 <tcp_receive+0x888>)
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	899b      	ldrh	r3, [r3, #12]
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fa fed6 	bl	800a350 <lwip_htons>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	f003 0303 	and.w	r3, r3, #3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00d      	beq.n	800f5cc <tcp_receive+0x89c>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e00c      	b.n	800f5ce <tcp_receive+0x89e>
 800f5b4:	2000d81c 	.word	0x2000d81c
 800f5b8:	2000d7fc 	.word	0x2000d7fc
 800f5bc:	2000d826 	.word	0x2000d826
 800f5c0:	08016c38 	.word	0x08016c38
 800f5c4:	08016fe0 	.word	0x08016fe0
 800f5c8:	08016c84 	.word	0x08016c84
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4423      	add	r3, r4
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	4b98      	ldr	r3, [pc, #608]	@ (800f834 <tcp_receive+0xb04>)
 800f5d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f5e0:	6938      	ldr	r0, [r7, #16]
 800f5e2:	f7fd fd38 	bl	800d056 <tcp_seg_free>
            while (next &&
 800f5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d00e      	beq.n	800f60a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f5ec:	4b91      	ldr	r3, [pc, #580]	@ (800f834 <tcp_receive+0xb04>)
 800f5ee:	881b      	ldrh	r3, [r3, #0]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	4b91      	ldr	r3, [pc, #580]	@ (800f838 <tcp_receive+0xb08>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	441a      	add	r2, r3
 800f5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f600:	8909      	ldrh	r1, [r1, #8]
 800f602:	440b      	add	r3, r1
 800f604:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f606:	2b00      	cmp	r3, #0
 800f608:	da9b      	bge.n	800f542 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d059      	beq.n	800f6c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f610:	4b88      	ldr	r3, [pc, #544]	@ (800f834 <tcp_receive+0xb04>)
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	461a      	mov	r2, r3
 800f616:	4b88      	ldr	r3, [pc, #544]	@ (800f838 <tcp_receive+0xb08>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	441a      	add	r2, r3
 800f61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f624:	2b00      	cmp	r3, #0
 800f626:	dd4d      	ble.n	800f6c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	b29a      	uxth	r2, r3
 800f630:	4b81      	ldr	r3, [pc, #516]	@ (800f838 <tcp_receive+0xb08>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	b29b      	uxth	r3, r3
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	b29a      	uxth	r2, r3
 800f63a:	4b80      	ldr	r3, [pc, #512]	@ (800f83c <tcp_receive+0xb0c>)
 800f63c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f63e:	4b7f      	ldr	r3, [pc, #508]	@ (800f83c <tcp_receive+0xb0c>)
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	899b      	ldrh	r3, [r3, #12]
 800f644:	b29b      	uxth	r3, r3
 800f646:	4618      	mov	r0, r3
 800f648:	f7fa fe82 	bl	800a350 <lwip_htons>
 800f64c:	4603      	mov	r3, r0
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	f003 0302 	and.w	r3, r3, #2
 800f654:	2b00      	cmp	r3, #0
 800f656:	d005      	beq.n	800f664 <tcp_receive+0x934>
                inseg.len -= 1;
 800f658:	4b78      	ldr	r3, [pc, #480]	@ (800f83c <tcp_receive+0xb0c>)
 800f65a:	891b      	ldrh	r3, [r3, #8]
 800f65c:	3b01      	subs	r3, #1
 800f65e:	b29a      	uxth	r2, r3
 800f660:	4b76      	ldr	r3, [pc, #472]	@ (800f83c <tcp_receive+0xb0c>)
 800f662:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f664:	4b75      	ldr	r3, [pc, #468]	@ (800f83c <tcp_receive+0xb0c>)
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	4a74      	ldr	r2, [pc, #464]	@ (800f83c <tcp_receive+0xb0c>)
 800f66a:	8912      	ldrh	r2, [r2, #8]
 800f66c:	4611      	mov	r1, r2
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fc f8da 	bl	800b828 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f674:	4b71      	ldr	r3, [pc, #452]	@ (800f83c <tcp_receive+0xb0c>)
 800f676:	891c      	ldrh	r4, [r3, #8]
 800f678:	4b70      	ldr	r3, [pc, #448]	@ (800f83c <tcp_receive+0xb0c>)
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	899b      	ldrh	r3, [r3, #12]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4618      	mov	r0, r3
 800f682:	f7fa fe65 	bl	800a350 <lwip_htons>
 800f686:	4603      	mov	r3, r0
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	f003 0303 	and.w	r3, r3, #3
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <tcp_receive+0x966>
 800f692:	2301      	movs	r3, #1
 800f694:	e000      	b.n	800f698 <tcp_receive+0x968>
 800f696:	2300      	movs	r3, #0
 800f698:	4423      	add	r3, r4
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	4b65      	ldr	r3, [pc, #404]	@ (800f834 <tcp_receive+0xb04>)
 800f69e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f6a0:	4b64      	ldr	r3, [pc, #400]	@ (800f834 <tcp_receive+0xb04>)
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	4b64      	ldr	r3, [pc, #400]	@ (800f838 <tcp_receive+0xb08>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	441a      	add	r2, r3
 800f6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d006      	beq.n	800f6c4 <tcp_receive+0x994>
 800f6b6:	4b62      	ldr	r3, [pc, #392]	@ (800f840 <tcp_receive+0xb10>)
 800f6b8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f6bc:	4961      	ldr	r1, [pc, #388]	@ (800f844 <tcp_receive+0xb14>)
 800f6be:	4862      	ldr	r0, [pc, #392]	@ (800f848 <tcp_receive+0xb18>)
 800f6c0:	f005 f988 	bl	80149d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f6c8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f6ca:	4b5a      	ldr	r3, [pc, #360]	@ (800f834 <tcp_receive+0xb04>)
 800f6cc:	881b      	ldrh	r3, [r3, #0]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	4b59      	ldr	r3, [pc, #356]	@ (800f838 <tcp_receive+0xb08>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	441a      	add	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f6de:	4b55      	ldr	r3, [pc, #340]	@ (800f834 <tcp_receive+0xb04>)
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d206      	bcs.n	800f6f4 <tcp_receive+0x9c4>
 800f6e6:	4b56      	ldr	r3, [pc, #344]	@ (800f840 <tcp_receive+0xb10>)
 800f6e8:	f240 6207 	movw	r2, #1543	@ 0x607
 800f6ec:	4957      	ldr	r1, [pc, #348]	@ (800f84c <tcp_receive+0xb1c>)
 800f6ee:	4856      	ldr	r0, [pc, #344]	@ (800f848 <tcp_receive+0xb18>)
 800f6f0:	f005 f970 	bl	80149d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f6f8:	4b4e      	ldr	r3, [pc, #312]	@ (800f834 <tcp_receive+0xb04>)
 800f6fa:	881b      	ldrh	r3, [r3, #0]
 800f6fc:	1ad3      	subs	r3, r2, r3
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7fc ffc5 	bl	800c694 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f70a:	4b4c      	ldr	r3, [pc, #304]	@ (800f83c <tcp_receive+0xb0c>)
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	891b      	ldrh	r3, [r3, #8]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d006      	beq.n	800f722 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f714:	4b49      	ldr	r3, [pc, #292]	@ (800f83c <tcp_receive+0xb0c>)
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	4a4d      	ldr	r2, [pc, #308]	@ (800f850 <tcp_receive+0xb20>)
 800f71a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f71c:	4b47      	ldr	r3, [pc, #284]	@ (800f83c <tcp_receive+0xb0c>)
 800f71e:	2200      	movs	r2, #0
 800f720:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f722:	4b46      	ldr	r3, [pc, #280]	@ (800f83c <tcp_receive+0xb0c>)
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	899b      	ldrh	r3, [r3, #12]
 800f728:	b29b      	uxth	r3, r3
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fa fe10 	bl	800a350 <lwip_htons>
 800f730:	4603      	mov	r3, r0
 800f732:	b2db      	uxtb	r3, r3
 800f734:	f003 0301 	and.w	r3, r3, #1
 800f738:	2b00      	cmp	r3, #0
 800f73a:	f000 80b8 	beq.w	800f8ae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f73e:	4b45      	ldr	r3, [pc, #276]	@ (800f854 <tcp_receive+0xb24>)
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	f043 0320 	orr.w	r3, r3, #32
 800f746:	b2da      	uxtb	r2, r3
 800f748:	4b42      	ldr	r3, [pc, #264]	@ (800f854 <tcp_receive+0xb24>)
 800f74a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f74c:	e0af      	b.n	800f8ae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f752:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	4a36      	ldr	r2, [pc, #216]	@ (800f838 <tcp_receive+0xb08>)
 800f75e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	891b      	ldrh	r3, [r3, #8]
 800f764:	461c      	mov	r4, r3
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	899b      	ldrh	r3, [r3, #12]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fa fdee 	bl	800a350 <lwip_htons>
 800f774:	4603      	mov	r3, r0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	f003 0303 	and.w	r3, r3, #3
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <tcp_receive+0xa54>
 800f780:	2301      	movs	r3, #1
 800f782:	e000      	b.n	800f786 <tcp_receive+0xa56>
 800f784:	2300      	movs	r3, #0
 800f786:	191a      	adds	r2, r3, r4
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78c:	441a      	add	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f796:	461c      	mov	r4, r3
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	891b      	ldrh	r3, [r3, #8]
 800f79c:	461d      	mov	r5, r3
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	899b      	ldrh	r3, [r3, #12]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fa fdd2 	bl	800a350 <lwip_htons>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	f003 0303 	and.w	r3, r3, #3
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d001      	beq.n	800f7bc <tcp_receive+0xa8c>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	e000      	b.n	800f7be <tcp_receive+0xa8e>
 800f7bc:	2300      	movs	r3, #0
 800f7be:	442b      	add	r3, r5
 800f7c0:	429c      	cmp	r4, r3
 800f7c2:	d206      	bcs.n	800f7d2 <tcp_receive+0xaa2>
 800f7c4:	4b1e      	ldr	r3, [pc, #120]	@ (800f840 <tcp_receive+0xb10>)
 800f7c6:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f7ca:	4923      	ldr	r1, [pc, #140]	@ (800f858 <tcp_receive+0xb28>)
 800f7cc:	481e      	ldr	r0, [pc, #120]	@ (800f848 <tcp_receive+0xb18>)
 800f7ce:	f005 f901 	bl	80149d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	891b      	ldrh	r3, [r3, #8]
 800f7d6:	461c      	mov	r4, r3
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	899b      	ldrh	r3, [r3, #12]
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7fa fdb5 	bl	800a350 <lwip_htons>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	f003 0303 	and.w	r3, r3, #3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d001      	beq.n	800f7f6 <tcp_receive+0xac6>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e000      	b.n	800f7f8 <tcp_receive+0xac8>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	1919      	adds	r1, r3, r4
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f7fe:	b28b      	uxth	r3, r1
 800f800:	1ad3      	subs	r3, r2, r3
 800f802:	b29a      	uxth	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7fc ff43 	bl	800c694 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	891b      	ldrh	r3, [r3, #8]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d028      	beq.n	800f86a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f818:	4b0d      	ldr	r3, [pc, #52]	@ (800f850 <tcp_receive+0xb20>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d01d      	beq.n	800f85c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f820:	4b0b      	ldr	r3, [pc, #44]	@ (800f850 <tcp_receive+0xb20>)
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	4619      	mov	r1, r3
 800f82a:	4610      	mov	r0, r2
 800f82c:	f7fc fa50 	bl	800bcd0 <pbuf_cat>
 800f830:	e018      	b.n	800f864 <tcp_receive+0xb34>
 800f832:	bf00      	nop
 800f834:	2000d826 	.word	0x2000d826
 800f838:	2000d81c 	.word	0x2000d81c
 800f83c:	2000d7fc 	.word	0x2000d7fc
 800f840:	08016c38 	.word	0x08016c38
 800f844:	08017018 	.word	0x08017018
 800f848:	08016c84 	.word	0x08016c84
 800f84c:	08017054 	.word	0x08017054
 800f850:	2000d82c 	.word	0x2000d82c
 800f854:	2000d829 	.word	0x2000d829
 800f858:	08017074 	.word	0x08017074
            } else {
              recv_data = cseg->p;
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	4a70      	ldr	r2, [pc, #448]	@ (800fa24 <tcp_receive+0xcf4>)
 800f862:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	2200      	movs	r2, #0
 800f868:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	899b      	ldrh	r3, [r3, #12]
 800f870:	b29b      	uxth	r3, r3
 800f872:	4618      	mov	r0, r3
 800f874:	f7fa fd6c 	bl	800a350 <lwip_htons>
 800f878:	4603      	mov	r3, r0
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00d      	beq.n	800f8a0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f884:	4b68      	ldr	r3, [pc, #416]	@ (800fa28 <tcp_receive+0xcf8>)
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f043 0320 	orr.w	r3, r3, #32
 800f88c:	b2da      	uxtb	r2, r3
 800f88e:	4b66      	ldr	r3, [pc, #408]	@ (800fa28 <tcp_receive+0xcf8>)
 800f890:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7d1b      	ldrb	r3, [r3, #20]
 800f896:	2b04      	cmp	r3, #4
 800f898:	d102      	bne.n	800f8a0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2207      	movs	r2, #7
 800f89e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f8a8:	68b8      	ldr	r0, [r7, #8]
 800f8aa:	f7fd fbd4 	bl	800d056 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d008      	beq.n	800f8c8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	f43f af43 	beq.w	800f74e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	8b5b      	ldrh	r3, [r3, #26]
 800f8cc:	f003 0301 	and.w	r3, r3, #1
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00e      	beq.n	800f8f2 <tcp_receive+0xbc2>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	8b5b      	ldrh	r3, [r3, #26]
 800f8d8:	f023 0301 	bic.w	r3, r3, #1
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	835a      	strh	r2, [r3, #26]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	8b5b      	ldrh	r3, [r3, #26]
 800f8e6:	f043 0302 	orr.w	r3, r3, #2
 800f8ea:	b29a      	uxth	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8f0:	e187      	b.n	800fc02 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	8b5b      	ldrh	r3, [r3, #26]
 800f8f6:	f043 0301 	orr.w	r3, r3, #1
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f900:	e17f      	b.n	800fc02 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f906:	2b00      	cmp	r3, #0
 800f908:	d106      	bne.n	800f918 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f90a:	4848      	ldr	r0, [pc, #288]	@ (800fa2c <tcp_receive+0xcfc>)
 800f90c:	f7fd fbbc 	bl	800d088 <tcp_seg_copy>
 800f910:	4602      	mov	r2, r0
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	675a      	str	r2, [r3, #116]	@ 0x74
 800f916:	e16c      	b.n	800fbf2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f920:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f922:	e156      	b.n	800fbd2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	685a      	ldr	r2, [r3, #4]
 800f92a:	4b41      	ldr	r3, [pc, #260]	@ (800fa30 <tcp_receive+0xd00>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d11d      	bne.n	800f96e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f932:	4b3e      	ldr	r3, [pc, #248]	@ (800fa2c <tcp_receive+0xcfc>)
 800f934:	891a      	ldrh	r2, [r3, #8]
 800f936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f938:	891b      	ldrh	r3, [r3, #8]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	f240 814e 	bls.w	800fbdc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f940:	483a      	ldr	r0, [pc, #232]	@ (800fa2c <tcp_receive+0xcfc>)
 800f942:	f7fd fba1 	bl	800d088 <tcp_seg_copy>
 800f946:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f000 8148 	beq.w	800fbe0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f952:	2b00      	cmp	r3, #0
 800f954:	d003      	beq.n	800f95e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	601a      	str	r2, [r3, #0]
 800f95c:	e002      	b.n	800f964 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f964:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f966:	6978      	ldr	r0, [r7, #20]
 800f968:	f7ff f8de 	bl	800eb28 <tcp_oos_insert_segment>
                }
                break;
 800f96c:	e138      	b.n	800fbe0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f970:	2b00      	cmp	r3, #0
 800f972:	d117      	bne.n	800f9a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f974:	4b2e      	ldr	r3, [pc, #184]	@ (800fa30 <tcp_receive+0xd00>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	da57      	bge.n	800fa34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f984:	4829      	ldr	r0, [pc, #164]	@ (800fa2c <tcp_receive+0xcfc>)
 800f986:	f7fd fb7f 	bl	800d088 <tcp_seg_copy>
 800f98a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 8128 	beq.w	800fbe4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	69ba      	ldr	r2, [r7, #24]
 800f998:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f99a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f99c:	69b8      	ldr	r0, [r7, #24]
 800f99e:	f7ff f8c3 	bl	800eb28 <tcp_oos_insert_segment>
                  }
                  break;
 800f9a2:	e11f      	b.n	800fbe4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f9a4:	4b22      	ldr	r3, [pc, #136]	@ (800fa30 <tcp_receive+0xd00>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	db3e      	blt.n	800fa34 <tcp_receive+0xd04>
 800f9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800fa30 <tcp_receive+0xd00>)
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	dc35      	bgt.n	800fa34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f9c8:	4818      	ldr	r0, [pc, #96]	@ (800fa2c <tcp_receive+0xcfc>)
 800f9ca:	f7fd fb5d 	bl	800d088 <tcp_seg_copy>
 800f9ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f000 8108 	beq.w	800fbe8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9e0:	8912      	ldrh	r2, [r2, #8]
 800f9e2:	441a      	add	r2, r3
 800f9e4:	4b12      	ldr	r3, [pc, #72]	@ (800fa30 <tcp_receive+0xd00>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	dd12      	ble.n	800fa14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f9ee:	4b10      	ldr	r3, [pc, #64]	@ (800fa30 <tcp_receive+0xd00>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	1ad3      	subs	r3, r2, r3
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fa04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa06:	685a      	ldr	r2, [r3, #4]
 800fa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa0a:	891b      	ldrh	r3, [r3, #8]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	4610      	mov	r0, r2
 800fa10:	f7fb ff0a 	bl	800b828 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fa14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa16:	69fa      	ldr	r2, [r7, #28]
 800fa18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fa1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa1c:	69f8      	ldr	r0, [r7, #28]
 800fa1e:	f7ff f883 	bl	800eb28 <tcp_oos_insert_segment>
                  }
                  break;
 800fa22:	e0e1      	b.n	800fbe8 <tcp_receive+0xeb8>
 800fa24:	2000d82c 	.word	0x2000d82c
 800fa28:	2000d829 	.word	0x2000d829
 800fa2c:	2000d7fc 	.word	0x2000d7fc
 800fa30:	2000d81c 	.word	0x2000d81c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa36:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f040 80c5 	bne.w	800fbcc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fa42:	4b7f      	ldr	r3, [pc, #508]	@ (800fc40 <tcp_receive+0xf10>)
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f340 80bc 	ble.w	800fbcc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fa54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	899b      	ldrh	r3, [r3, #12]
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fa fc77 	bl	800a350 <lwip_htons>
 800fa62:	4603      	mov	r3, r0
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	f003 0301 	and.w	r3, r3, #1
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f040 80be 	bne.w	800fbec <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fa70:	4874      	ldr	r0, [pc, #464]	@ (800fc44 <tcp_receive+0xf14>)
 800fa72:	f7fd fb09 	bl	800d088 <tcp_seg_copy>
 800fa76:	4602      	mov	r2, r0
 800fa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 80b5 	beq.w	800fbf0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa8e:	8912      	ldrh	r2, [r2, #8]
 800fa90:	441a      	add	r2, r3
 800fa92:	4b6b      	ldr	r3, [pc, #428]	@ (800fc40 <tcp_receive+0xf10>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	dd12      	ble.n	800fac2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fa9c:	4b68      	ldr	r3, [pc, #416]	@ (800fc40 <tcp_receive+0xf10>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	b29a      	uxth	r2, r3
 800faae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab4:	685a      	ldr	r2, [r3, #4]
 800fab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab8:	891b      	ldrh	r3, [r3, #8]
 800faba:	4619      	mov	r1, r3
 800fabc:	4610      	mov	r0, r2
 800fabe:	f7fb feb3 	bl	800b828 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fac2:	4b61      	ldr	r3, [pc, #388]	@ (800fc48 <tcp_receive+0xf18>)
 800fac4:	881b      	ldrh	r3, [r3, #0]
 800fac6:	461a      	mov	r2, r3
 800fac8:	4b5d      	ldr	r3, [pc, #372]	@ (800fc40 <tcp_receive+0xf10>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	441a      	add	r2, r3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad2:	6879      	ldr	r1, [r7, #4]
 800fad4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fad6:	440b      	add	r3, r1
 800fad8:	1ad3      	subs	r3, r2, r3
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f340 8088 	ble.w	800fbf0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	68db      	ldr	r3, [r3, #12]
 800fae6:	899b      	ldrh	r3, [r3, #12]
 800fae8:	b29b      	uxth	r3, r3
 800faea:	4618      	mov	r0, r3
 800faec:	f7fa fc30 	bl	800a350 <lwip_htons>
 800faf0:	4603      	mov	r3, r0
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	f003 0301 	and.w	r3, r3, #1
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d021      	beq.n	800fb40 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	899b      	ldrh	r3, [r3, #12]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	b21b      	sxth	r3, r3
 800fb08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fb0c:	b21c      	sxth	r4, r3
 800fb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	899b      	ldrh	r3, [r3, #12]
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7fa fc19 	bl	800a350 <lwip_htons>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fa fc11 	bl	800a350 <lwip_htons>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	b21b      	sxth	r3, r3
 800fb32:	4323      	orrs	r3, r4
 800fb34:	b21a      	sxth	r2, r3
 800fb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	b292      	uxth	r2, r2
 800fb3e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb4a:	4413      	add	r3, r2
 800fb4c:	b299      	uxth	r1, r3
 800fb4e:	4b3c      	ldr	r3, [pc, #240]	@ (800fc40 <tcp_receive+0xf10>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	b29a      	uxth	r2, r3
 800fb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	1a8a      	subs	r2, r1, r2
 800fb5a:	b292      	uxth	r2, r2
 800fb5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	891b      	ldrh	r3, [r3, #8]
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	4610      	mov	r0, r2
 800fb6e:	f7fb fe5b 	bl	800b828 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	891c      	ldrh	r4, [r3, #8]
 800fb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	899b      	ldrh	r3, [r3, #12]
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fa fbe4 	bl	800a350 <lwip_htons>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	f003 0303 	and.w	r3, r3, #3
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <tcp_receive+0xe68>
 800fb94:	2301      	movs	r3, #1
 800fb96:	e000      	b.n	800fb9a <tcp_receive+0xe6a>
 800fb98:	2300      	movs	r3, #0
 800fb9a:	4423      	add	r3, r4
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	4b2a      	ldr	r3, [pc, #168]	@ (800fc48 <tcp_receive+0xf18>)
 800fba0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fba2:	4b29      	ldr	r3, [pc, #164]	@ (800fc48 <tcp_receive+0xf18>)
 800fba4:	881b      	ldrh	r3, [r3, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	4b25      	ldr	r3, [pc, #148]	@ (800fc40 <tcp_receive+0xf10>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	441a      	add	r2, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbb2:	6879      	ldr	r1, [r7, #4]
 800fbb4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fbb6:	440b      	add	r3, r1
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d019      	beq.n	800fbf0 <tcp_receive+0xec0>
 800fbbc:	4b23      	ldr	r3, [pc, #140]	@ (800fc4c <tcp_receive+0xf1c>)
 800fbbe:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fbc2:	4923      	ldr	r1, [pc, #140]	@ (800fc50 <tcp_receive+0xf20>)
 800fbc4:	4823      	ldr	r0, [pc, #140]	@ (800fc54 <tcp_receive+0xf24>)
 800fbc6:	f004 ff05 	bl	80149d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fbca:	e011      	b.n	800fbf0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	f47f aea5 	bne.w	800f924 <tcp_receive+0xbf4>
 800fbda:	e00a      	b.n	800fbf2 <tcp_receive+0xec2>
                break;
 800fbdc:	bf00      	nop
 800fbde:	e008      	b.n	800fbf2 <tcp_receive+0xec2>
                break;
 800fbe0:	bf00      	nop
 800fbe2:	e006      	b.n	800fbf2 <tcp_receive+0xec2>
                  break;
 800fbe4:	bf00      	nop
 800fbe6:	e004      	b.n	800fbf2 <tcp_receive+0xec2>
                  break;
 800fbe8:	bf00      	nop
 800fbea:	e002      	b.n	800fbf2 <tcp_receive+0xec2>
                  break;
 800fbec:	bf00      	nop
 800fbee:	e000      	b.n	800fbf2 <tcp_receive+0xec2>
                break;
 800fbf0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f001 fa30 	bl	8011058 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fbf8:	e003      	b.n	800fc02 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f001 fa2c 	bl	8011058 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc00:	e01a      	b.n	800fc38 <tcp_receive+0xf08>
 800fc02:	e019      	b.n	800fc38 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fc04:	4b0e      	ldr	r3, [pc, #56]	@ (800fc40 <tcp_receive+0xf10>)
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc0c:	1ad3      	subs	r3, r2, r3
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	db0a      	blt.n	800fc28 <tcp_receive+0xef8>
 800fc12:	4b0b      	ldr	r3, [pc, #44]	@ (800fc40 <tcp_receive+0xf10>)
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc1a:	6879      	ldr	r1, [r7, #4]
 800fc1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc1e:	440b      	add	r3, r1
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	3301      	adds	r3, #1
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	dd07      	ble.n	800fc38 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	8b5b      	ldrh	r3, [r3, #26]
 800fc2c:	f043 0302 	orr.w	r3, r3, #2
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fc36:	e7ff      	b.n	800fc38 <tcp_receive+0xf08>
 800fc38:	bf00      	nop
 800fc3a:	3750      	adds	r7, #80	@ 0x50
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bdb0      	pop	{r4, r5, r7, pc}
 800fc40:	2000d81c 	.word	0x2000d81c
 800fc44:	2000d7fc 	.word	0x2000d7fc
 800fc48:	2000d826 	.word	0x2000d826
 800fc4c:	08016c38 	.word	0x08016c38
 800fc50:	08016fe0 	.word	0x08016fe0
 800fc54:	08016c84 	.word	0x08016c84

0800fc58 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fc5e:	4b15      	ldr	r3, [pc, #84]	@ (800fcb4 <tcp_get_next_optbyte+0x5c>)
 800fc60:	881b      	ldrh	r3, [r3, #0]
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	b291      	uxth	r1, r2
 800fc66:	4a13      	ldr	r2, [pc, #76]	@ (800fcb4 <tcp_get_next_optbyte+0x5c>)
 800fc68:	8011      	strh	r1, [r2, #0]
 800fc6a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fc6c:	4b12      	ldr	r3, [pc, #72]	@ (800fcb8 <tcp_get_next_optbyte+0x60>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d004      	beq.n	800fc7e <tcp_get_next_optbyte+0x26>
 800fc74:	4b11      	ldr	r3, [pc, #68]	@ (800fcbc <tcp_get_next_optbyte+0x64>)
 800fc76:	881b      	ldrh	r3, [r3, #0]
 800fc78:	88fa      	ldrh	r2, [r7, #6]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d208      	bcs.n	800fc90 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fc7e:	4b10      	ldr	r3, [pc, #64]	@ (800fcc0 <tcp_get_next_optbyte+0x68>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	3314      	adds	r3, #20
 800fc84:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fc86:	88fb      	ldrh	r3, [r7, #6]
 800fc88:	683a      	ldr	r2, [r7, #0]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	e00b      	b.n	800fca8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fc90:	88fb      	ldrh	r3, [r7, #6]
 800fc92:	b2da      	uxtb	r2, r3
 800fc94:	4b09      	ldr	r3, [pc, #36]	@ (800fcbc <tcp_get_next_optbyte+0x64>)
 800fc96:	881b      	ldrh	r3, [r3, #0]
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fc9e:	4b06      	ldr	r3, [pc, #24]	@ (800fcb8 <tcp_get_next_optbyte+0x60>)
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	797b      	ldrb	r3, [r7, #5]
 800fca4:	4413      	add	r3, r2
 800fca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	370c      	adds	r7, #12
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr
 800fcb4:	2000d818 	.word	0x2000d818
 800fcb8:	2000d814 	.word	0x2000d814
 800fcbc:	2000d812 	.word	0x2000d812
 800fcc0:	2000d80c 	.word	0x2000d80c

0800fcc4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d106      	bne.n	800fce0 <tcp_parseopt+0x1c>
 800fcd2:	4b32      	ldr	r3, [pc, #200]	@ (800fd9c <tcp_parseopt+0xd8>)
 800fcd4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fcd8:	4931      	ldr	r1, [pc, #196]	@ (800fda0 <tcp_parseopt+0xdc>)
 800fcda:	4832      	ldr	r0, [pc, #200]	@ (800fda4 <tcp_parseopt+0xe0>)
 800fcdc:	f004 fe7a 	bl	80149d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fce0:	4b31      	ldr	r3, [pc, #196]	@ (800fda8 <tcp_parseopt+0xe4>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d056      	beq.n	800fd96 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fce8:	4b30      	ldr	r3, [pc, #192]	@ (800fdac <tcp_parseopt+0xe8>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	801a      	strh	r2, [r3, #0]
 800fcee:	e046      	b.n	800fd7e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fcf0:	f7ff ffb2 	bl	800fc58 <tcp_get_next_optbyte>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	2b02      	cmp	r3, #2
 800fcfc:	d006      	beq.n	800fd0c <tcp_parseopt+0x48>
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	dc2a      	bgt.n	800fd58 <tcp_parseopt+0x94>
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d042      	beq.n	800fd8c <tcp_parseopt+0xc8>
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d038      	beq.n	800fd7c <tcp_parseopt+0xb8>
 800fd0a:	e025      	b.n	800fd58 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fd0c:	f7ff ffa4 	bl	800fc58 <tcp_get_next_optbyte>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b04      	cmp	r3, #4
 800fd14:	d13c      	bne.n	800fd90 <tcp_parseopt+0xcc>
 800fd16:	4b25      	ldr	r3, [pc, #148]	@ (800fdac <tcp_parseopt+0xe8>)
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	4a22      	ldr	r2, [pc, #136]	@ (800fda8 <tcp_parseopt+0xe4>)
 800fd1e:	8812      	ldrh	r2, [r2, #0]
 800fd20:	4293      	cmp	r3, r2
 800fd22:	da35      	bge.n	800fd90 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fd24:	f7ff ff98 	bl	800fc58 <tcp_get_next_optbyte>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	021b      	lsls	r3, r3, #8
 800fd2c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fd2e:	f7ff ff93 	bl	800fc58 <tcp_get_next_optbyte>
 800fd32:	4603      	mov	r3, r0
 800fd34:	461a      	mov	r2, r3
 800fd36:	89bb      	ldrh	r3, [r7, #12]
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fd3c:	89bb      	ldrh	r3, [r7, #12]
 800fd3e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fd42:	d804      	bhi.n	800fd4e <tcp_parseopt+0x8a>
 800fd44:	89bb      	ldrh	r3, [r7, #12]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d001      	beq.n	800fd4e <tcp_parseopt+0x8a>
 800fd4a:	89ba      	ldrh	r2, [r7, #12]
 800fd4c:	e001      	b.n	800fd52 <tcp_parseopt+0x8e>
 800fd4e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fd56:	e012      	b.n	800fd7e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fd58:	f7ff ff7e 	bl	800fc58 <tcp_get_next_optbyte>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fd60:	7afb      	ldrb	r3, [r7, #11]
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d916      	bls.n	800fd94 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fd66:	7afb      	ldrb	r3, [r7, #11]
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	4b10      	ldr	r3, [pc, #64]	@ (800fdac <tcp_parseopt+0xe8>)
 800fd6c:	881b      	ldrh	r3, [r3, #0]
 800fd6e:	4413      	add	r3, r2
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	3b02      	subs	r3, #2
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	4b0d      	ldr	r3, [pc, #52]	@ (800fdac <tcp_parseopt+0xe8>)
 800fd78:	801a      	strh	r2, [r3, #0]
 800fd7a:	e000      	b.n	800fd7e <tcp_parseopt+0xba>
          break;
 800fd7c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fd7e:	4b0b      	ldr	r3, [pc, #44]	@ (800fdac <tcp_parseopt+0xe8>)
 800fd80:	881a      	ldrh	r2, [r3, #0]
 800fd82:	4b09      	ldr	r3, [pc, #36]	@ (800fda8 <tcp_parseopt+0xe4>)
 800fd84:	881b      	ldrh	r3, [r3, #0]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d3b2      	bcc.n	800fcf0 <tcp_parseopt+0x2c>
 800fd8a:	e004      	b.n	800fd96 <tcp_parseopt+0xd2>
          return;
 800fd8c:	bf00      	nop
 800fd8e:	e002      	b.n	800fd96 <tcp_parseopt+0xd2>
            return;
 800fd90:	bf00      	nop
 800fd92:	e000      	b.n	800fd96 <tcp_parseopt+0xd2>
            return;
 800fd94:	bf00      	nop
      }
    }
  }
}
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	08016c38 	.word	0x08016c38
 800fda0:	0801709c 	.word	0x0801709c
 800fda4:	08016c84 	.word	0x08016c84
 800fda8:	2000d810 	.word	0x2000d810
 800fdac:	2000d818 	.word	0x2000d818

0800fdb0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fdb4:	4b05      	ldr	r3, [pc, #20]	@ (800fdcc <tcp_trigger_input_pcb_close+0x1c>)
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	f043 0310 	orr.w	r3, r3, #16
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	4b03      	ldr	r3, [pc, #12]	@ (800fdcc <tcp_trigger_input_pcb_close+0x1c>)
 800fdc0:	701a      	strb	r2, [r3, #0]
}
 800fdc2:	bf00      	nop
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr
 800fdcc:	2000d829 	.word	0x2000d829

0800fdd0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00a      	beq.n	800fdf8 <tcp_route+0x28>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	7a1b      	ldrb	r3, [r3, #8]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d006      	beq.n	800fdf8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	7a1b      	ldrb	r3, [r3, #8]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fb fb12 	bl	800b418 <netif_get_by_index>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	e003      	b.n	800fe00 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f003 f959 	bl	80130b0 <ip4_route>
 800fdfe:	4603      	mov	r3, r0
  }
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fe08:	b590      	push	{r4, r7, lr}
 800fe0a:	b087      	sub	sp, #28
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	603b      	str	r3, [r7, #0]
 800fe14:	4613      	mov	r3, r2
 800fe16:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d105      	bne.n	800fe2a <tcp_create_segment+0x22>
 800fe1e:	4b43      	ldr	r3, [pc, #268]	@ (800ff2c <tcp_create_segment+0x124>)
 800fe20:	22a3      	movs	r2, #163	@ 0xa3
 800fe22:	4943      	ldr	r1, [pc, #268]	@ (800ff30 <tcp_create_segment+0x128>)
 800fe24:	4843      	ldr	r0, [pc, #268]	@ (800ff34 <tcp_create_segment+0x12c>)
 800fe26:	f004 fdd5 	bl	80149d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d105      	bne.n	800fe3c <tcp_create_segment+0x34>
 800fe30:	4b3e      	ldr	r3, [pc, #248]	@ (800ff2c <tcp_create_segment+0x124>)
 800fe32:	22a4      	movs	r2, #164	@ 0xa4
 800fe34:	4940      	ldr	r1, [pc, #256]	@ (800ff38 <tcp_create_segment+0x130>)
 800fe36:	483f      	ldr	r0, [pc, #252]	@ (800ff34 <tcp_create_segment+0x12c>)
 800fe38:	f004 fdcc 	bl	80149d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fe3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	f003 0304 	and.w	r3, r3, #4
 800fe48:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fe4a:	2003      	movs	r0, #3
 800fe4c:	f7fa ff58 	bl	800ad00 <memp_malloc>
 800fe50:	6138      	str	r0, [r7, #16]
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d104      	bne.n	800fe62 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fe58:	68b8      	ldr	r0, [r7, #8]
 800fe5a:	f7fb fe6b 	bl	800bb34 <pbuf_free>
    return NULL;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	e060      	b.n	800ff24 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fe68:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	68ba      	ldr	r2, [r7, #8]
 800fe74:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	891a      	ldrh	r2, [r3, #8]
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d205      	bcs.n	800fe8e <tcp_create_segment+0x86>
 800fe82:	4b2a      	ldr	r3, [pc, #168]	@ (800ff2c <tcp_create_segment+0x124>)
 800fe84:	22b0      	movs	r2, #176	@ 0xb0
 800fe86:	492d      	ldr	r1, [pc, #180]	@ (800ff3c <tcp_create_segment+0x134>)
 800fe88:	482a      	ldr	r0, [pc, #168]	@ (800ff34 <tcp_create_segment+0x12c>)
 800fe8a:	f004 fda3 	bl	80149d4 <iprintf>
  seg->len = p->tot_len - optlen;
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	891a      	ldrh	r2, [r3, #8]
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fe9e:	2114      	movs	r1, #20
 800fea0:	68b8      	ldr	r0, [r7, #8]
 800fea2:	f7fb fdb1 	bl	800ba08 <pbuf_add_header>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d004      	beq.n	800feb6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800feac:	6938      	ldr	r0, [r7, #16]
 800feae:	f7fd f8d2 	bl	800d056 <tcp_seg_free>
    return NULL;
 800feb2:	2300      	movs	r3, #0
 800feb4:	e036      	b.n	800ff24 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	8ada      	ldrh	r2, [r3, #22]
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	68dc      	ldr	r4, [r3, #12]
 800fec8:	4610      	mov	r0, r2
 800feca:	f7fa fa41 	bl	800a350 <lwip_htons>
 800fece:	4603      	mov	r3, r0
 800fed0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	8b1a      	ldrh	r2, [r3, #24]
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	68dc      	ldr	r4, [r3, #12]
 800feda:	4610      	mov	r0, r2
 800fedc:	f7fa fa38 	bl	800a350 <lwip_htons>
 800fee0:	4603      	mov	r3, r0
 800fee2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	68dc      	ldr	r4, [r3, #12]
 800fee8:	6838      	ldr	r0, [r7, #0]
 800feea:	f7fa fa46 	bl	800a37a <lwip_htonl>
 800feee:	4603      	mov	r3, r0
 800fef0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fef2:	7dfb      	ldrb	r3, [r7, #23]
 800fef4:	089b      	lsrs	r3, r3, #2
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	3305      	adds	r3, #5
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	031b      	lsls	r3, r3, #12
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	79fb      	ldrb	r3, [r7, #7]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	4313      	orrs	r3, r2
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	68dc      	ldr	r4, [r3, #12]
 800ff0c:	4610      	mov	r0, r2
 800ff0e:	f7fa fa1f 	bl	800a350 <lwip_htons>
 800ff12:	4603      	mov	r3, r0
 800ff14:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	749a      	strb	r2, [r3, #18]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	74da      	strb	r2, [r3, #19]
  return seg;
 800ff22:	693b      	ldr	r3, [r7, #16]
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	371c      	adds	r7, #28
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd90      	pop	{r4, r7, pc}
 800ff2c:	080170b8 	.word	0x080170b8
 800ff30:	080170ec 	.word	0x080170ec
 800ff34:	0801710c 	.word	0x0801710c
 800ff38:	08017134 	.word	0x08017134
 800ff3c:	08017158 	.word	0x08017158

0800ff40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ff40:	b590      	push	{r4, r7, lr}
 800ff42:	b08b      	sub	sp, #44	@ 0x2c
 800ff44:	af02      	add	r7, sp, #8
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	61fb      	str	r3, [r7, #28]
 800ff50:	2300      	movs	r3, #0
 800ff52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ff54:	2300      	movs	r3, #0
 800ff56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <tcp_split_unsent_seg+0x2c>
 800ff5e:	4b95      	ldr	r3, [pc, #596]	@ (80101b4 <tcp_split_unsent_seg+0x274>)
 800ff60:	f240 324b 	movw	r2, #843	@ 0x34b
 800ff64:	4994      	ldr	r1, [pc, #592]	@ (80101b8 <tcp_split_unsent_seg+0x278>)
 800ff66:	4895      	ldr	r0, [pc, #596]	@ (80101bc <tcp_split_unsent_seg+0x27c>)
 800ff68:	f004 fd34 	bl	80149d4 <iprintf>

  useg = pcb->unsent;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ff78:	f04f 33ff 	mov.w	r3, #4294967295
 800ff7c:	e116      	b.n	80101ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ff7e:	887b      	ldrh	r3, [r7, #2]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d109      	bne.n	800ff98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ff84:	4b8b      	ldr	r3, [pc, #556]	@ (80101b4 <tcp_split_unsent_seg+0x274>)
 800ff86:	f240 3253 	movw	r2, #851	@ 0x353
 800ff8a:	498d      	ldr	r1, [pc, #564]	@ (80101c0 <tcp_split_unsent_seg+0x280>)
 800ff8c:	488b      	ldr	r0, [pc, #556]	@ (80101bc <tcp_split_unsent_seg+0x27c>)
 800ff8e:	f004 fd21 	bl	80149d4 <iprintf>
    return ERR_VAL;
 800ff92:	f06f 0305 	mvn.w	r3, #5
 800ff96:	e109      	b.n	80101ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	891b      	ldrh	r3, [r3, #8]
 800ff9c:	887a      	ldrh	r2, [r7, #2]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d301      	bcc.n	800ffa6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	e102      	b.n	80101ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ffaa:	887a      	ldrh	r2, [r7, #2]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d906      	bls.n	800ffbe <tcp_split_unsent_seg+0x7e>
 800ffb0:	4b80      	ldr	r3, [pc, #512]	@ (80101b4 <tcp_split_unsent_seg+0x274>)
 800ffb2:	f240 325b 	movw	r2, #859	@ 0x35b
 800ffb6:	4983      	ldr	r1, [pc, #524]	@ (80101c4 <tcp_split_unsent_seg+0x284>)
 800ffb8:	4880      	ldr	r0, [pc, #512]	@ (80101bc <tcp_split_unsent_seg+0x27c>)
 800ffba:	f004 fd0b 	bl	80149d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	891b      	ldrh	r3, [r3, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d106      	bne.n	800ffd4 <tcp_split_unsent_seg+0x94>
 800ffc6:	4b7b      	ldr	r3, [pc, #492]	@ (80101b4 <tcp_split_unsent_seg+0x274>)
 800ffc8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ffcc:	497e      	ldr	r1, [pc, #504]	@ (80101c8 <tcp_split_unsent_seg+0x288>)
 800ffce:	487b      	ldr	r0, [pc, #492]	@ (80101bc <tcp_split_unsent_seg+0x27c>)
 800ffd0:	f004 fd00 	bl	80149d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	7a9b      	ldrb	r3, [r3, #10]
 800ffd8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	f003 0304 	and.w	r3, r3, #4
 800ffe4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	891a      	ldrh	r2, [r3, #8]
 800ffea:	887b      	ldrh	r3, [r7, #2]
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fff0:	7bbb      	ldrb	r3, [r7, #14]
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	89bb      	ldrh	r3, [r7, #12]
 800fff6:	4413      	add	r3, r2
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fffe:	4619      	mov	r1, r3
 8010000:	2036      	movs	r0, #54	@ 0x36
 8010002:	f7fb fab3 	bl	800b56c <pbuf_alloc>
 8010006:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f000 80b7 	beq.w	801017e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	891a      	ldrh	r2, [r3, #8]
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	891b      	ldrh	r3, [r3, #8]
 801001a:	1ad3      	subs	r3, r2, r3
 801001c:	b29a      	uxth	r2, r3
 801001e:	887b      	ldrh	r3, [r7, #2]
 8010020:	4413      	add	r3, r2
 8010022:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	6858      	ldr	r0, [r3, #4]
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	685a      	ldr	r2, [r3, #4]
 801002c:	7bbb      	ldrb	r3, [r7, #14]
 801002e:	18d1      	adds	r1, r2, r3
 8010030:	897b      	ldrh	r3, [r7, #10]
 8010032:	89ba      	ldrh	r2, [r7, #12]
 8010034:	f7fb ff84 	bl	800bf40 <pbuf_copy_partial>
 8010038:	4603      	mov	r3, r0
 801003a:	461a      	mov	r2, r3
 801003c:	89bb      	ldrh	r3, [r7, #12]
 801003e:	4293      	cmp	r3, r2
 8010040:	f040 809f 	bne.w	8010182 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	899b      	ldrh	r3, [r3, #12]
 801004a:	b29b      	uxth	r3, r3
 801004c:	4618      	mov	r0, r3
 801004e:	f7fa f97f 	bl	800a350 <lwip_htons>
 8010052:	4603      	mov	r3, r0
 8010054:	b2db      	uxtb	r3, r3
 8010056:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801005a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801005c:	2300      	movs	r3, #0
 801005e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010060:	7efb      	ldrb	r3, [r7, #27]
 8010062:	f003 0308 	and.w	r3, r3, #8
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801006a:	7efb      	ldrb	r3, [r7, #27]
 801006c:	f023 0308 	bic.w	r3, r3, #8
 8010070:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010072:	7ebb      	ldrb	r3, [r7, #26]
 8010074:	f043 0308 	orr.w	r3, r3, #8
 8010078:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801007a:	7efb      	ldrb	r3, [r7, #27]
 801007c:	f003 0301 	and.w	r3, r3, #1
 8010080:	2b00      	cmp	r3, #0
 8010082:	d007      	beq.n	8010094 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010084:	7efb      	ldrb	r3, [r7, #27]
 8010086:	f023 0301 	bic.w	r3, r3, #1
 801008a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801008c:	7ebb      	ldrb	r3, [r7, #26]
 801008e:	f043 0301 	orr.w	r3, r3, #1
 8010092:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	f7fa f96d 	bl	800a37a <lwip_htonl>
 80100a0:	4602      	mov	r2, r0
 80100a2:	887b      	ldrh	r3, [r7, #2]
 80100a4:	18d1      	adds	r1, r2, r3
 80100a6:	7eba      	ldrb	r2, [r7, #26]
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	460b      	mov	r3, r1
 80100ae:	6939      	ldr	r1, [r7, #16]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f7ff fea9 	bl	800fe08 <tcp_create_segment>
 80100b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d063      	beq.n	8010186 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fb fdc4 	bl	800bc50 <pbuf_clen>
 80100c8:	4603      	mov	r3, r0
 80100ca:	461a      	mov	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80100d2:	1a9b      	subs	r3, r3, r2
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	6858      	ldr	r0, [r3, #4]
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	891a      	ldrh	r2, [r3, #8]
 80100e6:	89bb      	ldrh	r3, [r7, #12]
 80100e8:	1ad3      	subs	r3, r2, r3
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	4619      	mov	r1, r3
 80100ee:	f7fb fb9b 	bl	800b828 <pbuf_realloc>
  useg->len -= remainder;
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	891a      	ldrh	r2, [r3, #8]
 80100f6:	89bb      	ldrh	r3, [r7, #12]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	899b      	ldrh	r3, [r3, #12]
 8010106:	b29c      	uxth	r4, r3
 8010108:	7efb      	ldrb	r3, [r7, #27]
 801010a:	b29b      	uxth	r3, r3
 801010c:	4618      	mov	r0, r3
 801010e:	f7fa f91f 	bl	800a350 <lwip_htons>
 8010112:	4603      	mov	r3, r0
 8010114:	461a      	mov	r2, r3
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	4322      	orrs	r2, r4
 801011c:	b292      	uxth	r2, r2
 801011e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	4618      	mov	r0, r3
 8010126:	f7fb fd93 	bl	800bc50 <pbuf_clen>
 801012a:	4603      	mov	r3, r0
 801012c:	461a      	mov	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010134:	4413      	add	r3, r2
 8010136:	b29a      	uxth	r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	f7fb fd84 	bl	800bc50 <pbuf_clen>
 8010148:	4603      	mov	r3, r0
 801014a:	461a      	mov	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010152:	4413      	add	r3, r2
 8010154:	b29a      	uxth	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	681a      	ldr	r2, [r3, #0]
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	69fa      	ldr	r2, [r7, #28]
 8010168:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d103      	bne.n	801017a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801017a:	2300      	movs	r3, #0
 801017c:	e016      	b.n	80101ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801017e:	bf00      	nop
 8010180:	e002      	b.n	8010188 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010182:	bf00      	nop
 8010184:	e000      	b.n	8010188 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010186:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010188:	69fb      	ldr	r3, [r7, #28]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d006      	beq.n	801019c <tcp_split_unsent_seg+0x25c>
 801018e:	4b09      	ldr	r3, [pc, #36]	@ (80101b4 <tcp_split_unsent_seg+0x274>)
 8010190:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010194:	490d      	ldr	r1, [pc, #52]	@ (80101cc <tcp_split_unsent_seg+0x28c>)
 8010196:	4809      	ldr	r0, [pc, #36]	@ (80101bc <tcp_split_unsent_seg+0x27c>)
 8010198:	f004 fc1c 	bl	80149d4 <iprintf>
  if (p != NULL) {
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d002      	beq.n	80101a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80101a2:	6938      	ldr	r0, [r7, #16]
 80101a4:	f7fb fcc6 	bl	800bb34 <pbuf_free>
  }

  return ERR_MEM;
 80101a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3724      	adds	r7, #36	@ 0x24
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd90      	pop	{r4, r7, pc}
 80101b4:	080170b8 	.word	0x080170b8
 80101b8:	0801744c 	.word	0x0801744c
 80101bc:	0801710c 	.word	0x0801710c
 80101c0:	08017470 	.word	0x08017470
 80101c4:	08017494 	.word	0x08017494
 80101c8:	080174a4 	.word	0x080174a4
 80101cc:	080174b4 	.word	0x080174b4

080101d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80101d0:	b590      	push	{r4, r7, lr}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d106      	bne.n	80101ec <tcp_send_fin+0x1c>
 80101de:	4b21      	ldr	r3, [pc, #132]	@ (8010264 <tcp_send_fin+0x94>)
 80101e0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80101e4:	4920      	ldr	r1, [pc, #128]	@ (8010268 <tcp_send_fin+0x98>)
 80101e6:	4821      	ldr	r0, [pc, #132]	@ (801026c <tcp_send_fin+0x9c>)
 80101e8:	f004 fbf4 	bl	80149d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d02e      	beq.n	8010252 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101f8:	60fb      	str	r3, [r7, #12]
 80101fa:	e002      	b.n	8010202 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1f8      	bne.n	80101fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	899b      	ldrh	r3, [r3, #12]
 8010210:	b29b      	uxth	r3, r3
 8010212:	4618      	mov	r0, r3
 8010214:	f7fa f89c 	bl	800a350 <lwip_htons>
 8010218:	4603      	mov	r3, r0
 801021a:	b2db      	uxtb	r3, r3
 801021c:	f003 0307 	and.w	r3, r3, #7
 8010220:	2b00      	cmp	r3, #0
 8010222:	d116      	bne.n	8010252 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	899b      	ldrh	r3, [r3, #12]
 801022a:	b29c      	uxth	r4, r3
 801022c:	2001      	movs	r0, #1
 801022e:	f7fa f88f 	bl	800a350 <lwip_htons>
 8010232:	4603      	mov	r3, r0
 8010234:	461a      	mov	r2, r3
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	4322      	orrs	r2, r4
 801023c:	b292      	uxth	r2, r2
 801023e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	8b5b      	ldrh	r3, [r3, #26]
 8010244:	f043 0320 	orr.w	r3, r3, #32
 8010248:	b29a      	uxth	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801024e:	2300      	movs	r3, #0
 8010250:	e004      	b.n	801025c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010252:	2101      	movs	r1, #1
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 f80b 	bl	8010270 <tcp_enqueue_flags>
 801025a:	4603      	mov	r3, r0
}
 801025c:	4618      	mov	r0, r3
 801025e:	3714      	adds	r7, #20
 8010260:	46bd      	mov	sp, r7
 8010262:	bd90      	pop	{r4, r7, pc}
 8010264:	080170b8 	.word	0x080170b8
 8010268:	080174c0 	.word	0x080174c0
 801026c:	0801710c 	.word	0x0801710c

08010270 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b08a      	sub	sp, #40	@ 0x28
 8010274:	af02      	add	r7, sp, #8
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	460b      	mov	r3, r1
 801027a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010284:	78fb      	ldrb	r3, [r7, #3]
 8010286:	f003 0303 	and.w	r3, r3, #3
 801028a:	2b00      	cmp	r3, #0
 801028c:	d106      	bne.n	801029c <tcp_enqueue_flags+0x2c>
 801028e:	4b67      	ldr	r3, [pc, #412]	@ (801042c <tcp_enqueue_flags+0x1bc>)
 8010290:	f240 4211 	movw	r2, #1041	@ 0x411
 8010294:	4966      	ldr	r1, [pc, #408]	@ (8010430 <tcp_enqueue_flags+0x1c0>)
 8010296:	4867      	ldr	r0, [pc, #412]	@ (8010434 <tcp_enqueue_flags+0x1c4>)
 8010298:	f004 fb9c 	bl	80149d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <tcp_enqueue_flags+0x40>
 80102a2:	4b62      	ldr	r3, [pc, #392]	@ (801042c <tcp_enqueue_flags+0x1bc>)
 80102a4:	f240 4213 	movw	r2, #1043	@ 0x413
 80102a8:	4963      	ldr	r1, [pc, #396]	@ (8010438 <tcp_enqueue_flags+0x1c8>)
 80102aa:	4862      	ldr	r0, [pc, #392]	@ (8010434 <tcp_enqueue_flags+0x1c4>)
 80102ac:	f004 fb92 	bl	80149d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80102b0:	78fb      	ldrb	r3, [r7, #3]
 80102b2:	f003 0302 	and.w	r3, r3, #2
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d001      	beq.n	80102be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80102ba:	2301      	movs	r3, #1
 80102bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80102be:	7ffb      	ldrb	r3, [r7, #31]
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	f003 0304 	and.w	r3, r3, #4
 80102c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80102d2:	4619      	mov	r1, r3
 80102d4:	2036      	movs	r0, #54	@ 0x36
 80102d6:	f7fb f949 	bl	800b56c <pbuf_alloc>
 80102da:	6138      	str	r0, [r7, #16]
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d109      	bne.n	80102f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	8b5b      	ldrh	r3, [r3, #26]
 80102e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80102f0:	f04f 33ff 	mov.w	r3, #4294967295
 80102f4:	e095      	b.n	8010422 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	895a      	ldrh	r2, [r3, #10]
 80102fa:	7dfb      	ldrb	r3, [r7, #23]
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	429a      	cmp	r2, r3
 8010300:	d206      	bcs.n	8010310 <tcp_enqueue_flags+0xa0>
 8010302:	4b4a      	ldr	r3, [pc, #296]	@ (801042c <tcp_enqueue_flags+0x1bc>)
 8010304:	f240 4239 	movw	r2, #1081	@ 0x439
 8010308:	494c      	ldr	r1, [pc, #304]	@ (801043c <tcp_enqueue_flags+0x1cc>)
 801030a:	484a      	ldr	r0, [pc, #296]	@ (8010434 <tcp_enqueue_flags+0x1c4>)
 801030c:	f004 fb62 	bl	80149d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010314:	78fa      	ldrb	r2, [r7, #3]
 8010316:	7ffb      	ldrb	r3, [r7, #31]
 8010318:	9300      	str	r3, [sp, #0]
 801031a:	460b      	mov	r3, r1
 801031c:	6939      	ldr	r1, [r7, #16]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f7ff fd72 	bl	800fe08 <tcp_create_segment>
 8010324:	60f8      	str	r0, [r7, #12]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d109      	bne.n	8010340 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	8b5b      	ldrh	r3, [r3, #26]
 8010330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010334:	b29a      	uxth	r2, r3
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801033a:	f04f 33ff 	mov.w	r3, #4294967295
 801033e:	e070      	b.n	8010422 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	f003 0303 	and.w	r3, r3, #3
 8010348:	2b00      	cmp	r3, #0
 801034a:	d006      	beq.n	801035a <tcp_enqueue_flags+0xea>
 801034c:	4b37      	ldr	r3, [pc, #220]	@ (801042c <tcp_enqueue_flags+0x1bc>)
 801034e:	f240 4242 	movw	r2, #1090	@ 0x442
 8010352:	493b      	ldr	r1, [pc, #236]	@ (8010440 <tcp_enqueue_flags+0x1d0>)
 8010354:	4837      	ldr	r0, [pc, #220]	@ (8010434 <tcp_enqueue_flags+0x1c4>)
 8010356:	f004 fb3d 	bl	80149d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	891b      	ldrh	r3, [r3, #8]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d006      	beq.n	8010370 <tcp_enqueue_flags+0x100>
 8010362:	4b32      	ldr	r3, [pc, #200]	@ (801042c <tcp_enqueue_flags+0x1bc>)
 8010364:	f240 4243 	movw	r2, #1091	@ 0x443
 8010368:	4936      	ldr	r1, [pc, #216]	@ (8010444 <tcp_enqueue_flags+0x1d4>)
 801036a:	4832      	ldr	r0, [pc, #200]	@ (8010434 <tcp_enqueue_flags+0x1c4>)
 801036c:	f004 fb32 	bl	80149d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010374:	2b00      	cmp	r3, #0
 8010376:	d103      	bne.n	8010380 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801037e:	e00d      	b.n	801039c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010384:	61bb      	str	r3, [r7, #24]
 8010386:	e002      	b.n	801038e <tcp_enqueue_flags+0x11e>
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	61bb      	str	r3, [r7, #24]
 801038e:	69bb      	ldr	r3, [r7, #24]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d1f8      	bne.n	8010388 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	68fa      	ldr	r2, [r7, #12]
 801039a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80103a4:	78fb      	ldrb	r3, [r7, #3]
 80103a6:	f003 0302 	and.w	r3, r3, #2
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d104      	bne.n	80103b8 <tcp_enqueue_flags+0x148>
 80103ae:	78fb      	ldrb	r3, [r7, #3]
 80103b0:	f003 0301 	and.w	r3, r3, #1
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d004      	beq.n	80103c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80103bc:	1c5a      	adds	r2, r3, #1
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80103c2:	78fb      	ldrb	r3, [r7, #3]
 80103c4:	f003 0301 	and.w	r3, r3, #1
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d006      	beq.n	80103da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	8b5b      	ldrh	r3, [r3, #26]
 80103d0:	f043 0320 	orr.w	r3, r3, #32
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fb fc36 	bl	800bc50 <pbuf_clen>
 80103e4:	4603      	mov	r3, r0
 80103e6:	461a      	mov	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80103ee:	4413      	add	r3, r2
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00e      	beq.n	8010420 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10a      	bne.n	8010420 <tcp_enqueue_flags+0x1b0>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801040e:	2b00      	cmp	r3, #0
 8010410:	d106      	bne.n	8010420 <tcp_enqueue_flags+0x1b0>
 8010412:	4b06      	ldr	r3, [pc, #24]	@ (801042c <tcp_enqueue_flags+0x1bc>)
 8010414:	f240 4265 	movw	r2, #1125	@ 0x465
 8010418:	490b      	ldr	r1, [pc, #44]	@ (8010448 <tcp_enqueue_flags+0x1d8>)
 801041a:	4806      	ldr	r0, [pc, #24]	@ (8010434 <tcp_enqueue_flags+0x1c4>)
 801041c:	f004 fada 	bl	80149d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010420:	2300      	movs	r3, #0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3720      	adds	r7, #32
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	080170b8 	.word	0x080170b8
 8010430:	080174dc 	.word	0x080174dc
 8010434:	0801710c 	.word	0x0801710c
 8010438:	08017534 	.word	0x08017534
 801043c:	08017554 	.word	0x08017554
 8010440:	08017590 	.word	0x08017590
 8010444:	080175a8 	.word	0x080175a8
 8010448:	080175d4 	.word	0x080175d4

0801044c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801044c:	b5b0      	push	{r4, r5, r7, lr}
 801044e:	b08a      	sub	sp, #40	@ 0x28
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d106      	bne.n	8010468 <tcp_output+0x1c>
 801045a:	4b8a      	ldr	r3, [pc, #552]	@ (8010684 <tcp_output+0x238>)
 801045c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010460:	4989      	ldr	r1, [pc, #548]	@ (8010688 <tcp_output+0x23c>)
 8010462:	488a      	ldr	r0, [pc, #552]	@ (801068c <tcp_output+0x240>)
 8010464:	f004 fab6 	bl	80149d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	7d1b      	ldrb	r3, [r3, #20]
 801046c:	2b01      	cmp	r3, #1
 801046e:	d106      	bne.n	801047e <tcp_output+0x32>
 8010470:	4b84      	ldr	r3, [pc, #528]	@ (8010684 <tcp_output+0x238>)
 8010472:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010476:	4986      	ldr	r1, [pc, #536]	@ (8010690 <tcp_output+0x244>)
 8010478:	4884      	ldr	r0, [pc, #528]	@ (801068c <tcp_output+0x240>)
 801047a:	f004 faab 	bl	80149d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801047e:	4b85      	ldr	r3, [pc, #532]	@ (8010694 <tcp_output+0x248>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	429a      	cmp	r2, r3
 8010486:	d101      	bne.n	801048c <tcp_output+0x40>
    return ERR_OK;
 8010488:	2300      	movs	r3, #0
 801048a:	e1ce      	b.n	801082a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010498:	4293      	cmp	r3, r2
 801049a:	bf28      	it	cs
 801049c:	4613      	movcs	r3, r2
 801049e:	b29b      	uxth	r3, r3
 80104a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80104a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10b      	bne.n	80104c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	8b5b      	ldrh	r3, [r3, #26]
 80104b2:	f003 0302 	and.w	r3, r3, #2
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 81aa 	beq.w	8010810 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 fdcb 	bl	8011058 <tcp_send_empty_ack>
 80104c2:	4603      	mov	r3, r0
 80104c4:	e1b1      	b.n	801082a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80104c6:	6879      	ldr	r1, [r7, #4]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	3304      	adds	r3, #4
 80104cc:	461a      	mov	r2, r3
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7ff fc7e 	bl	800fdd0 <tcp_route>
 80104d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d102      	bne.n	80104e2 <tcp_output+0x96>
    return ERR_RTE;
 80104dc:	f06f 0303 	mvn.w	r3, #3
 80104e0:	e1a3      	b.n	801082a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d003      	beq.n	80104f0 <tcp_output+0xa4>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d111      	bne.n	8010514 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <tcp_output+0xb0>
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	3304      	adds	r3, #4
 80104fa:	e000      	b.n	80104fe <tcp_output+0xb2>
 80104fc:	2300      	movs	r3, #0
 80104fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d102      	bne.n	801050c <tcp_output+0xc0>
      return ERR_RTE;
 8010506:	f06f 0303 	mvn.w	r3, #3
 801050a:	e18e      	b.n	801082a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	4618      	mov	r0, r3
 801051c:	f7f9 ff2d 	bl	800a37a <lwip_htonl>
 8010520:	4602      	mov	r2, r0
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801052a:	8912      	ldrh	r2, [r2, #8]
 801052c:	4413      	add	r3, r2
 801052e:	69ba      	ldr	r2, [r7, #24]
 8010530:	429a      	cmp	r2, r3
 8010532:	d227      	bcs.n	8010584 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801053a:	461a      	mov	r2, r3
 801053c:	69bb      	ldr	r3, [r7, #24]
 801053e:	4293      	cmp	r3, r2
 8010540:	d114      	bne.n	801056c <tcp_output+0x120>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010546:	2b00      	cmp	r3, #0
 8010548:	d110      	bne.n	801056c <tcp_output+0x120>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010550:	2b00      	cmp	r3, #0
 8010552:	d10b      	bne.n	801056c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8b5b      	ldrh	r3, [r3, #26]
 8010570:	f003 0302 	and.w	r3, r3, #2
 8010574:	2b00      	cmp	r3, #0
 8010576:	f000 814d 	beq.w	8010814 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 fd6c 	bl	8011058 <tcp_send_empty_ack>
 8010580:	4603      	mov	r3, r0
 8010582:	e152      	b.n	801082a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010590:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010592:	6a3b      	ldr	r3, [r7, #32]
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 811c 	beq.w	80107d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801059a:	e002      	b.n	80105a2 <tcp_output+0x156>
 801059c:	6a3b      	ldr	r3, [r7, #32]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	623b      	str	r3, [r7, #32]
 80105a2:	6a3b      	ldr	r3, [r7, #32]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d1f8      	bne.n	801059c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80105aa:	e112      	b.n	80107d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80105ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	899b      	ldrh	r3, [r3, #12]
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7f9 fecb 	bl	800a350 <lwip_htons>
 80105ba:	4603      	mov	r3, r0
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	f003 0304 	and.w	r3, r3, #4
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d006      	beq.n	80105d4 <tcp_output+0x188>
 80105c6:	4b2f      	ldr	r3, [pc, #188]	@ (8010684 <tcp_output+0x238>)
 80105c8:	f240 5236 	movw	r2, #1334	@ 0x536
 80105cc:	4932      	ldr	r1, [pc, #200]	@ (8010698 <tcp_output+0x24c>)
 80105ce:	482f      	ldr	r0, [pc, #188]	@ (801068c <tcp_output+0x240>)
 80105d0:	f004 fa00 	bl	80149d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d01f      	beq.n	801061c <tcp_output+0x1d0>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	8b5b      	ldrh	r3, [r3, #26]
 80105e0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d119      	bne.n	801061c <tcp_output+0x1d0>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00b      	beq.n	8010608 <tcp_output+0x1bc>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d110      	bne.n	801061c <tcp_output+0x1d0>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105fe:	891a      	ldrh	r2, [r3, #8]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010604:	429a      	cmp	r2, r3
 8010606:	d209      	bcs.n	801061c <tcp_output+0x1d0>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801060e:	2b00      	cmp	r3, #0
 8010610:	d004      	beq.n	801061c <tcp_output+0x1d0>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010618:	2b08      	cmp	r3, #8
 801061a:	d901      	bls.n	8010620 <tcp_output+0x1d4>
 801061c:	2301      	movs	r3, #1
 801061e:	e000      	b.n	8010622 <tcp_output+0x1d6>
 8010620:	2300      	movs	r3, #0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d106      	bne.n	8010634 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	8b5b      	ldrh	r3, [r3, #26]
 801062a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801062e:	2b00      	cmp	r3, #0
 8010630:	f000 80e4 	beq.w	80107fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	7d1b      	ldrb	r3, [r3, #20]
 8010638:	2b02      	cmp	r3, #2
 801063a:	d00d      	beq.n	8010658 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	899b      	ldrh	r3, [r3, #12]
 8010642:	b29c      	uxth	r4, r3
 8010644:	2010      	movs	r0, #16
 8010646:	f7f9 fe83 	bl	800a350 <lwip_htons>
 801064a:	4603      	mov	r3, r0
 801064c:	461a      	mov	r2, r3
 801064e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	4322      	orrs	r2, r4
 8010654:	b292      	uxth	r2, r2
 8010656:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010658:	697a      	ldr	r2, [r7, #20]
 801065a:	6879      	ldr	r1, [r7, #4]
 801065c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801065e:	f000 f909 	bl	8010874 <tcp_output_segment>
 8010662:	4603      	mov	r3, r0
 8010664:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d016      	beq.n	801069c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	8b5b      	ldrh	r3, [r3, #26]
 8010672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010676:	b29a      	uxth	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	835a      	strh	r2, [r3, #26]
      return err;
 801067c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010680:	e0d3      	b.n	801082a <tcp_output+0x3de>
 8010682:	bf00      	nop
 8010684:	080170b8 	.word	0x080170b8
 8010688:	080175fc 	.word	0x080175fc
 801068c:	0801710c 	.word	0x0801710c
 8010690:	08017614 	.word	0x08017614
 8010694:	2000d830 	.word	0x2000d830
 8010698:	0801763c 	.word	0x0801763c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	7d1b      	ldrb	r3, [r3, #20]
 80106a8:	2b02      	cmp	r3, #2
 80106aa:	d006      	beq.n	80106ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	8b5b      	ldrh	r3, [r3, #26]
 80106b0:	f023 0303 	bic.w	r3, r3, #3
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80106ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f9 fe5a 	bl	800a37a <lwip_htonl>
 80106c6:	4604      	mov	r4, r0
 80106c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ca:	891b      	ldrh	r3, [r3, #8]
 80106cc:	461d      	mov	r5, r3
 80106ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	899b      	ldrh	r3, [r3, #12]
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7f9 fe3a 	bl	800a350 <lwip_htons>
 80106dc:	4603      	mov	r3, r0
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	f003 0303 	and.w	r3, r3, #3
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d001      	beq.n	80106ec <tcp_output+0x2a0>
 80106e8:	2301      	movs	r3, #1
 80106ea:	e000      	b.n	80106ee <tcp_output+0x2a2>
 80106ec:	2300      	movs	r3, #0
 80106ee:	442b      	add	r3, r5
 80106f0:	4423      	add	r3, r4
 80106f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	1ad3      	subs	r3, r2, r3
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	da02      	bge.n	8010706 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010708:	891b      	ldrh	r3, [r3, #8]
 801070a:	461c      	mov	r4, r3
 801070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	899b      	ldrh	r3, [r3, #12]
 8010712:	b29b      	uxth	r3, r3
 8010714:	4618      	mov	r0, r3
 8010716:	f7f9 fe1b 	bl	800a350 <lwip_htons>
 801071a:	4603      	mov	r3, r0
 801071c:	b2db      	uxtb	r3, r3
 801071e:	f003 0303 	and.w	r3, r3, #3
 8010722:	2b00      	cmp	r3, #0
 8010724:	d001      	beq.n	801072a <tcp_output+0x2de>
 8010726:	2301      	movs	r3, #1
 8010728:	e000      	b.n	801072c <tcp_output+0x2e0>
 801072a:	2300      	movs	r3, #0
 801072c:	4423      	add	r3, r4
 801072e:	2b00      	cmp	r3, #0
 8010730:	d049      	beq.n	80107c6 <tcp_output+0x37a>
      seg->next = NULL;
 8010732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010734:	2200      	movs	r2, #0
 8010736:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801073c:	2b00      	cmp	r3, #0
 801073e:	d105      	bne.n	801074c <tcp_output+0x300>
        pcb->unacked = seg;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010744:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010748:	623b      	str	r3, [r7, #32]
 801074a:	e03f      	b.n	80107cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	4618      	mov	r0, r3
 8010754:	f7f9 fe11 	bl	800a37a <lwip_htonl>
 8010758:	4604      	mov	r4, r0
 801075a:	6a3b      	ldr	r3, [r7, #32]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	f7f9 fe0a 	bl	800a37a <lwip_htonl>
 8010766:	4603      	mov	r3, r0
 8010768:	1ae3      	subs	r3, r4, r3
 801076a:	2b00      	cmp	r3, #0
 801076c:	da24      	bge.n	80107b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	3370      	adds	r3, #112	@ 0x70
 8010772:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010774:	e002      	b.n	801077c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d011      	beq.n	80107a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	4618      	mov	r0, r3
 801078e:	f7f9 fdf4 	bl	800a37a <lwip_htonl>
 8010792:	4604      	mov	r4, r0
 8010794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	4618      	mov	r0, r3
 801079c:	f7f9 fded 	bl	800a37a <lwip_htonl>
 80107a0:	4603      	mov	r3, r0
 80107a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	dbe6      	blt.n	8010776 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	e009      	b.n	80107cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80107b8:	6a3b      	ldr	r3, [r7, #32]
 80107ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80107be:	6a3b      	ldr	r3, [r7, #32]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	623b      	str	r3, [r7, #32]
 80107c4:	e002      	b.n	80107cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80107c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80107c8:	f7fc fc45 	bl	800d056 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80107d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d012      	beq.n	80107fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80107d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	4618      	mov	r0, r3
 80107e0:	f7f9 fdcb 	bl	800a37a <lwip_htonl>
 80107e4:	4602      	mov	r2, r0
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107ee:	8912      	ldrh	r2, [r2, #8]
 80107f0:	4413      	add	r3, r2
  while (seg != NULL &&
 80107f2:	69ba      	ldr	r2, [r7, #24]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	f4bf aed9 	bcs.w	80105ac <tcp_output+0x160>
 80107fa:	e000      	b.n	80107fe <tcp_output+0x3b2>
      break;
 80107fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010802:	2b00      	cmp	r3, #0
 8010804:	d108      	bne.n	8010818 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801080e:	e004      	b.n	801081a <tcp_output+0x3ce>
    goto output_done;
 8010810:	bf00      	nop
 8010812:	e002      	b.n	801081a <tcp_output+0x3ce>
    goto output_done;
 8010814:	bf00      	nop
 8010816:	e000      	b.n	801081a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010818:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	8b5b      	ldrh	r3, [r3, #26]
 801081e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010822:	b29a      	uxth	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3728      	adds	r7, #40	@ 0x28
 801082e:	46bd      	mov	sp, r7
 8010830:	bdb0      	pop	{r4, r5, r7, pc}
 8010832:	bf00      	nop

08010834 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d106      	bne.n	8010850 <tcp_output_segment_busy+0x1c>
 8010842:	4b09      	ldr	r3, [pc, #36]	@ (8010868 <tcp_output_segment_busy+0x34>)
 8010844:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010848:	4908      	ldr	r1, [pc, #32]	@ (801086c <tcp_output_segment_busy+0x38>)
 801084a:	4809      	ldr	r0, [pc, #36]	@ (8010870 <tcp_output_segment_busy+0x3c>)
 801084c:	f004 f8c2 	bl	80149d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	7b9b      	ldrb	r3, [r3, #14]
 8010856:	2b01      	cmp	r3, #1
 8010858:	d001      	beq.n	801085e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801085a:	2301      	movs	r3, #1
 801085c:	e000      	b.n	8010860 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	080170b8 	.word	0x080170b8
 801086c:	08017654 	.word	0x08017654
 8010870:	0801710c 	.word	0x0801710c

08010874 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010874:	b5b0      	push	{r4, r5, r7, lr}
 8010876:	b08c      	sub	sp, #48	@ 0x30
 8010878:	af04      	add	r7, sp, #16
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d106      	bne.n	8010894 <tcp_output_segment+0x20>
 8010886:	4b64      	ldr	r3, [pc, #400]	@ (8010a18 <tcp_output_segment+0x1a4>)
 8010888:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801088c:	4963      	ldr	r1, [pc, #396]	@ (8010a1c <tcp_output_segment+0x1a8>)
 801088e:	4864      	ldr	r0, [pc, #400]	@ (8010a20 <tcp_output_segment+0x1ac>)
 8010890:	f004 f8a0 	bl	80149d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d106      	bne.n	80108a8 <tcp_output_segment+0x34>
 801089a:	4b5f      	ldr	r3, [pc, #380]	@ (8010a18 <tcp_output_segment+0x1a4>)
 801089c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80108a0:	4960      	ldr	r1, [pc, #384]	@ (8010a24 <tcp_output_segment+0x1b0>)
 80108a2:	485f      	ldr	r0, [pc, #380]	@ (8010a20 <tcp_output_segment+0x1ac>)
 80108a4:	f004 f896 	bl	80149d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d106      	bne.n	80108bc <tcp_output_segment+0x48>
 80108ae:	4b5a      	ldr	r3, [pc, #360]	@ (8010a18 <tcp_output_segment+0x1a4>)
 80108b0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80108b4:	495c      	ldr	r1, [pc, #368]	@ (8010a28 <tcp_output_segment+0x1b4>)
 80108b6:	485a      	ldr	r0, [pc, #360]	@ (8010a20 <tcp_output_segment+0x1ac>)
 80108b8:	f004 f88c 	bl	80149d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f7ff ffb9 	bl	8010834 <tcp_output_segment_busy>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d001      	beq.n	80108cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	e0a1      	b.n	8010a10 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	68dc      	ldr	r4, [r3, #12]
 80108d4:	4610      	mov	r0, r2
 80108d6:	f7f9 fd50 	bl	800a37a <lwip_htonl>
 80108da:	4603      	mov	r3, r0
 80108dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	68dc      	ldr	r4, [r3, #12]
 80108e6:	4610      	mov	r0, r2
 80108e8:	f7f9 fd32 	bl	800a350 <lwip_htons>
 80108ec:	4603      	mov	r3, r0
 80108ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80108f8:	441a      	add	r2, r3
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	3314      	adds	r3, #20
 8010904:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	7a9b      	ldrb	r3, [r3, #10]
 801090a:	f003 0301 	and.w	r3, r3, #1
 801090e:	2b00      	cmp	r3, #0
 8010910:	d015      	beq.n	801093e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	3304      	adds	r3, #4
 8010916:	461a      	mov	r2, r3
 8010918:	6879      	ldr	r1, [r7, #4]
 801091a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801091e:	f7fc fe91 	bl	800d644 <tcp_eff_send_mss_netif>
 8010922:	4603      	mov	r3, r0
 8010924:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010926:	8b7b      	ldrh	r3, [r7, #26]
 8010928:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801092c:	4618      	mov	r0, r3
 801092e:	f7f9 fd24 	bl	800a37a <lwip_htonl>
 8010932:	4602      	mov	r2, r0
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	3304      	adds	r3, #4
 801093c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010944:	2b00      	cmp	r3, #0
 8010946:	da02      	bge.n	801094e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	2200      	movs	r2, #0
 801094c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010952:	2b00      	cmp	r3, #0
 8010954:	d10c      	bne.n	8010970 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010956:	4b35      	ldr	r3, [pc, #212]	@ (8010a2c <tcp_output_segment+0x1b8>)
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	4618      	mov	r0, r3
 8010966:	f7f9 fd08 	bl	800a37a <lwip_htonl>
 801096a:	4602      	mov	r2, r0
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68da      	ldr	r2, [r3, #12]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	1ad3      	subs	r3, r2, r3
 801097c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	8959      	ldrh	r1, [r3, #10]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	8b3a      	ldrh	r2, [r7, #24]
 801098a:	1a8a      	subs	r2, r1, r2
 801098c:	b292      	uxth	r2, r2
 801098e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	8919      	ldrh	r1, [r3, #8]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	8b3a      	ldrh	r2, [r7, #24]
 801099c:	1a8a      	subs	r2, r1, r2
 801099e:	b292      	uxth	r2, r2
 80109a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	68fa      	ldr	r2, [r7, #12]
 80109a8:	68d2      	ldr	r2, [r2, #12]
 80109aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	2200      	movs	r2, #0
 80109b2:	741a      	strb	r2, [r3, #16]
 80109b4:	2200      	movs	r2, #0
 80109b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	68da      	ldr	r2, [r3, #12]
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	7a9b      	ldrb	r3, [r3, #10]
 80109c0:	f003 0301 	and.w	r3, r3, #1
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <tcp_output_segment+0x158>
 80109c8:	2318      	movs	r3, #24
 80109ca:	e000      	b.n	80109ce <tcp_output_segment+0x15a>
 80109cc:	2314      	movs	r3, #20
 80109ce:	4413      	add	r3, r2
 80109d0:	69fa      	ldr	r2, [r7, #28]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d006      	beq.n	80109e4 <tcp_output_segment+0x170>
 80109d6:	4b10      	ldr	r3, [pc, #64]	@ (8010a18 <tcp_output_segment+0x1a4>)
 80109d8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80109dc:	4914      	ldr	r1, [pc, #80]	@ (8010a30 <tcp_output_segment+0x1bc>)
 80109de:	4810      	ldr	r0, [pc, #64]	@ (8010a20 <tcp_output_segment+0x1ac>)
 80109e0:	f003 fff8 	bl	80149d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6858      	ldr	r0, [r3, #4]
 80109e8:	68b9      	ldr	r1, [r7, #8]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	1d1c      	adds	r4, r3, #4
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	7add      	ldrb	r5, [r3, #11]
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	7a9b      	ldrb	r3, [r3, #10]
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	9202      	str	r2, [sp, #8]
 80109fa:	2206      	movs	r2, #6
 80109fc:	9201      	str	r2, [sp, #4]
 80109fe:	9300      	str	r3, [sp, #0]
 8010a00:	462b      	mov	r3, r5
 8010a02:	4622      	mov	r2, r4
 8010a04:	f002 fd12 	bl	801342c <ip4_output_if>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3720      	adds	r7, #32
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bdb0      	pop	{r4, r5, r7, pc}
 8010a18:	080170b8 	.word	0x080170b8
 8010a1c:	0801767c 	.word	0x0801767c
 8010a20:	0801710c 	.word	0x0801710c
 8010a24:	0801769c 	.word	0x0801769c
 8010a28:	080176bc 	.word	0x080176bc
 8010a2c:	2000d7e4 	.word	0x2000d7e4
 8010a30:	080176e0 	.word	0x080176e0

08010a34 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010a34:	b5b0      	push	{r4, r5, r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d106      	bne.n	8010a50 <tcp_rexmit_rto_prepare+0x1c>
 8010a42:	4b31      	ldr	r3, [pc, #196]	@ (8010b08 <tcp_rexmit_rto_prepare+0xd4>)
 8010a44:	f240 6263 	movw	r2, #1635	@ 0x663
 8010a48:	4930      	ldr	r1, [pc, #192]	@ (8010b0c <tcp_rexmit_rto_prepare+0xd8>)
 8010a4a:	4831      	ldr	r0, [pc, #196]	@ (8010b10 <tcp_rexmit_rto_prepare+0xdc>)
 8010a4c:	f003 ffc2 	bl	80149d4 <iprintf>

  if (pcb->unacked == NULL) {
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d102      	bne.n	8010a5e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010a58:	f06f 0305 	mvn.w	r3, #5
 8010a5c:	e050      	b.n	8010b00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a62:	60fb      	str	r3, [r7, #12]
 8010a64:	e00b      	b.n	8010a7e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f7ff fee4 	bl	8010834 <tcp_output_segment_busy>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d002      	beq.n	8010a78 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010a72:	f06f 0305 	mvn.w	r3, #5
 8010a76:	e043      	b.n	8010b00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	60fb      	str	r3, [r7, #12]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d1ef      	bne.n	8010a66 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	f7ff fed4 	bl	8010834 <tcp_output_segment_busy>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d002      	beq.n	8010a98 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010a92:	f06f 0305 	mvn.w	r3, #5
 8010a96:	e033      	b.n	8010b00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	8b5b      	ldrh	r3, [r3, #26]
 8010ab2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7f9 fc59 	bl	800a37a <lwip_htonl>
 8010ac8:	4604      	mov	r4, r0
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	891b      	ldrh	r3, [r3, #8]
 8010ace:	461d      	mov	r5, r3
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	899b      	ldrh	r3, [r3, #12]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f9 fc39 	bl	800a350 <lwip_htons>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	f003 0303 	and.w	r3, r3, #3
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d001      	beq.n	8010aee <tcp_rexmit_rto_prepare+0xba>
 8010aea:	2301      	movs	r3, #1
 8010aec:	e000      	b.n	8010af0 <tcp_rexmit_rto_prepare+0xbc>
 8010aee:	2300      	movs	r3, #0
 8010af0:	442b      	add	r3, r5
 8010af2:	18e2      	adds	r2, r4, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8010afe:	2300      	movs	r3, #0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bdb0      	pop	{r4, r5, r7, pc}
 8010b08:	080170b8 	.word	0x080170b8
 8010b0c:	080176f4 	.word	0x080176f4
 8010b10:	0801710c 	.word	0x0801710c

08010b14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d106      	bne.n	8010b30 <tcp_rexmit_rto_commit+0x1c>
 8010b22:	4b0d      	ldr	r3, [pc, #52]	@ (8010b58 <tcp_rexmit_rto_commit+0x44>)
 8010b24:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010b28:	490c      	ldr	r1, [pc, #48]	@ (8010b5c <tcp_rexmit_rto_commit+0x48>)
 8010b2a:	480d      	ldr	r0, [pc, #52]	@ (8010b60 <tcp_rexmit_rto_commit+0x4c>)
 8010b2c:	f003 ff52 	bl	80149d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b36:	2bff      	cmp	r3, #255	@ 0xff
 8010b38:	d007      	beq.n	8010b4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b40:	3301      	adds	r3, #1
 8010b42:	b2da      	uxtb	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7ff fc7e 	bl	801044c <tcp_output>
}
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	080170b8 	.word	0x080170b8
 8010b5c:	08017718 	.word	0x08017718
 8010b60:	0801710c 	.word	0x0801710c

08010b64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d106      	bne.n	8010b80 <tcp_rexmit_rto+0x1c>
 8010b72:	4b0a      	ldr	r3, [pc, #40]	@ (8010b9c <tcp_rexmit_rto+0x38>)
 8010b74:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8010b78:	4909      	ldr	r1, [pc, #36]	@ (8010ba0 <tcp_rexmit_rto+0x3c>)
 8010b7a:	480a      	ldr	r0, [pc, #40]	@ (8010ba4 <tcp_rexmit_rto+0x40>)
 8010b7c:	f003 ff2a 	bl	80149d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff ff57 	bl	8010a34 <tcp_rexmit_rto_prepare>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d102      	bne.n	8010b92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f7ff ffc1 	bl	8010b14 <tcp_rexmit_rto_commit>
  }
}
 8010b92:	bf00      	nop
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	080170b8 	.word	0x080170b8
 8010ba0:	0801773c 	.word	0x0801773c
 8010ba4:	0801710c 	.word	0x0801710c

08010ba8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010ba8:	b590      	push	{r4, r7, lr}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d106      	bne.n	8010bc4 <tcp_rexmit+0x1c>
 8010bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8010c74 <tcp_rexmit+0xcc>)
 8010bb8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010bbc:	492e      	ldr	r1, [pc, #184]	@ (8010c78 <tcp_rexmit+0xd0>)
 8010bbe:	482f      	ldr	r0, [pc, #188]	@ (8010c7c <tcp_rexmit+0xd4>)
 8010bc0:	f003 ff08 	bl	80149d4 <iprintf>

  if (pcb->unacked == NULL) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d102      	bne.n	8010bd2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010bcc:	f06f 0305 	mvn.w	r3, #5
 8010bd0:	e04c      	b.n	8010c6c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bd6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010bd8:	68b8      	ldr	r0, [r7, #8]
 8010bda:	f7ff fe2b 	bl	8010834 <tcp_output_segment_busy>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010be4:	f06f 0305 	mvn.w	r3, #5
 8010be8:	e040      	b.n	8010c6c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	336c      	adds	r3, #108	@ 0x6c
 8010bf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010bf8:	e002      	b.n	8010c00 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d011      	beq.n	8010c2c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f9 fbb2 	bl	800a37a <lwip_htonl>
 8010c16:	4604      	mov	r4, r0
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7f9 fbab 	bl	800a37a <lwip_htonl>
 8010c24:	4603      	mov	r3, r0
 8010c26:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dbe6      	blt.n	8010bfa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	68ba      	ldr	r2, [r7, #8]
 8010c38:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d103      	bne.n	8010c4a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c50:	2bff      	cmp	r3, #255	@ 0xff
 8010c52:	d007      	beq.n	8010c64 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd90      	pop	{r4, r7, pc}
 8010c74:	080170b8 	.word	0x080170b8
 8010c78:	08017758 	.word	0x08017758
 8010c7c:	0801710c 	.word	0x0801710c

08010c80 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d106      	bne.n	8010c9c <tcp_rexmit_fast+0x1c>
 8010c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8010d38 <tcp_rexmit_fast+0xb8>)
 8010c90:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010c94:	4929      	ldr	r1, [pc, #164]	@ (8010d3c <tcp_rexmit_fast+0xbc>)
 8010c96:	482a      	ldr	r0, [pc, #168]	@ (8010d40 <tcp_rexmit_fast+0xc0>)
 8010c98:	f003 fe9c 	bl	80149d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d045      	beq.n	8010d30 <tcp_rexmit_fast+0xb0>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	8b5b      	ldrh	r3, [r3, #26]
 8010ca8:	f003 0304 	and.w	r3, r3, #4
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d13f      	bne.n	8010d30 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f7ff ff79 	bl	8010ba8 <tcp_rexmit>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d139      	bne.n	8010d30 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	bf28      	it	cs
 8010ccc:	4613      	movcs	r3, r2
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	da00      	bge.n	8010cd6 <tcp_rexmit_fast+0x56>
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	105b      	asrs	r3, r3, #1
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010cec:	005b      	lsls	r3, r3, #1
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d206      	bcs.n	8010d00 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010cf6:	005b      	lsls	r3, r3, #1
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	0049      	lsls	r1, r1, #1
 8010d0e:	440b      	add	r3, r1
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	4413      	add	r3, r2
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	8b5b      	ldrh	r3, [r3, #26]
 8010d20:	f043 0304 	orr.w	r3, r3, #4
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010d30:	bf00      	nop
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	080170b8 	.word	0x080170b8
 8010d3c:	08017770 	.word	0x08017770
 8010d40:	0801710c 	.word	0x0801710c

08010d44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b086      	sub	sp, #24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	607b      	str	r3, [r7, #4]
 8010d4e:	460b      	mov	r3, r1
 8010d50:	817b      	strh	r3, [r7, #10]
 8010d52:	4613      	mov	r3, r2
 8010d54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010d56:	897a      	ldrh	r2, [r7, #10]
 8010d58:	893b      	ldrh	r3, [r7, #8]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	3314      	adds	r3, #20
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010d66:	4619      	mov	r1, r3
 8010d68:	2022      	movs	r0, #34	@ 0x22
 8010d6a:	f7fa fbff 	bl	800b56c <pbuf_alloc>
 8010d6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d04d      	beq.n	8010e12 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010d76:	897b      	ldrh	r3, [r7, #10]
 8010d78:	3313      	adds	r3, #19
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	8952      	ldrh	r2, [r2, #10]
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	db06      	blt.n	8010d90 <tcp_output_alloc_header_common+0x4c>
 8010d82:	4b26      	ldr	r3, [pc, #152]	@ (8010e1c <tcp_output_alloc_header_common+0xd8>)
 8010d84:	f240 7223 	movw	r2, #1827	@ 0x723
 8010d88:	4925      	ldr	r1, [pc, #148]	@ (8010e20 <tcp_output_alloc_header_common+0xdc>)
 8010d8a:	4826      	ldr	r0, [pc, #152]	@ (8010e24 <tcp_output_alloc_header_common+0xe0>)
 8010d8c:	f003 fe22 	bl	80149d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010d96:	8c3b      	ldrh	r3, [r7, #32]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7f9 fad9 	bl	800a350 <lwip_htons>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	461a      	mov	r2, r3
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010da6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7f9 fad1 	bl	800a350 <lwip_htons>
 8010dae:	4603      	mov	r3, r0
 8010db0:	461a      	mov	r2, r3
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f7f9 fadc 	bl	800a37a <lwip_htonl>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010dc8:	897b      	ldrh	r3, [r7, #10]
 8010dca:	089b      	lsrs	r3, r3, #2
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	3305      	adds	r3, #5
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	031b      	lsls	r3, r3, #12
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010dda:	b29b      	uxth	r3, r3
 8010ddc:	4313      	orrs	r3, r2
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f9 fab5 	bl	800a350 <lwip_htons>
 8010de6:	4603      	mov	r3, r0
 8010de8:	461a      	mov	r2, r3
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010dee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f9 faad 	bl	800a350 <lwip_htons>
 8010df6:	4603      	mov	r3, r0
 8010df8:	461a      	mov	r2, r3
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	2200      	movs	r2, #0
 8010e02:	741a      	strb	r2, [r3, #16]
 8010e04:	2200      	movs	r2, #0
 8010e06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	749a      	strb	r2, [r3, #18]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010e12:	697b      	ldr	r3, [r7, #20]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3718      	adds	r7, #24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	080170b8 	.word	0x080170b8
 8010e20:	08017790 	.word	0x08017790
 8010e24:	0801710c 	.word	0x0801710c

08010e28 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010e28:	b5b0      	push	{r4, r5, r7, lr}
 8010e2a:	b08a      	sub	sp, #40	@ 0x28
 8010e2c:	af04      	add	r7, sp, #16
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	607b      	str	r3, [r7, #4]
 8010e32:	460b      	mov	r3, r1
 8010e34:	817b      	strh	r3, [r7, #10]
 8010e36:	4613      	mov	r3, r2
 8010e38:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d106      	bne.n	8010e4e <tcp_output_alloc_header+0x26>
 8010e40:	4b15      	ldr	r3, [pc, #84]	@ (8010e98 <tcp_output_alloc_header+0x70>)
 8010e42:	f240 7242 	movw	r2, #1858	@ 0x742
 8010e46:	4915      	ldr	r1, [pc, #84]	@ (8010e9c <tcp_output_alloc_header+0x74>)
 8010e48:	4815      	ldr	r0, [pc, #84]	@ (8010ea0 <tcp_output_alloc_header+0x78>)
 8010e4a:	f003 fdc3 	bl	80149d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	8adb      	ldrh	r3, [r3, #22]
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	8b12      	ldrh	r2, [r2, #24]
 8010e5a:	68f9      	ldr	r1, [r7, #12]
 8010e5c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010e5e:	893d      	ldrh	r5, [r7, #8]
 8010e60:	897c      	ldrh	r4, [r7, #10]
 8010e62:	9103      	str	r1, [sp, #12]
 8010e64:	2110      	movs	r1, #16
 8010e66:	9102      	str	r1, [sp, #8]
 8010e68:	9201      	str	r2, [sp, #4]
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	462a      	mov	r2, r5
 8010e70:	4621      	mov	r1, r4
 8010e72:	f7ff ff67 	bl	8010d44 <tcp_output_alloc_header_common>
 8010e76:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d006      	beq.n	8010e8c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010e86:	441a      	add	r2, r3
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010e8c:	697b      	ldr	r3, [r7, #20]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3718      	adds	r7, #24
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bdb0      	pop	{r4, r5, r7, pc}
 8010e96:	bf00      	nop
 8010e98:	080170b8 	.word	0x080170b8
 8010e9c:	080177c0 	.word	0x080177c0
 8010ea0:	0801710c 	.word	0x0801710c

08010ea4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b088      	sub	sp, #32
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	60b9      	str	r1, [r7, #8]
 8010eae:	4611      	mov	r1, r2
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	71fb      	strb	r3, [r7, #7]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d106      	bne.n	8010ed2 <tcp_output_fill_options+0x2e>
 8010ec4:	4b12      	ldr	r3, [pc, #72]	@ (8010f10 <tcp_output_fill_options+0x6c>)
 8010ec6:	f240 7256 	movw	r2, #1878	@ 0x756
 8010eca:	4912      	ldr	r1, [pc, #72]	@ (8010f14 <tcp_output_fill_options+0x70>)
 8010ecc:	4812      	ldr	r0, [pc, #72]	@ (8010f18 <tcp_output_fill_options+0x74>)
 8010ece:	f003 fd81 	bl	80149d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	3314      	adds	r3, #20
 8010edc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010ede:	8bfb      	ldrh	r3, [r7, #30]
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	79fb      	ldrb	r3, [r7, #7]
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	f003 0304 	and.w	r3, r3, #4
 8010eec:	4413      	add	r3, r2
 8010eee:	3314      	adds	r3, #20
 8010ef0:	69ba      	ldr	r2, [r7, #24]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	697a      	ldr	r2, [r7, #20]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d006      	beq.n	8010f08 <tcp_output_fill_options+0x64>
 8010efa:	4b05      	ldr	r3, [pc, #20]	@ (8010f10 <tcp_output_fill_options+0x6c>)
 8010efc:	f240 7275 	movw	r2, #1909	@ 0x775
 8010f00:	4906      	ldr	r1, [pc, #24]	@ (8010f1c <tcp_output_fill_options+0x78>)
 8010f02:	4805      	ldr	r0, [pc, #20]	@ (8010f18 <tcp_output_fill_options+0x74>)
 8010f04:	f003 fd66 	bl	80149d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010f08:	bf00      	nop
 8010f0a:	3720      	adds	r7, #32
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	080170b8 	.word	0x080170b8
 8010f14:	080177e8 	.word	0x080177e8
 8010f18:	0801710c 	.word	0x0801710c
 8010f1c:	080176e0 	.word	0x080176e0

08010f20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b08a      	sub	sp, #40	@ 0x28
 8010f24:	af04      	add	r7, sp, #16
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	607a      	str	r2, [r7, #4]
 8010f2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d106      	bne.n	8010f42 <tcp_output_control_segment+0x22>
 8010f34:	4b1c      	ldr	r3, [pc, #112]	@ (8010fa8 <tcp_output_control_segment+0x88>)
 8010f36:	f240 7287 	movw	r2, #1927	@ 0x787
 8010f3a:	491c      	ldr	r1, [pc, #112]	@ (8010fac <tcp_output_control_segment+0x8c>)
 8010f3c:	481c      	ldr	r0, [pc, #112]	@ (8010fb0 <tcp_output_control_segment+0x90>)
 8010f3e:	f003 fd49 	bl	80149d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010f42:	683a      	ldr	r2, [r7, #0]
 8010f44:	6879      	ldr	r1, [r7, #4]
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f7fe ff42 	bl	800fdd0 <tcp_route>
 8010f4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d102      	bne.n	8010f5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010f54:	23fc      	movs	r3, #252	@ 0xfc
 8010f56:	75fb      	strb	r3, [r7, #23]
 8010f58:	e01c      	b.n	8010f94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d006      	beq.n	8010f6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	7adb      	ldrb	r3, [r3, #11]
 8010f64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	7a9b      	ldrb	r3, [r3, #10]
 8010f6a:	757b      	strb	r3, [r7, #21]
 8010f6c:	e003      	b.n	8010f76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010f6e:	23ff      	movs	r3, #255	@ 0xff
 8010f70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010f72:	2300      	movs	r3, #0
 8010f74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010f76:	7dba      	ldrb	r2, [r7, #22]
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	9302      	str	r3, [sp, #8]
 8010f7c:	2306      	movs	r3, #6
 8010f7e:	9301      	str	r3, [sp, #4]
 8010f80:	7d7b      	ldrb	r3, [r7, #21]
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	4613      	mov	r3, r2
 8010f86:	683a      	ldr	r2, [r7, #0]
 8010f88:	6879      	ldr	r1, [r7, #4]
 8010f8a:	68b8      	ldr	r0, [r7, #8]
 8010f8c:	f002 fa4e 	bl	801342c <ip4_output_if>
 8010f90:	4603      	mov	r3, r0
 8010f92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010f94:	68b8      	ldr	r0, [r7, #8]
 8010f96:	f7fa fdcd 	bl	800bb34 <pbuf_free>
  return err;
 8010f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3718      	adds	r7, #24
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	080170b8 	.word	0x080170b8
 8010fac:	08017810 	.word	0x08017810
 8010fb0:	0801710c 	.word	0x0801710c

08010fb4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010fb4:	b590      	push	{r4, r7, lr}
 8010fb6:	b08b      	sub	sp, #44	@ 0x2c
 8010fb8:	af04      	add	r7, sp, #16
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
 8010fc0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d106      	bne.n	8010fd6 <tcp_rst+0x22>
 8010fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8011048 <tcp_rst+0x94>)
 8010fca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010fce:	491f      	ldr	r1, [pc, #124]	@ (801104c <tcp_rst+0x98>)
 8010fd0:	481f      	ldr	r0, [pc, #124]	@ (8011050 <tcp_rst+0x9c>)
 8010fd2:	f003 fcff 	bl	80149d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d106      	bne.n	8010fea <tcp_rst+0x36>
 8010fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8011048 <tcp_rst+0x94>)
 8010fde:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010fe2:	491c      	ldr	r1, [pc, #112]	@ (8011054 <tcp_rst+0xa0>)
 8010fe4:	481a      	ldr	r0, [pc, #104]	@ (8011050 <tcp_rst+0x9c>)
 8010fe6:	f003 fcf5 	bl	80149d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fea:	2300      	movs	r3, #0
 8010fec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010fee:	f246 0308 	movw	r3, #24584	@ 0x6008
 8010ff2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010ff4:	7dfb      	ldrb	r3, [r7, #23]
 8010ff6:	b29c      	uxth	r4, r3
 8010ff8:	68b8      	ldr	r0, [r7, #8]
 8010ffa:	f7f9 f9be 	bl	800a37a <lwip_htonl>
 8010ffe:	4602      	mov	r2, r0
 8011000:	8abb      	ldrh	r3, [r7, #20]
 8011002:	9303      	str	r3, [sp, #12]
 8011004:	2314      	movs	r3, #20
 8011006:	9302      	str	r3, [sp, #8]
 8011008:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801100a:	9301      	str	r3, [sp, #4]
 801100c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	4613      	mov	r3, r2
 8011012:	2200      	movs	r2, #0
 8011014:	4621      	mov	r1, r4
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fe94 	bl	8010d44 <tcp_output_alloc_header_common>
 801101c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00c      	beq.n	801103e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011024:	7dfb      	ldrb	r3, [r7, #23]
 8011026:	2200      	movs	r2, #0
 8011028:	6939      	ldr	r1, [r7, #16]
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	f7ff ff3a 	bl	8010ea4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011032:	683a      	ldr	r2, [r7, #0]
 8011034:	6939      	ldr	r1, [r7, #16]
 8011036:	68f8      	ldr	r0, [r7, #12]
 8011038:	f7ff ff72 	bl	8010f20 <tcp_output_control_segment>
 801103c:	e000      	b.n	8011040 <tcp_rst+0x8c>
    return;
 801103e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011040:	371c      	adds	r7, #28
 8011042:	46bd      	mov	sp, r7
 8011044:	bd90      	pop	{r4, r7, pc}
 8011046:	bf00      	nop
 8011048:	080170b8 	.word	0x080170b8
 801104c:	0801783c 	.word	0x0801783c
 8011050:	0801710c 	.word	0x0801710c
 8011054:	08017858 	.word	0x08017858

08011058 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011058:	b590      	push	{r4, r7, lr}
 801105a:	b087      	sub	sp, #28
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011060:	2300      	movs	r3, #0
 8011062:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011064:	2300      	movs	r3, #0
 8011066:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d106      	bne.n	801107c <tcp_send_empty_ack+0x24>
 801106e:	4b28      	ldr	r3, [pc, #160]	@ (8011110 <tcp_send_empty_ack+0xb8>)
 8011070:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011074:	4927      	ldr	r1, [pc, #156]	@ (8011114 <tcp_send_empty_ack+0xbc>)
 8011076:	4828      	ldr	r0, [pc, #160]	@ (8011118 <tcp_send_empty_ack+0xc0>)
 8011078:	f003 fcac 	bl	80149d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801107c:	7dfb      	ldrb	r3, [r7, #23]
 801107e:	009b      	lsls	r3, r3, #2
 8011080:	b2db      	uxtb	r3, r3
 8011082:	f003 0304 	and.w	r3, r3, #4
 8011086:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011088:	7d7b      	ldrb	r3, [r7, #21]
 801108a:	b29c      	uxth	r4, r3
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011090:	4618      	mov	r0, r3
 8011092:	f7f9 f972 	bl	800a37a <lwip_htonl>
 8011096:	4603      	mov	r3, r0
 8011098:	2200      	movs	r2, #0
 801109a:	4621      	mov	r1, r4
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f7ff fec3 	bl	8010e28 <tcp_output_alloc_header>
 80110a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d109      	bne.n	80110be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	8b5b      	ldrh	r3, [r3, #26]
 80110ae:	f043 0303 	orr.w	r3, r3, #3
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80110b8:	f06f 0301 	mvn.w	r3, #1
 80110bc:	e023      	b.n	8011106 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80110be:	7dbb      	ldrb	r3, [r7, #22]
 80110c0:	7dfa      	ldrb	r2, [r7, #23]
 80110c2:	6939      	ldr	r1, [r7, #16]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7ff feed 	bl	8010ea4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	3304      	adds	r3, #4
 80110d0:	6939      	ldr	r1, [r7, #16]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f7ff ff24 	bl	8010f20 <tcp_output_control_segment>
 80110d8:	4603      	mov	r3, r0
 80110da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80110dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d007      	beq.n	80110f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	8b5b      	ldrh	r3, [r3, #26]
 80110e8:	f043 0303 	orr.w	r3, r3, #3
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	835a      	strh	r2, [r3, #26]
 80110f2:	e006      	b.n	8011102 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	8b5b      	ldrh	r3, [r3, #26]
 80110f8:	f023 0303 	bic.w	r3, r3, #3
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011106:	4618      	mov	r0, r3
 8011108:	371c      	adds	r7, #28
 801110a:	46bd      	mov	sp, r7
 801110c:	bd90      	pop	{r4, r7, pc}
 801110e:	bf00      	nop
 8011110:	080170b8 	.word	0x080170b8
 8011114:	08017874 	.word	0x08017874
 8011118:	0801710c 	.word	0x0801710c

0801111c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801111c:	b590      	push	{r4, r7, lr}
 801111e:	b087      	sub	sp, #28
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011124:	2300      	movs	r3, #0
 8011126:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d106      	bne.n	801113c <tcp_keepalive+0x20>
 801112e:	4b18      	ldr	r3, [pc, #96]	@ (8011190 <tcp_keepalive+0x74>)
 8011130:	f640 0224 	movw	r2, #2084	@ 0x824
 8011134:	4917      	ldr	r1, [pc, #92]	@ (8011194 <tcp_keepalive+0x78>)
 8011136:	4818      	ldr	r0, [pc, #96]	@ (8011198 <tcp_keepalive+0x7c>)
 8011138:	f003 fc4c 	bl	80149d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801113c:	7dfb      	ldrb	r3, [r7, #23]
 801113e:	b29c      	uxth	r4, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011144:	3b01      	subs	r3, #1
 8011146:	4618      	mov	r0, r3
 8011148:	f7f9 f917 	bl	800a37a <lwip_htonl>
 801114c:	4603      	mov	r3, r0
 801114e:	2200      	movs	r2, #0
 8011150:	4621      	mov	r1, r4
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f7ff fe68 	bl	8010e28 <tcp_output_alloc_header>
 8011158:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d102      	bne.n	8011166 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011160:	f04f 33ff 	mov.w	r3, #4294967295
 8011164:	e010      	b.n	8011188 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011166:	7dfb      	ldrb	r3, [r7, #23]
 8011168:	2200      	movs	r2, #0
 801116a:	6939      	ldr	r1, [r7, #16]
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f7ff fe99 	bl	8010ea4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	3304      	adds	r3, #4
 8011178:	6939      	ldr	r1, [r7, #16]
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff fed0 	bl	8010f20 <tcp_output_control_segment>
 8011180:	4603      	mov	r3, r0
 8011182:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011188:	4618      	mov	r0, r3
 801118a:	371c      	adds	r7, #28
 801118c:	46bd      	mov	sp, r7
 801118e:	bd90      	pop	{r4, r7, pc}
 8011190:	080170b8 	.word	0x080170b8
 8011194:	08017894 	.word	0x08017894
 8011198:	0801710c 	.word	0x0801710c

0801119c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801119c:	b590      	push	{r4, r7, lr}
 801119e:	b08b      	sub	sp, #44	@ 0x2c
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111a4:	2300      	movs	r3, #0
 80111a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d106      	bne.n	80111be <tcp_zero_window_probe+0x22>
 80111b0:	4b4c      	ldr	r3, [pc, #304]	@ (80112e4 <tcp_zero_window_probe+0x148>)
 80111b2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80111b6:	494c      	ldr	r1, [pc, #304]	@ (80112e8 <tcp_zero_window_probe+0x14c>)
 80111b8:	484c      	ldr	r0, [pc, #304]	@ (80112ec <tcp_zero_window_probe+0x150>)
 80111ba:	f003 fc0b 	bl	80149d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80111ca:	2300      	movs	r3, #0
 80111cc:	e086      	b.n	80112dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80111d4:	2bff      	cmp	r3, #255	@ 0xff
 80111d6:	d007      	beq.n	80111e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80111de:	3301      	adds	r3, #1
 80111e0:	b2da      	uxtb	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80111e8:	6a3b      	ldr	r3, [r7, #32]
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	899b      	ldrh	r3, [r3, #12]
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7f9 f8ad 	bl	800a350 <lwip_htons>
 80111f6:	4603      	mov	r3, r0
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	f003 0301 	and.w	r3, r3, #1
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d005      	beq.n	801120e <tcp_zero_window_probe+0x72>
 8011202:	6a3b      	ldr	r3, [r7, #32]
 8011204:	891b      	ldrh	r3, [r3, #8]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d101      	bne.n	801120e <tcp_zero_window_probe+0x72>
 801120a:	2301      	movs	r3, #1
 801120c:	e000      	b.n	8011210 <tcp_zero_window_probe+0x74>
 801120e:	2300      	movs	r3, #0
 8011210:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011212:	7ffb      	ldrb	r3, [r7, #31]
 8011214:	2b00      	cmp	r3, #0
 8011216:	bf0c      	ite	eq
 8011218:	2301      	moveq	r3, #1
 801121a:	2300      	movne	r3, #0
 801121c:	b2db      	uxtb	r3, r3
 801121e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011224:	b299      	uxth	r1, r3
 8011226:	6a3b      	ldr	r3, [r7, #32]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	8bba      	ldrh	r2, [r7, #28]
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7ff fdfa 	bl	8010e28 <tcp_output_alloc_header>
 8011234:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d102      	bne.n	8011242 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801123c:	f04f 33ff 	mov.w	r3, #4294967295
 8011240:	e04c      	b.n	80112dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011248:	7ffb      	ldrb	r3, [r7, #31]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d011      	beq.n	8011272 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	899b      	ldrh	r3, [r3, #12]
 8011252:	b29b      	uxth	r3, r3
 8011254:	b21b      	sxth	r3, r3
 8011256:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801125a:	b21c      	sxth	r4, r3
 801125c:	2011      	movs	r0, #17
 801125e:	f7f9 f877 	bl	800a350 <lwip_htons>
 8011262:	4603      	mov	r3, r0
 8011264:	b21b      	sxth	r3, r3
 8011266:	4323      	orrs	r3, r4
 8011268:	b21b      	sxth	r3, r3
 801126a:	b29a      	uxth	r2, r3
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	819a      	strh	r2, [r3, #12]
 8011270:	e010      	b.n	8011294 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	3314      	adds	r3, #20
 8011278:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801127a:	6a3b      	ldr	r3, [r7, #32]
 801127c:	6858      	ldr	r0, [r3, #4]
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	891a      	ldrh	r2, [r3, #8]
 8011284:	6a3b      	ldr	r3, [r7, #32]
 8011286:	891b      	ldrh	r3, [r3, #8]
 8011288:	1ad3      	subs	r3, r2, r3
 801128a:	b29b      	uxth	r3, r3
 801128c:	2201      	movs	r2, #1
 801128e:	6939      	ldr	r1, [r7, #16]
 8011290:	f7fa fe56 	bl	800bf40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	4618      	mov	r0, r3
 801129c:	f7f9 f86d 	bl	800a37a <lwip_htonl>
 80112a0:	4603      	mov	r3, r0
 80112a2:	3301      	adds	r3, #1
 80112a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	da02      	bge.n	80112b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	68fa      	ldr	r2, [r7, #12]
 80112b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80112b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112bc:	2200      	movs	r2, #0
 80112be:	69b9      	ldr	r1, [r7, #24]
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7ff fdef 	bl	8010ea4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	3304      	adds	r3, #4
 80112cc:	69b9      	ldr	r1, [r7, #24]
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f7ff fe26 	bl	8010f20 <tcp_output_control_segment>
 80112d4:	4603      	mov	r3, r0
 80112d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80112d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80112dc:	4618      	mov	r0, r3
 80112de:	372c      	adds	r7, #44	@ 0x2c
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd90      	pop	{r4, r7, pc}
 80112e4:	080170b8 	.word	0x080170b8
 80112e8:	080178b0 	.word	0x080178b0
 80112ec:	0801710c 	.word	0x0801710c

080112f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80112f8:	f7fa ff10 	bl	800c11c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80112fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011328 <tcpip_tcp_timer+0x38>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <tcpip_tcp_timer+0x1c>
 8011304:	4b09      	ldr	r3, [pc, #36]	@ (801132c <tcpip_tcp_timer+0x3c>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d005      	beq.n	8011318 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801130c:	2200      	movs	r2, #0
 801130e:	4908      	ldr	r1, [pc, #32]	@ (8011330 <tcpip_tcp_timer+0x40>)
 8011310:	20fa      	movs	r0, #250	@ 0xfa
 8011312:	f000 f8f3 	bl	80114fc <sys_timeout>
 8011316:	e003      	b.n	8011320 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011318:	4b06      	ldr	r3, [pc, #24]	@ (8011334 <tcpip_tcp_timer+0x44>)
 801131a:	2200      	movs	r2, #0
 801131c:	601a      	str	r2, [r3, #0]
  }
}
 801131e:	bf00      	nop
 8011320:	bf00      	nop
 8011322:	3708      	adds	r7, #8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	2000d7f0 	.word	0x2000d7f0
 801132c:	2000d7f4 	.word	0x2000d7f4
 8011330:	080112f1 	.word	0x080112f1
 8011334:	2000d83c 	.word	0x2000d83c

08011338 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801133c:	4b0a      	ldr	r3, [pc, #40]	@ (8011368 <tcp_timer_needed+0x30>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10f      	bne.n	8011364 <tcp_timer_needed+0x2c>
 8011344:	4b09      	ldr	r3, [pc, #36]	@ (801136c <tcp_timer_needed+0x34>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d103      	bne.n	8011354 <tcp_timer_needed+0x1c>
 801134c:	4b08      	ldr	r3, [pc, #32]	@ (8011370 <tcp_timer_needed+0x38>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d007      	beq.n	8011364 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011354:	4b04      	ldr	r3, [pc, #16]	@ (8011368 <tcp_timer_needed+0x30>)
 8011356:	2201      	movs	r2, #1
 8011358:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801135a:	2200      	movs	r2, #0
 801135c:	4905      	ldr	r1, [pc, #20]	@ (8011374 <tcp_timer_needed+0x3c>)
 801135e:	20fa      	movs	r0, #250	@ 0xfa
 8011360:	f000 f8cc 	bl	80114fc <sys_timeout>
  }
}
 8011364:	bf00      	nop
 8011366:	bd80      	pop	{r7, pc}
 8011368:	2000d83c 	.word	0x2000d83c
 801136c:	2000d7f0 	.word	0x2000d7f0
 8011370:	2000d7f4 	.word	0x2000d7f4
 8011374:	080112f1 	.word	0x080112f1

08011378 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011384:	200a      	movs	r0, #10
 8011386:	f7f9 fcbb 	bl	800ad00 <memp_malloc>
 801138a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d109      	bne.n	80113a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d151      	bne.n	801143c <sys_timeout_abs+0xc4>
 8011398:	4b2a      	ldr	r3, [pc, #168]	@ (8011444 <sys_timeout_abs+0xcc>)
 801139a:	22be      	movs	r2, #190	@ 0xbe
 801139c:	492a      	ldr	r1, [pc, #168]	@ (8011448 <sys_timeout_abs+0xd0>)
 801139e:	482b      	ldr	r0, [pc, #172]	@ (801144c <sys_timeout_abs+0xd4>)
 80113a0:	f003 fb18 	bl	80149d4 <iprintf>
    return;
 80113a4:	e04a      	b.n	801143c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	2200      	movs	r2, #0
 80113aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	68ba      	ldr	r2, [r7, #8]
 80113b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80113be:	4b24      	ldr	r3, [pc, #144]	@ (8011450 <sys_timeout_abs+0xd8>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d103      	bne.n	80113ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80113c6:	4a22      	ldr	r2, [pc, #136]	@ (8011450 <sys_timeout_abs+0xd8>)
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	6013      	str	r3, [r2, #0]
    return;
 80113cc:	e037      	b.n	801143e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	685a      	ldr	r2, [r3, #4]
 80113d2:	4b1f      	ldr	r3, [pc, #124]	@ (8011450 <sys_timeout_abs+0xd8>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	0fdb      	lsrs	r3, r3, #31
 80113dc:	f003 0301 	and.w	r3, r3, #1
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d007      	beq.n	80113f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80113e6:	4b1a      	ldr	r3, [pc, #104]	@ (8011450 <sys_timeout_abs+0xd8>)
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80113ee:	4a18      	ldr	r2, [pc, #96]	@ (8011450 <sys_timeout_abs+0xd8>)
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	6013      	str	r3, [r2, #0]
 80113f4:	e023      	b.n	801143e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80113f6:	4b16      	ldr	r3, [pc, #88]	@ (8011450 <sys_timeout_abs+0xd8>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	617b      	str	r3, [r7, #20]
 80113fc:	e01a      	b.n	8011434 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d00b      	beq.n	801141e <sys_timeout_abs+0xa6>
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	685a      	ldr	r2, [r3, #4]
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	1ad3      	subs	r3, r2, r3
 8011412:	0fdb      	lsrs	r3, r3, #31
 8011414:	f003 0301 	and.w	r3, r3, #1
 8011418:	b2db      	uxtb	r3, r3
 801141a:	2b00      	cmp	r3, #0
 801141c:	d007      	beq.n	801142e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	681a      	ldr	r2, [r3, #0]
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	693a      	ldr	r2, [r7, #16]
 801142a:	601a      	str	r2, [r3, #0]
        break;
 801142c:	e007      	b.n	801143e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	617b      	str	r3, [r7, #20]
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1e1      	bne.n	80113fe <sys_timeout_abs+0x86>
 801143a:	e000      	b.n	801143e <sys_timeout_abs+0xc6>
    return;
 801143c:	bf00      	nop
      }
    }
  }
}
 801143e:	3718      	adds	r7, #24
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	080178d4 	.word	0x080178d4
 8011448:	08017908 	.word	0x08017908
 801144c:	08017948 	.word	0x08017948
 8011450:	2000d834 	.word	0x2000d834

08011454 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b086      	sub	sp, #24
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	4798      	blx	r3

  now = sys_now();
 8011466:	f7f5 fb41 	bl	8006aec <sys_now>
 801146a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	4b0f      	ldr	r3, [pc, #60]	@ (80114b0 <lwip_cyclic_timer+0x5c>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4413      	add	r3, r2
 8011476:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	0fdb      	lsrs	r3, r3, #31
 8011480:	f003 0301 	and.w	r3, r3, #1
 8011484:	b2db      	uxtb	r3, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	d009      	beq.n	801149e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	4413      	add	r3, r2
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	4907      	ldr	r1, [pc, #28]	@ (80114b4 <lwip_cyclic_timer+0x60>)
 8011496:	4618      	mov	r0, r3
 8011498:	f7ff ff6e 	bl	8011378 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801149c:	e004      	b.n	80114a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	4904      	ldr	r1, [pc, #16]	@ (80114b4 <lwip_cyclic_timer+0x60>)
 80114a2:	68f8      	ldr	r0, [r7, #12]
 80114a4:	f7ff ff68 	bl	8011378 <sys_timeout_abs>
}
 80114a8:	bf00      	nop
 80114aa:	3718      	adds	r7, #24
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	2000d838 	.word	0x2000d838
 80114b4:	08011455 	.word	0x08011455

080114b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114be:	2301      	movs	r3, #1
 80114c0:	607b      	str	r3, [r7, #4]
 80114c2:	e00e      	b.n	80114e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80114c4:	4a0b      	ldr	r2, [pc, #44]	@ (80114f4 <sys_timeouts_init+0x3c>)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	4a08      	ldr	r2, [pc, #32]	@ (80114f4 <sys_timeouts_init+0x3c>)
 80114d2:	4413      	add	r3, r2
 80114d4:	461a      	mov	r2, r3
 80114d6:	4908      	ldr	r1, [pc, #32]	@ (80114f8 <sys_timeouts_init+0x40>)
 80114d8:	f000 f810 	bl	80114fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	3301      	adds	r3, #1
 80114e0:	607b      	str	r3, [r7, #4]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b02      	cmp	r3, #2
 80114e6:	d9ed      	bls.n	80114c4 <sys_timeouts_init+0xc>
  }
}
 80114e8:	bf00      	nop
 80114ea:	bf00      	nop
 80114ec:	3708      	adds	r7, #8
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	08018500 	.word	0x08018500
 80114f8:	08011455 	.word	0x08011455

080114fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b086      	sub	sp, #24
 8011500:	af00      	add	r7, sp, #0
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801150e:	d306      	bcc.n	801151e <sys_timeout+0x22>
 8011510:	4b0a      	ldr	r3, [pc, #40]	@ (801153c <sys_timeout+0x40>)
 8011512:	f240 1229 	movw	r2, #297	@ 0x129
 8011516:	490a      	ldr	r1, [pc, #40]	@ (8011540 <sys_timeout+0x44>)
 8011518:	480a      	ldr	r0, [pc, #40]	@ (8011544 <sys_timeout+0x48>)
 801151a:	f003 fa5b 	bl	80149d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801151e:	f7f5 fae5 	bl	8006aec <sys_now>
 8011522:	4602      	mov	r2, r0
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	4413      	add	r3, r2
 8011528:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	68b9      	ldr	r1, [r7, #8]
 801152e:	6978      	ldr	r0, [r7, #20]
 8011530:	f7ff ff22 	bl	8011378 <sys_timeout_abs>
#endif
}
 8011534:	bf00      	nop
 8011536:	3718      	adds	r7, #24
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	080178d4 	.word	0x080178d4
 8011540:	08017970 	.word	0x08017970
 8011544:	08017948 	.word	0x08017948

08011548 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b084      	sub	sp, #16
 801154c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801154e:	f7f5 facd 	bl	8006aec <sys_now>
 8011552:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011554:	4b17      	ldr	r3, [pc, #92]	@ (80115b4 <sys_check_timeouts+0x6c>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d022      	beq.n	80115a6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	68fa      	ldr	r2, [r7, #12]
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	0fdb      	lsrs	r3, r3, #31
 801156a:	f003 0301 	and.w	r3, r3, #1
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b00      	cmp	r3, #0
 8011572:	d11a      	bne.n	80115aa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4a0e      	ldr	r2, [pc, #56]	@ (80115b4 <sys_check_timeouts+0x6c>)
 801157a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	689b      	ldr	r3, [r3, #8]
 8011580:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	4a0a      	ldr	r2, [pc, #40]	@ (80115b8 <sys_check_timeouts+0x70>)
 801158e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011590:	68b9      	ldr	r1, [r7, #8]
 8011592:	200a      	movs	r0, #10
 8011594:	f7f9 fc2a 	bl	800adec <memp_free>
    if (handler != NULL) {
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d0da      	beq.n	8011554 <sys_check_timeouts+0xc>
      handler(arg);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6838      	ldr	r0, [r7, #0]
 80115a2:	4798      	blx	r3
  do {
 80115a4:	e7d6      	b.n	8011554 <sys_check_timeouts+0xc>
      return;
 80115a6:	bf00      	nop
 80115a8:	e000      	b.n	80115ac <sys_check_timeouts+0x64>
      return;
 80115aa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	2000d834 	.word	0x2000d834
 80115b8:	2000d838 	.word	0x2000d838

080115bc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80115c2:	4b16      	ldr	r3, [pc, #88]	@ (801161c <sys_timeouts_sleeptime+0x60>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d102      	bne.n	80115d0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80115ca:	f04f 33ff 	mov.w	r3, #4294967295
 80115ce:	e020      	b.n	8011612 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80115d0:	f7f5 fa8c 	bl	8006aec <sys_now>
 80115d4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80115d6:	4b11      	ldr	r3, [pc, #68]	@ (801161c <sys_timeouts_sleeptime+0x60>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	685a      	ldr	r2, [r3, #4]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	1ad3      	subs	r3, r2, r3
 80115e0:	0fdb      	lsrs	r3, r3, #31
 80115e2:	f003 0301 	and.w	r3, r3, #1
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80115ec:	2300      	movs	r3, #0
 80115ee:	e010      	b.n	8011612 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80115f0:	4b0a      	ldr	r3, [pc, #40]	@ (801161c <sys_timeouts_sleeptime+0x60>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	685a      	ldr	r2, [r3, #4]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	da06      	bge.n	8011610 <sys_timeouts_sleeptime+0x54>
 8011602:	4b07      	ldr	r3, [pc, #28]	@ (8011620 <sys_timeouts_sleeptime+0x64>)
 8011604:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011608:	4906      	ldr	r1, [pc, #24]	@ (8011624 <sys_timeouts_sleeptime+0x68>)
 801160a:	4807      	ldr	r0, [pc, #28]	@ (8011628 <sys_timeouts_sleeptime+0x6c>)
 801160c:	f003 f9e2 	bl	80149d4 <iprintf>
    return ret;
 8011610:	683b      	ldr	r3, [r7, #0]
  }
}
 8011612:	4618      	mov	r0, r3
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	2000d834 	.word	0x2000d834
 8011620:	080178d4 	.word	0x080178d4
 8011624:	080179a8 	.word	0x080179a8
 8011628:	08017948 	.word	0x08017948

0801162c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011630:	f003 f8d0 	bl	80147d4 <rand>
 8011634:	4603      	mov	r3, r0
 8011636:	b29b      	uxth	r3, r3
 8011638:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801163c:	b29b      	uxth	r3, r3
 801163e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011642:	b29a      	uxth	r2, r3
 8011644:	4b01      	ldr	r3, [pc, #4]	@ (801164c <udp_init+0x20>)
 8011646:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011648:	bf00      	nop
 801164a:	bd80      	pop	{r7, pc}
 801164c:	2000002c 	.word	0x2000002c

08011650 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011656:	2300      	movs	r3, #0
 8011658:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801165a:	4b17      	ldr	r3, [pc, #92]	@ (80116b8 <udp_new_port+0x68>)
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	1c5a      	adds	r2, r3, #1
 8011660:	b291      	uxth	r1, r2
 8011662:	4a15      	ldr	r2, [pc, #84]	@ (80116b8 <udp_new_port+0x68>)
 8011664:	8011      	strh	r1, [r2, #0]
 8011666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801166a:	4293      	cmp	r3, r2
 801166c:	d103      	bne.n	8011676 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801166e:	4b12      	ldr	r3, [pc, #72]	@ (80116b8 <udp_new_port+0x68>)
 8011670:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011674:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011676:	4b11      	ldr	r3, [pc, #68]	@ (80116bc <udp_new_port+0x6c>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	603b      	str	r3, [r7, #0]
 801167c:	e011      	b.n	80116a2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	8a5a      	ldrh	r2, [r3, #18]
 8011682:	4b0d      	ldr	r3, [pc, #52]	@ (80116b8 <udp_new_port+0x68>)
 8011684:	881b      	ldrh	r3, [r3, #0]
 8011686:	429a      	cmp	r2, r3
 8011688:	d108      	bne.n	801169c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801168a:	88fb      	ldrh	r3, [r7, #6]
 801168c:	3301      	adds	r3, #1
 801168e:	80fb      	strh	r3, [r7, #6]
 8011690:	88fb      	ldrh	r3, [r7, #6]
 8011692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011696:	d3e0      	bcc.n	801165a <udp_new_port+0xa>
        return 0;
 8011698:	2300      	movs	r3, #0
 801169a:	e007      	b.n	80116ac <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	603b      	str	r3, [r7, #0]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1ea      	bne.n	801167e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80116a8:	4b03      	ldr	r3, [pc, #12]	@ (80116b8 <udp_new_port+0x68>)
 80116aa:	881b      	ldrh	r3, [r3, #0]
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	370c      	adds	r7, #12
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr
 80116b8:	2000002c 	.word	0x2000002c
 80116bc:	2000d840 	.word	0x2000d840

080116c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	4613      	mov	r3, r2
 80116cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d105      	bne.n	80116e0 <udp_input_local_match+0x20>
 80116d4:	4b27      	ldr	r3, [pc, #156]	@ (8011774 <udp_input_local_match+0xb4>)
 80116d6:	2287      	movs	r2, #135	@ 0x87
 80116d8:	4927      	ldr	r1, [pc, #156]	@ (8011778 <udp_input_local_match+0xb8>)
 80116da:	4828      	ldr	r0, [pc, #160]	@ (801177c <udp_input_local_match+0xbc>)
 80116dc:	f003 f97a 	bl	80149d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d105      	bne.n	80116f2 <udp_input_local_match+0x32>
 80116e6:	4b23      	ldr	r3, [pc, #140]	@ (8011774 <udp_input_local_match+0xb4>)
 80116e8:	2288      	movs	r2, #136	@ 0x88
 80116ea:	4925      	ldr	r1, [pc, #148]	@ (8011780 <udp_input_local_match+0xc0>)
 80116ec:	4823      	ldr	r0, [pc, #140]	@ (801177c <udp_input_local_match+0xbc>)
 80116ee:	f003 f971 	bl	80149d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	7a1b      	ldrb	r3, [r3, #8]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d00b      	beq.n	8011712 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	7a1a      	ldrb	r2, [r3, #8]
 80116fe:	4b21      	ldr	r3, [pc, #132]	@ (8011784 <udp_input_local_match+0xc4>)
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011706:	3301      	adds	r3, #1
 8011708:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801170a:	429a      	cmp	r2, r3
 801170c:	d001      	beq.n	8011712 <udp_input_local_match+0x52>
    return 0;
 801170e:	2300      	movs	r3, #0
 8011710:	e02b      	b.n	801176a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011712:	79fb      	ldrb	r3, [r7, #7]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d018      	beq.n	801174a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d013      	beq.n	8011746 <udp_input_local_match+0x86>
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00f      	beq.n	8011746 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011726:	4b17      	ldr	r3, [pc, #92]	@ (8011784 <udp_input_local_match+0xc4>)
 8011728:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801172a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801172e:	d00a      	beq.n	8011746 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	4b13      	ldr	r3, [pc, #76]	@ (8011784 <udp_input_local_match+0xc4>)
 8011736:	695b      	ldr	r3, [r3, #20]
 8011738:	405a      	eors	r2, r3
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	3308      	adds	r3, #8
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011742:	2b00      	cmp	r3, #0
 8011744:	d110      	bne.n	8011768 <udp_input_local_match+0xa8>
          return 1;
 8011746:	2301      	movs	r3, #1
 8011748:	e00f      	b.n	801176a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d009      	beq.n	8011764 <udp_input_local_match+0xa4>
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d005      	beq.n	8011764 <udp_input_local_match+0xa4>
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	4b09      	ldr	r3, [pc, #36]	@ (8011784 <udp_input_local_match+0xc4>)
 801175e:	695b      	ldr	r3, [r3, #20]
 8011760:	429a      	cmp	r2, r3
 8011762:	d101      	bne.n	8011768 <udp_input_local_match+0xa8>
        return 1;
 8011764:	2301      	movs	r3, #1
 8011766:	e000      	b.n	801176a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011768:	2300      	movs	r3, #0
}
 801176a:	4618      	mov	r0, r3
 801176c:	3710      	adds	r7, #16
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	080179bc 	.word	0x080179bc
 8011778:	080179ec 	.word	0x080179ec
 801177c:	08017a10 	.word	0x08017a10
 8011780:	08017a38 	.word	0x08017a38
 8011784:	2000a090 	.word	0x2000a090

08011788 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011788:	b590      	push	{r4, r7, lr}
 801178a:	b08d      	sub	sp, #52	@ 0x34
 801178c:	af02      	add	r7, sp, #8
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011792:	2300      	movs	r3, #0
 8011794:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d105      	bne.n	80117a8 <udp_input+0x20>
 801179c:	4b7c      	ldr	r3, [pc, #496]	@ (8011990 <udp_input+0x208>)
 801179e:	22cf      	movs	r2, #207	@ 0xcf
 80117a0:	497c      	ldr	r1, [pc, #496]	@ (8011994 <udp_input+0x20c>)
 80117a2:	487d      	ldr	r0, [pc, #500]	@ (8011998 <udp_input+0x210>)
 80117a4:	f003 f916 	bl	80149d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d105      	bne.n	80117ba <udp_input+0x32>
 80117ae:	4b78      	ldr	r3, [pc, #480]	@ (8011990 <udp_input+0x208>)
 80117b0:	22d0      	movs	r2, #208	@ 0xd0
 80117b2:	497a      	ldr	r1, [pc, #488]	@ (801199c <udp_input+0x214>)
 80117b4:	4878      	ldr	r0, [pc, #480]	@ (8011998 <udp_input+0x210>)
 80117b6:	f003 f90d 	bl	80149d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	895b      	ldrh	r3, [r3, #10]
 80117be:	2b07      	cmp	r3, #7
 80117c0:	d803      	bhi.n	80117ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f7fa f9b6 	bl	800bb34 <pbuf_free>
    goto end;
 80117c8:	e0de      	b.n	8011988 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80117d0:	4b73      	ldr	r3, [pc, #460]	@ (80119a0 <udp_input+0x218>)
 80117d2:	695b      	ldr	r3, [r3, #20]
 80117d4:	4a72      	ldr	r2, [pc, #456]	@ (80119a0 <udp_input+0x218>)
 80117d6:	6812      	ldr	r2, [r2, #0]
 80117d8:	4611      	mov	r1, r2
 80117da:	4618      	mov	r0, r3
 80117dc:	f001 fefe 	bl	80135dc <ip4_addr_isbroadcast_u32>
 80117e0:	4603      	mov	r3, r0
 80117e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	881b      	ldrh	r3, [r3, #0]
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7f8 fdb0 	bl	800a350 <lwip_htons>
 80117f0:	4603      	mov	r3, r0
 80117f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	885b      	ldrh	r3, [r3, #2]
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7f8 fda8 	bl	800a350 <lwip_htons>
 8011800:	4603      	mov	r3, r0
 8011802:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011804:	2300      	movs	r3, #0
 8011806:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011808:	2300      	movs	r3, #0
 801180a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801180c:	2300      	movs	r3, #0
 801180e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011810:	4b64      	ldr	r3, [pc, #400]	@ (80119a4 <udp_input+0x21c>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	627b      	str	r3, [r7, #36]	@ 0x24
 8011816:	e054      	b.n	80118c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801181a:	8a5b      	ldrh	r3, [r3, #18]
 801181c:	89fa      	ldrh	r2, [r7, #14]
 801181e:	429a      	cmp	r2, r3
 8011820:	d14a      	bne.n	80118b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011822:	7cfb      	ldrb	r3, [r7, #19]
 8011824:	461a      	mov	r2, r3
 8011826:	6839      	ldr	r1, [r7, #0]
 8011828:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801182a:	f7ff ff49 	bl	80116c0 <udp_input_local_match>
 801182e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011830:	2b00      	cmp	r3, #0
 8011832:	d041      	beq.n	80118b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011836:	7c1b      	ldrb	r3, [r3, #16]
 8011838:	f003 0304 	and.w	r3, r3, #4
 801183c:	2b00      	cmp	r3, #0
 801183e:	d11d      	bne.n	801187c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011840:	69fb      	ldr	r3, [r7, #28]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d102      	bne.n	801184c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011848:	61fb      	str	r3, [r7, #28]
 801184a:	e017      	b.n	801187c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801184c:	7cfb      	ldrb	r3, [r7, #19]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d014      	beq.n	801187c <udp_input+0xf4>
 8011852:	4b53      	ldr	r3, [pc, #332]	@ (80119a0 <udp_input+0x218>)
 8011854:	695b      	ldr	r3, [r3, #20]
 8011856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801185a:	d10f      	bne.n	801187c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	3304      	adds	r3, #4
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	429a      	cmp	r2, r3
 8011868:	d008      	beq.n	801187c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	3304      	adds	r3, #4
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	429a      	cmp	r2, r3
 8011876:	d101      	bne.n	801187c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187e:	8a9b      	ldrh	r3, [r3, #20]
 8011880:	8a3a      	ldrh	r2, [r7, #16]
 8011882:	429a      	cmp	r2, r3
 8011884:	d118      	bne.n	80118b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011888:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801188a:	2b00      	cmp	r3, #0
 801188c:	d005      	beq.n	801189a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011890:	685a      	ldr	r2, [r3, #4]
 8011892:	4b43      	ldr	r3, [pc, #268]	@ (80119a0 <udp_input+0x218>)
 8011894:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011896:	429a      	cmp	r2, r3
 8011898:	d10e      	bne.n	80118b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801189a:	6a3b      	ldr	r3, [r7, #32]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d014      	beq.n	80118ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80118a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a2:	68da      	ldr	r2, [r3, #12]
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80118a8:	4b3e      	ldr	r3, [pc, #248]	@ (80119a4 <udp_input+0x21c>)
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80118b0:	4a3c      	ldr	r2, [pc, #240]	@ (80119a4 <udp_input+0x21c>)
 80118b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80118b6:	e008      	b.n	80118ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80118b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80118bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80118c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d1a7      	bne.n	8011818 <udp_input+0x90>
 80118c8:	e000      	b.n	80118cc <udp_input+0x144>
        break;
 80118ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80118cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d101      	bne.n	80118d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80118d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d002      	beq.n	80118e2 <udp_input+0x15a>
    for_us = 1;
 80118dc:	2301      	movs	r3, #1
 80118de:	76fb      	strb	r3, [r7, #27]
 80118e0:	e00a      	b.n	80118f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	3304      	adds	r3, #4
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	4b2d      	ldr	r3, [pc, #180]	@ (80119a0 <udp_input+0x218>)
 80118ea:	695b      	ldr	r3, [r3, #20]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	bf0c      	ite	eq
 80118f0:	2301      	moveq	r3, #1
 80118f2:	2300      	movne	r3, #0
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80118f8:	7efb      	ldrb	r3, [r7, #27]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d041      	beq.n	8011982 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80118fe:	2108      	movs	r1, #8
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7fa f891 	bl	800ba28 <pbuf_remove_header>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00a      	beq.n	8011922 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801190c:	4b20      	ldr	r3, [pc, #128]	@ (8011990 <udp_input+0x208>)
 801190e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011912:	4925      	ldr	r1, [pc, #148]	@ (80119a8 <udp_input+0x220>)
 8011914:	4820      	ldr	r0, [pc, #128]	@ (8011998 <udp_input+0x210>)
 8011916:	f003 f85d 	bl	80149d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7fa f90a 	bl	800bb34 <pbuf_free>
      goto end;
 8011920:	e032      	b.n	8011988 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011924:	2b00      	cmp	r3, #0
 8011926:	d012      	beq.n	801194e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801192a:	699b      	ldr	r3, [r3, #24]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00a      	beq.n	8011946 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011932:	699c      	ldr	r4, [r3, #24]
 8011934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011936:	69d8      	ldr	r0, [r3, #28]
 8011938:	8a3b      	ldrh	r3, [r7, #16]
 801193a:	9300      	str	r3, [sp, #0]
 801193c:	4b1b      	ldr	r3, [pc, #108]	@ (80119ac <udp_input+0x224>)
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011942:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011944:	e021      	b.n	801198a <udp_input+0x202>
        pbuf_free(p);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7fa f8f4 	bl	800bb34 <pbuf_free>
        goto end;
 801194c:	e01c      	b.n	8011988 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801194e:	7cfb      	ldrb	r3, [r7, #19]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d112      	bne.n	801197a <udp_input+0x1f2>
 8011954:	4b12      	ldr	r3, [pc, #72]	@ (80119a0 <udp_input+0x218>)
 8011956:	695b      	ldr	r3, [r3, #20]
 8011958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801195c:	2be0      	cmp	r3, #224	@ 0xe0
 801195e:	d00c      	beq.n	801197a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011960:	4b0f      	ldr	r3, [pc, #60]	@ (80119a0 <udp_input+0x218>)
 8011962:	899b      	ldrh	r3, [r3, #12]
 8011964:	3308      	adds	r3, #8
 8011966:	b29b      	uxth	r3, r3
 8011968:	b21b      	sxth	r3, r3
 801196a:	4619      	mov	r1, r3
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f7fa f8ce 	bl	800bb0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011972:	2103      	movs	r1, #3
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f001 fb11 	bl	8012f9c <icmp_dest_unreach>
      pbuf_free(p);
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f7fa f8da 	bl	800bb34 <pbuf_free>
  return;
 8011980:	e003      	b.n	801198a <udp_input+0x202>
    pbuf_free(p);
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f7fa f8d6 	bl	800bb34 <pbuf_free>
  return;
 8011988:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801198a:	372c      	adds	r7, #44	@ 0x2c
 801198c:	46bd      	mov	sp, r7
 801198e:	bd90      	pop	{r4, r7, pc}
 8011990:	080179bc 	.word	0x080179bc
 8011994:	08017a60 	.word	0x08017a60
 8011998:	08017a10 	.word	0x08017a10
 801199c:	08017a78 	.word	0x08017a78
 80119a0:	2000a090 	.word	0x2000a090
 80119a4:	2000d840 	.word	0x2000d840
 80119a8:	08017a94 	.word	0x08017a94
 80119ac:	2000a0a0 	.word	0x2000a0a0

080119b0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b088      	sub	sp, #32
 80119b4:	af02      	add	r7, sp, #8
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
 80119bc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d109      	bne.n	80119d8 <udp_sendto+0x28>
 80119c4:	4b23      	ldr	r3, [pc, #140]	@ (8011a54 <udp_sendto+0xa4>)
 80119c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80119ca:	4923      	ldr	r1, [pc, #140]	@ (8011a58 <udp_sendto+0xa8>)
 80119cc:	4823      	ldr	r0, [pc, #140]	@ (8011a5c <udp_sendto+0xac>)
 80119ce:	f003 f801 	bl	80149d4 <iprintf>
 80119d2:	f06f 030f 	mvn.w	r3, #15
 80119d6:	e038      	b.n	8011a4a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d109      	bne.n	80119f2 <udp_sendto+0x42>
 80119de:	4b1d      	ldr	r3, [pc, #116]	@ (8011a54 <udp_sendto+0xa4>)
 80119e0:	f240 2219 	movw	r2, #537	@ 0x219
 80119e4:	491e      	ldr	r1, [pc, #120]	@ (8011a60 <udp_sendto+0xb0>)
 80119e6:	481d      	ldr	r0, [pc, #116]	@ (8011a5c <udp_sendto+0xac>)
 80119e8:	f002 fff4 	bl	80149d4 <iprintf>
 80119ec:	f06f 030f 	mvn.w	r3, #15
 80119f0:	e02b      	b.n	8011a4a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d109      	bne.n	8011a0c <udp_sendto+0x5c>
 80119f8:	4b16      	ldr	r3, [pc, #88]	@ (8011a54 <udp_sendto+0xa4>)
 80119fa:	f240 221a 	movw	r2, #538	@ 0x21a
 80119fe:	4919      	ldr	r1, [pc, #100]	@ (8011a64 <udp_sendto+0xb4>)
 8011a00:	4816      	ldr	r0, [pc, #88]	@ (8011a5c <udp_sendto+0xac>)
 8011a02:	f002 ffe7 	bl	80149d4 <iprintf>
 8011a06:	f06f 030f 	mvn.w	r3, #15
 8011a0a:	e01e      	b.n	8011a4a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	7a1b      	ldrb	r3, [r3, #8]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d006      	beq.n	8011a22 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	7a1b      	ldrb	r3, [r3, #8]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7f9 fcfd 	bl	800b418 <netif_get_by_index>
 8011a1e:	6178      	str	r0, [r7, #20]
 8011a20:	e003      	b.n	8011a2a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f001 fb44 	bl	80130b0 <ip4_route>
 8011a28:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d102      	bne.n	8011a36 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011a30:	f06f 0303 	mvn.w	r3, #3
 8011a34:	e009      	b.n	8011a4a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011a36:	887a      	ldrh	r2, [r7, #2]
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	68b9      	ldr	r1, [r7, #8]
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	f000 f810 	bl	8011a68 <udp_sendto_if>
 8011a48:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3718      	adds	r7, #24
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	080179bc 	.word	0x080179bc
 8011a58:	08017ae0 	.word	0x08017ae0
 8011a5c:	08017a10 	.word	0x08017a10
 8011a60:	08017af8 	.word	0x08017af8
 8011a64:	08017b14 	.word	0x08017b14

08011a68 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b088      	sub	sp, #32
 8011a6c:	af02      	add	r7, sp, #8
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
 8011a74:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d109      	bne.n	8011a90 <udp_sendto_if+0x28>
 8011a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8011b38 <udp_sendto_if+0xd0>)
 8011a7e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a82:	492e      	ldr	r1, [pc, #184]	@ (8011b3c <udp_sendto_if+0xd4>)
 8011a84:	482e      	ldr	r0, [pc, #184]	@ (8011b40 <udp_sendto_if+0xd8>)
 8011a86:	f002 ffa5 	bl	80149d4 <iprintf>
 8011a8a:	f06f 030f 	mvn.w	r3, #15
 8011a8e:	e04f      	b.n	8011b30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d109      	bne.n	8011aaa <udp_sendto_if+0x42>
 8011a96:	4b28      	ldr	r3, [pc, #160]	@ (8011b38 <udp_sendto_if+0xd0>)
 8011a98:	f240 2281 	movw	r2, #641	@ 0x281
 8011a9c:	4929      	ldr	r1, [pc, #164]	@ (8011b44 <udp_sendto_if+0xdc>)
 8011a9e:	4828      	ldr	r0, [pc, #160]	@ (8011b40 <udp_sendto_if+0xd8>)
 8011aa0:	f002 ff98 	bl	80149d4 <iprintf>
 8011aa4:	f06f 030f 	mvn.w	r3, #15
 8011aa8:	e042      	b.n	8011b30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d109      	bne.n	8011ac4 <udp_sendto_if+0x5c>
 8011ab0:	4b21      	ldr	r3, [pc, #132]	@ (8011b38 <udp_sendto_if+0xd0>)
 8011ab2:	f240 2282 	movw	r2, #642	@ 0x282
 8011ab6:	4924      	ldr	r1, [pc, #144]	@ (8011b48 <udp_sendto_if+0xe0>)
 8011ab8:	4821      	ldr	r0, [pc, #132]	@ (8011b40 <udp_sendto_if+0xd8>)
 8011aba:	f002 ff8b 	bl	80149d4 <iprintf>
 8011abe:	f06f 030f 	mvn.w	r3, #15
 8011ac2:	e035      	b.n	8011b30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011ac4:	6a3b      	ldr	r3, [r7, #32]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d109      	bne.n	8011ade <udp_sendto_if+0x76>
 8011aca:	4b1b      	ldr	r3, [pc, #108]	@ (8011b38 <udp_sendto_if+0xd0>)
 8011acc:	f240 2283 	movw	r2, #643	@ 0x283
 8011ad0:	491e      	ldr	r1, [pc, #120]	@ (8011b4c <udp_sendto_if+0xe4>)
 8011ad2:	481b      	ldr	r0, [pc, #108]	@ (8011b40 <udp_sendto_if+0xd8>)
 8011ad4:	f002 ff7e 	bl	80149d4 <iprintf>
 8011ad8:	f06f 030f 	mvn.w	r3, #15
 8011adc:	e028      	b.n	8011b30 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d009      	beq.n	8011af8 <udp_sendto_if+0x90>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d005      	beq.n	8011af8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011af4:	2be0      	cmp	r3, #224	@ 0xe0
 8011af6:	d103      	bne.n	8011b00 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011af8:	6a3b      	ldr	r3, [r7, #32]
 8011afa:	3304      	adds	r3, #4
 8011afc:	617b      	str	r3, [r7, #20]
 8011afe:	e00b      	b.n	8011b18 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	6a3b      	ldr	r3, [r7, #32]
 8011b06:	3304      	adds	r3, #4
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d002      	beq.n	8011b14 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011b0e:	f06f 0303 	mvn.w	r3, #3
 8011b12:	e00d      	b.n	8011b30 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011b18:	887a      	ldrh	r2, [r7, #2]
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	9301      	str	r3, [sp, #4]
 8011b1e:	6a3b      	ldr	r3, [r7, #32]
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	4613      	mov	r3, r2
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	68b9      	ldr	r1, [r7, #8]
 8011b28:	68f8      	ldr	r0, [r7, #12]
 8011b2a:	f000 f811 	bl	8011b50 <udp_sendto_if_src>
 8011b2e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3718      	adds	r7, #24
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	080179bc 	.word	0x080179bc
 8011b3c:	08017b30 	.word	0x08017b30
 8011b40:	08017a10 	.word	0x08017a10
 8011b44:	08017b4c 	.word	0x08017b4c
 8011b48:	08017b68 	.word	0x08017b68
 8011b4c:	08017b88 	.word	0x08017b88

08011b50 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b08c      	sub	sp, #48	@ 0x30
 8011b54:	af04      	add	r7, sp, #16
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
 8011b5c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d109      	bne.n	8011b78 <udp_sendto_if_src+0x28>
 8011b64:	4b65      	ldr	r3, [pc, #404]	@ (8011cfc <udp_sendto_if_src+0x1ac>)
 8011b66:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011b6a:	4965      	ldr	r1, [pc, #404]	@ (8011d00 <udp_sendto_if_src+0x1b0>)
 8011b6c:	4865      	ldr	r0, [pc, #404]	@ (8011d04 <udp_sendto_if_src+0x1b4>)
 8011b6e:	f002 ff31 	bl	80149d4 <iprintf>
 8011b72:	f06f 030f 	mvn.w	r3, #15
 8011b76:	e0bc      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d109      	bne.n	8011b92 <udp_sendto_if_src+0x42>
 8011b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8011cfc <udp_sendto_if_src+0x1ac>)
 8011b80:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8011b84:	4960      	ldr	r1, [pc, #384]	@ (8011d08 <udp_sendto_if_src+0x1b8>)
 8011b86:	485f      	ldr	r0, [pc, #380]	@ (8011d04 <udp_sendto_if_src+0x1b4>)
 8011b88:	f002 ff24 	bl	80149d4 <iprintf>
 8011b8c:	f06f 030f 	mvn.w	r3, #15
 8011b90:	e0af      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d109      	bne.n	8011bac <udp_sendto_if_src+0x5c>
 8011b98:	4b58      	ldr	r3, [pc, #352]	@ (8011cfc <udp_sendto_if_src+0x1ac>)
 8011b9a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8011b9e:	495b      	ldr	r1, [pc, #364]	@ (8011d0c <udp_sendto_if_src+0x1bc>)
 8011ba0:	4858      	ldr	r0, [pc, #352]	@ (8011d04 <udp_sendto_if_src+0x1b4>)
 8011ba2:	f002 ff17 	bl	80149d4 <iprintf>
 8011ba6:	f06f 030f 	mvn.w	r3, #15
 8011baa:	e0a2      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d109      	bne.n	8011bc6 <udp_sendto_if_src+0x76>
 8011bb2:	4b52      	ldr	r3, [pc, #328]	@ (8011cfc <udp_sendto_if_src+0x1ac>)
 8011bb4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8011bb8:	4955      	ldr	r1, [pc, #340]	@ (8011d10 <udp_sendto_if_src+0x1c0>)
 8011bba:	4852      	ldr	r0, [pc, #328]	@ (8011d04 <udp_sendto_if_src+0x1b4>)
 8011bbc:	f002 ff0a 	bl	80149d4 <iprintf>
 8011bc0:	f06f 030f 	mvn.w	r3, #15
 8011bc4:	e095      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d109      	bne.n	8011be0 <udp_sendto_if_src+0x90>
 8011bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8011cfc <udp_sendto_if_src+0x1ac>)
 8011bce:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8011bd2:	4950      	ldr	r1, [pc, #320]	@ (8011d14 <udp_sendto_if_src+0x1c4>)
 8011bd4:	484b      	ldr	r0, [pc, #300]	@ (8011d04 <udp_sendto_if_src+0x1b4>)
 8011bd6:	f002 fefd 	bl	80149d4 <iprintf>
 8011bda:	f06f 030f 	mvn.w	r3, #15
 8011bde:	e088      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	8a5b      	ldrh	r3, [r3, #18]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d10f      	bne.n	8011c08 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011be8:	68f9      	ldr	r1, [r7, #12]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	8a5b      	ldrh	r3, [r3, #18]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f000 f893 	bl	8011d1c <udp_bind>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011bfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d002      	beq.n	8011c08 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011c02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c06:	e074      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	891b      	ldrh	r3, [r3, #8]
 8011c0c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d902      	bls.n	8011c1a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011c14:	f04f 33ff 	mov.w	r3, #4294967295
 8011c18:	e06b      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011c1a:	2108      	movs	r1, #8
 8011c1c:	68b8      	ldr	r0, [r7, #8]
 8011c1e:	f7f9 fef3 	bl	800ba08 <pbuf_add_header>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d015      	beq.n	8011c54 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011c28:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011c2c:	2108      	movs	r1, #8
 8011c2e:	2022      	movs	r0, #34	@ 0x22
 8011c30:	f7f9 fc9c 	bl	800b56c <pbuf_alloc>
 8011c34:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d102      	bne.n	8011c42 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c40:	e057      	b.n	8011cf2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	891b      	ldrh	r3, [r3, #8]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d006      	beq.n	8011c58 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011c4a:	68b9      	ldr	r1, [r7, #8]
 8011c4c:	69f8      	ldr	r0, [r7, #28]
 8011c4e:	f7fa f895 	bl	800bd7c <pbuf_chain>
 8011c52:	e001      	b.n	8011c58 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	895b      	ldrh	r3, [r3, #10]
 8011c5c:	2b07      	cmp	r3, #7
 8011c5e:	d806      	bhi.n	8011c6e <udp_sendto_if_src+0x11e>
 8011c60:	4b26      	ldr	r3, [pc, #152]	@ (8011cfc <udp_sendto_if_src+0x1ac>)
 8011c62:	f240 320d 	movw	r2, #781	@ 0x30d
 8011c66:	492c      	ldr	r1, [pc, #176]	@ (8011d18 <udp_sendto_if_src+0x1c8>)
 8011c68:	4826      	ldr	r0, [pc, #152]	@ (8011d04 <udp_sendto_if_src+0x1b4>)
 8011c6a:	f002 feb3 	bl	80149d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	8a5b      	ldrh	r3, [r3, #18]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7f8 fb69 	bl	800a350 <lwip_htons>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	461a      	mov	r2, r3
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011c86:	887b      	ldrh	r3, [r7, #2]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7f8 fb61 	bl	800a350 <lwip_htons>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	461a      	mov	r2, r3
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	719a      	strb	r2, [r3, #6]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011ca0:	69fb      	ldr	r3, [r7, #28]
 8011ca2:	891b      	ldrh	r3, [r3, #8]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7f8 fb53 	bl	800a350 <lwip_htons>
 8011caa:	4603      	mov	r3, r0
 8011cac:	461a      	mov	r2, r3
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011cb2:	2311      	movs	r3, #17
 8011cb4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	7adb      	ldrb	r3, [r3, #11]
 8011cba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	7a9b      	ldrb	r3, [r3, #10]
 8011cc0:	7cb9      	ldrb	r1, [r7, #18]
 8011cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011cc4:	9202      	str	r2, [sp, #8]
 8011cc6:	7cfa      	ldrb	r2, [r7, #19]
 8011cc8:	9201      	str	r2, [sp, #4]
 8011cca:	9300      	str	r3, [sp, #0]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011cd2:	69f8      	ldr	r0, [r7, #28]
 8011cd4:	f001 fbd4 	bl	8013480 <ip4_output_if_src>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011cdc:	69fa      	ldr	r2, [r7, #28]
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d004      	beq.n	8011cee <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011ce4:	69f8      	ldr	r0, [r7, #28]
 8011ce6:	f7f9 ff25 	bl	800bb34 <pbuf_free>
    q = NULL;
 8011cea:	2300      	movs	r3, #0
 8011cec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011cee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3720      	adds	r7, #32
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	080179bc 	.word	0x080179bc
 8011d00:	08017ba8 	.word	0x08017ba8
 8011d04:	08017a10 	.word	0x08017a10
 8011d08:	08017bc8 	.word	0x08017bc8
 8011d0c:	08017be8 	.word	0x08017be8
 8011d10:	08017c0c 	.word	0x08017c0c
 8011d14:	08017c30 	.word	0x08017c30
 8011d18:	08017c54 	.word	0x08017c54

08011d1c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b086      	sub	sp, #24
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	4613      	mov	r3, r2
 8011d28:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d101      	bne.n	8011d34 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011d30:	4b39      	ldr	r3, [pc, #228]	@ (8011e18 <udp_bind+0xfc>)
 8011d32:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d109      	bne.n	8011d4e <udp_bind+0x32>
 8011d3a:	4b38      	ldr	r3, [pc, #224]	@ (8011e1c <udp_bind+0x100>)
 8011d3c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011d40:	4937      	ldr	r1, [pc, #220]	@ (8011e20 <udp_bind+0x104>)
 8011d42:	4838      	ldr	r0, [pc, #224]	@ (8011e24 <udp_bind+0x108>)
 8011d44:	f002 fe46 	bl	80149d4 <iprintf>
 8011d48:	f06f 030f 	mvn.w	r3, #15
 8011d4c:	e060      	b.n	8011e10 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d52:	4b35      	ldr	r3, [pc, #212]	@ (8011e28 <udp_bind+0x10c>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	617b      	str	r3, [r7, #20]
 8011d58:	e009      	b.n	8011d6e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011d5a:	68fa      	ldr	r2, [r7, #12]
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d102      	bne.n	8011d68 <udp_bind+0x4c>
      rebind = 1;
 8011d62:	2301      	movs	r3, #1
 8011d64:	74fb      	strb	r3, [r7, #19]
      break;
 8011d66:	e005      	b.n	8011d74 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	617b      	str	r3, [r7, #20]
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1f2      	bne.n	8011d5a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011d74:	88fb      	ldrh	r3, [r7, #6]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d109      	bne.n	8011d8e <udp_bind+0x72>
    port = udp_new_port();
 8011d7a:	f7ff fc69 	bl	8011650 <udp_new_port>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011d82:	88fb      	ldrh	r3, [r7, #6]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d12c      	bne.n	8011de2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011d88:	f06f 0307 	mvn.w	r3, #7
 8011d8c:	e040      	b.n	8011e10 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d8e:	4b26      	ldr	r3, [pc, #152]	@ (8011e28 <udp_bind+0x10c>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	617b      	str	r3, [r7, #20]
 8011d94:	e022      	b.n	8011ddc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d01b      	beq.n	8011dd6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	8a5b      	ldrh	r3, [r3, #18]
 8011da2:	88fa      	ldrh	r2, [r7, #6]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d116      	bne.n	8011dd6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d00d      	beq.n	8011dd0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d00a      	beq.n	8011dd0 <udp_bind+0xb4>
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d006      	beq.n	8011dd0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011dc2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d003      	beq.n	8011dd0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d102      	bne.n	8011dd6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011dd0:	f06f 0307 	mvn.w	r3, #7
 8011dd4:	e01c      	b.n	8011e10 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	617b      	str	r3, [r7, #20]
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d1d9      	bne.n	8011d96 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d002      	beq.n	8011dee <udp_bind+0xd2>
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	e000      	b.n	8011df0 <udp_bind+0xd4>
 8011dee:	2300      	movs	r3, #0
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	88fa      	ldrh	r2, [r7, #6]
 8011df8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011dfa:	7cfb      	ldrb	r3, [r7, #19]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d106      	bne.n	8011e0e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011e00:	4b09      	ldr	r3, [pc, #36]	@ (8011e28 <udp_bind+0x10c>)
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011e08:	4a07      	ldr	r2, [pc, #28]	@ (8011e28 <udp_bind+0x10c>)
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011e0e:	2300      	movs	r3, #0
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3718      	adds	r7, #24
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	08018518 	.word	0x08018518
 8011e1c:	080179bc 	.word	0x080179bc
 8011e20:	08017c84 	.word	0x08017c84
 8011e24:	08017a10 	.word	0x08017a10
 8011e28:	2000d840 	.word	0x2000d840

08011e2c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d107      	bne.n	8011e4e <udp_recv+0x22>
 8011e3e:	4b08      	ldr	r3, [pc, #32]	@ (8011e60 <udp_recv+0x34>)
 8011e40:	f240 428a 	movw	r2, #1162	@ 0x48a
 8011e44:	4907      	ldr	r1, [pc, #28]	@ (8011e64 <udp_recv+0x38>)
 8011e46:	4808      	ldr	r0, [pc, #32]	@ (8011e68 <udp_recv+0x3c>)
 8011e48:	f002 fdc4 	bl	80149d4 <iprintf>
 8011e4c:	e005      	b.n	8011e5a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	68ba      	ldr	r2, [r7, #8]
 8011e52:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	61da      	str	r2, [r3, #28]
}
 8011e5a:	3710      	adds	r7, #16
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	080179bc 	.word	0x080179bc
 8011e64:	08017cf0 	.word	0x08017cf0
 8011e68:	08017a10 	.word	0x08017a10

08011e6c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011e72:	2000      	movs	r0, #0
 8011e74:	f7f8 ff44 	bl	800ad00 <memp_malloc>
 8011e78:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d007      	beq.n	8011e90 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011e80:	2220      	movs	r2, #32
 8011e82:	2100      	movs	r1, #0
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f002 fe0a 	bl	8014a9e <memset>
    pcb->ttl = UDP_TTL;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	22ff      	movs	r2, #255	@ 0xff
 8011e8e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011e90:	687b      	ldr	r3, [r7, #4]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3708      	adds	r7, #8
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
	...

08011e9c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d01e      	beq.n	8011eea <udp_netif_ip_addr_changed+0x4e>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d01a      	beq.n	8011eea <udp_netif_ip_addr_changed+0x4e>
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d017      	beq.n	8011eea <udp_netif_ip_addr_changed+0x4e>
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d013      	beq.n	8011eea <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ef8 <udp_netif_ip_addr_changed+0x5c>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
 8011ec8:	e00c      	b.n	8011ee4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d103      	bne.n	8011ede <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	60fb      	str	r3, [r7, #12]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d1ef      	bne.n	8011eca <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011eea:	bf00      	nop
 8011eec:	3714      	adds	r7, #20
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	2000d840 	.word	0x2000d840

08011efc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011f04:	4915      	ldr	r1, [pc, #84]	@ (8011f5c <etharp_free_entry+0x60>)
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	4613      	mov	r3, r2
 8011f0a:	005b      	lsls	r3, r3, #1
 8011f0c:	4413      	add	r3, r2
 8011f0e:	00db      	lsls	r3, r3, #3
 8011f10:	440b      	add	r3, r1
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d013      	beq.n	8011f40 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f18:	4910      	ldr	r1, [pc, #64]	@ (8011f5c <etharp_free_entry+0x60>)
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	005b      	lsls	r3, r3, #1
 8011f20:	4413      	add	r3, r2
 8011f22:	00db      	lsls	r3, r3, #3
 8011f24:	440b      	add	r3, r1
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7f9 fe03 	bl	800bb34 <pbuf_free>
    arp_table[i].q = NULL;
 8011f2e:	490b      	ldr	r1, [pc, #44]	@ (8011f5c <etharp_free_entry+0x60>)
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	4613      	mov	r3, r2
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	4413      	add	r3, r2
 8011f38:	00db      	lsls	r3, r3, #3
 8011f3a:	440b      	add	r3, r1
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f40:	4906      	ldr	r1, [pc, #24]	@ (8011f5c <etharp_free_entry+0x60>)
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	4613      	mov	r3, r2
 8011f46:	005b      	lsls	r3, r3, #1
 8011f48:	4413      	add	r3, r2
 8011f4a:	00db      	lsls	r3, r3, #3
 8011f4c:	440b      	add	r3, r1
 8011f4e:	3314      	adds	r3, #20
 8011f50:	2200      	movs	r2, #0
 8011f52:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011f54:	bf00      	nop
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	2000d844 	.word	0x2000d844

08011f60 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f66:	2300      	movs	r3, #0
 8011f68:	607b      	str	r3, [r7, #4]
 8011f6a:	e096      	b.n	801209a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011f6c:	494f      	ldr	r1, [pc, #316]	@ (80120ac <etharp_tmr+0x14c>)
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	4613      	mov	r3, r2
 8011f72:	005b      	lsls	r3, r3, #1
 8011f74:	4413      	add	r3, r2
 8011f76:	00db      	lsls	r3, r3, #3
 8011f78:	440b      	add	r3, r1
 8011f7a:	3314      	adds	r3, #20
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011f80:	78fb      	ldrb	r3, [r7, #3]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f000 8086 	beq.w	8012094 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011f88:	4948      	ldr	r1, [pc, #288]	@ (80120ac <etharp_tmr+0x14c>)
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	005b      	lsls	r3, r3, #1
 8011f90:	4413      	add	r3, r2
 8011f92:	00db      	lsls	r3, r3, #3
 8011f94:	440b      	add	r3, r1
 8011f96:	3312      	adds	r3, #18
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	b298      	uxth	r0, r3
 8011f9e:	4943      	ldr	r1, [pc, #268]	@ (80120ac <etharp_tmr+0x14c>)
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	4413      	add	r3, r2
 8011fa8:	00db      	lsls	r3, r3, #3
 8011faa:	440b      	add	r3, r1
 8011fac:	3312      	adds	r3, #18
 8011fae:	4602      	mov	r2, r0
 8011fb0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011fb2:	493e      	ldr	r1, [pc, #248]	@ (80120ac <etharp_tmr+0x14c>)
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	4413      	add	r3, r2
 8011fbc:	00db      	lsls	r3, r3, #3
 8011fbe:	440b      	add	r3, r1
 8011fc0:	3312      	adds	r3, #18
 8011fc2:	881b      	ldrh	r3, [r3, #0]
 8011fc4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011fc8:	d215      	bcs.n	8011ff6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011fca:	4938      	ldr	r1, [pc, #224]	@ (80120ac <etharp_tmr+0x14c>)
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	4613      	mov	r3, r2
 8011fd0:	005b      	lsls	r3, r3, #1
 8011fd2:	4413      	add	r3, r2
 8011fd4:	00db      	lsls	r3, r3, #3
 8011fd6:	440b      	add	r3, r1
 8011fd8:	3314      	adds	r3, #20
 8011fda:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d10e      	bne.n	8011ffe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011fe0:	4932      	ldr	r1, [pc, #200]	@ (80120ac <etharp_tmr+0x14c>)
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	005b      	lsls	r3, r3, #1
 8011fe8:	4413      	add	r3, r2
 8011fea:	00db      	lsls	r3, r3, #3
 8011fec:	440b      	add	r3, r1
 8011fee:	3312      	adds	r3, #18
 8011ff0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011ff2:	2b04      	cmp	r3, #4
 8011ff4:	d903      	bls.n	8011ffe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7ff ff80 	bl	8011efc <etharp_free_entry>
 8011ffc:	e04a      	b.n	8012094 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011ffe:	492b      	ldr	r1, [pc, #172]	@ (80120ac <etharp_tmr+0x14c>)
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	4613      	mov	r3, r2
 8012004:	005b      	lsls	r3, r3, #1
 8012006:	4413      	add	r3, r2
 8012008:	00db      	lsls	r3, r3, #3
 801200a:	440b      	add	r3, r1
 801200c:	3314      	adds	r3, #20
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2b03      	cmp	r3, #3
 8012012:	d10a      	bne.n	801202a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012014:	4925      	ldr	r1, [pc, #148]	@ (80120ac <etharp_tmr+0x14c>)
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	4613      	mov	r3, r2
 801201a:	005b      	lsls	r3, r3, #1
 801201c:	4413      	add	r3, r2
 801201e:	00db      	lsls	r3, r3, #3
 8012020:	440b      	add	r3, r1
 8012022:	3314      	adds	r3, #20
 8012024:	2204      	movs	r2, #4
 8012026:	701a      	strb	r2, [r3, #0]
 8012028:	e034      	b.n	8012094 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801202a:	4920      	ldr	r1, [pc, #128]	@ (80120ac <etharp_tmr+0x14c>)
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	4613      	mov	r3, r2
 8012030:	005b      	lsls	r3, r3, #1
 8012032:	4413      	add	r3, r2
 8012034:	00db      	lsls	r3, r3, #3
 8012036:	440b      	add	r3, r1
 8012038:	3314      	adds	r3, #20
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	2b04      	cmp	r3, #4
 801203e:	d10a      	bne.n	8012056 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012040:	491a      	ldr	r1, [pc, #104]	@ (80120ac <etharp_tmr+0x14c>)
 8012042:	687a      	ldr	r2, [r7, #4]
 8012044:	4613      	mov	r3, r2
 8012046:	005b      	lsls	r3, r3, #1
 8012048:	4413      	add	r3, r2
 801204a:	00db      	lsls	r3, r3, #3
 801204c:	440b      	add	r3, r1
 801204e:	3314      	adds	r3, #20
 8012050:	2202      	movs	r2, #2
 8012052:	701a      	strb	r2, [r3, #0]
 8012054:	e01e      	b.n	8012094 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012056:	4915      	ldr	r1, [pc, #84]	@ (80120ac <etharp_tmr+0x14c>)
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	4613      	mov	r3, r2
 801205c:	005b      	lsls	r3, r3, #1
 801205e:	4413      	add	r3, r2
 8012060:	00db      	lsls	r3, r3, #3
 8012062:	440b      	add	r3, r1
 8012064:	3314      	adds	r3, #20
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	2b01      	cmp	r3, #1
 801206a:	d113      	bne.n	8012094 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801206c:	490f      	ldr	r1, [pc, #60]	@ (80120ac <etharp_tmr+0x14c>)
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	4613      	mov	r3, r2
 8012072:	005b      	lsls	r3, r3, #1
 8012074:	4413      	add	r3, r2
 8012076:	00db      	lsls	r3, r3, #3
 8012078:	440b      	add	r3, r1
 801207a:	3308      	adds	r3, #8
 801207c:	6818      	ldr	r0, [r3, #0]
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	4613      	mov	r3, r2
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	4413      	add	r3, r2
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	4a08      	ldr	r2, [pc, #32]	@ (80120ac <etharp_tmr+0x14c>)
 801208a:	4413      	add	r3, r2
 801208c:	3304      	adds	r3, #4
 801208e:	4619      	mov	r1, r3
 8012090:	f000 fe6e 	bl	8012d70 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	3301      	adds	r3, #1
 8012098:	607b      	str	r3, [r7, #4]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2b09      	cmp	r3, #9
 801209e:	f77f af65 	ble.w	8011f6c <etharp_tmr+0xc>
      }
    }
  }
}
 80120a2:	bf00      	nop
 80120a4:	bf00      	nop
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	2000d844 	.word	0x2000d844

080120b0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b08a      	sub	sp, #40	@ 0x28
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	460b      	mov	r3, r1
 80120ba:	607a      	str	r2, [r7, #4]
 80120bc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80120be:	230a      	movs	r3, #10
 80120c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80120c2:	230a      	movs	r3, #10
 80120c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80120c6:	230a      	movs	r3, #10
 80120c8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80120ca:	2300      	movs	r3, #0
 80120cc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80120ce:	230a      	movs	r3, #10
 80120d0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80120d2:	2300      	movs	r3, #0
 80120d4:	83bb      	strh	r3, [r7, #28]
 80120d6:	2300      	movs	r3, #0
 80120d8:	837b      	strh	r3, [r7, #26]
 80120da:	2300      	movs	r3, #0
 80120dc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120de:	2300      	movs	r3, #0
 80120e0:	843b      	strh	r3, [r7, #32]
 80120e2:	e0ae      	b.n	8012242 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80120e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120e8:	49a6      	ldr	r1, [pc, #664]	@ (8012384 <etharp_find_entry+0x2d4>)
 80120ea:	4613      	mov	r3, r2
 80120ec:	005b      	lsls	r3, r3, #1
 80120ee:	4413      	add	r3, r2
 80120f0:	00db      	lsls	r3, r3, #3
 80120f2:	440b      	add	r3, r1
 80120f4:	3314      	adds	r3, #20
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80120fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80120fe:	2b0a      	cmp	r3, #10
 8012100:	d105      	bne.n	801210e <etharp_find_entry+0x5e>
 8012102:	7dfb      	ldrb	r3, [r7, #23]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d102      	bne.n	801210e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012108:	8c3b      	ldrh	r3, [r7, #32]
 801210a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801210c:	e095      	b.n	801223a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801210e:	7dfb      	ldrb	r3, [r7, #23]
 8012110:	2b00      	cmp	r3, #0
 8012112:	f000 8092 	beq.w	801223a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012116:	7dfb      	ldrb	r3, [r7, #23]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d009      	beq.n	8012130 <etharp_find_entry+0x80>
 801211c:	7dfb      	ldrb	r3, [r7, #23]
 801211e:	2b01      	cmp	r3, #1
 8012120:	d806      	bhi.n	8012130 <etharp_find_entry+0x80>
 8012122:	4b99      	ldr	r3, [pc, #612]	@ (8012388 <etharp_find_entry+0x2d8>)
 8012124:	f240 1223 	movw	r2, #291	@ 0x123
 8012128:	4998      	ldr	r1, [pc, #608]	@ (801238c <etharp_find_entry+0x2dc>)
 801212a:	4899      	ldr	r0, [pc, #612]	@ (8012390 <etharp_find_entry+0x2e0>)
 801212c:	f002 fc52 	bl	80149d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d020      	beq.n	8012178 <etharp_find_entry+0xc8>
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	6819      	ldr	r1, [r3, #0]
 801213a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801213e:	4891      	ldr	r0, [pc, #580]	@ (8012384 <etharp_find_entry+0x2d4>)
 8012140:	4613      	mov	r3, r2
 8012142:	005b      	lsls	r3, r3, #1
 8012144:	4413      	add	r3, r2
 8012146:	00db      	lsls	r3, r3, #3
 8012148:	4403      	add	r3, r0
 801214a:	3304      	adds	r3, #4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	4299      	cmp	r1, r3
 8012150:	d112      	bne.n	8012178 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d00c      	beq.n	8012172 <etharp_find_entry+0xc2>
 8012158:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801215c:	4989      	ldr	r1, [pc, #548]	@ (8012384 <etharp_find_entry+0x2d4>)
 801215e:	4613      	mov	r3, r2
 8012160:	005b      	lsls	r3, r3, #1
 8012162:	4413      	add	r3, r2
 8012164:	00db      	lsls	r3, r3, #3
 8012166:	440b      	add	r3, r1
 8012168:	3308      	adds	r3, #8
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	429a      	cmp	r2, r3
 8012170:	d102      	bne.n	8012178 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012172:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012176:	e100      	b.n	801237a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012178:	7dfb      	ldrb	r3, [r7, #23]
 801217a:	2b01      	cmp	r3, #1
 801217c:	d140      	bne.n	8012200 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801217e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012182:	4980      	ldr	r1, [pc, #512]	@ (8012384 <etharp_find_entry+0x2d4>)
 8012184:	4613      	mov	r3, r2
 8012186:	005b      	lsls	r3, r3, #1
 8012188:	4413      	add	r3, r2
 801218a:	00db      	lsls	r3, r3, #3
 801218c:	440b      	add	r3, r1
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d01a      	beq.n	80121ca <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012194:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012198:	497a      	ldr	r1, [pc, #488]	@ (8012384 <etharp_find_entry+0x2d4>)
 801219a:	4613      	mov	r3, r2
 801219c:	005b      	lsls	r3, r3, #1
 801219e:	4413      	add	r3, r2
 80121a0:	00db      	lsls	r3, r3, #3
 80121a2:	440b      	add	r3, r1
 80121a4:	3312      	adds	r3, #18
 80121a6:	881b      	ldrh	r3, [r3, #0]
 80121a8:	8bba      	ldrh	r2, [r7, #28]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d845      	bhi.n	801223a <etharp_find_entry+0x18a>
            old_queue = i;
 80121ae:	8c3b      	ldrh	r3, [r7, #32]
 80121b0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80121b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121b6:	4973      	ldr	r1, [pc, #460]	@ (8012384 <etharp_find_entry+0x2d4>)
 80121b8:	4613      	mov	r3, r2
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	4413      	add	r3, r2
 80121be:	00db      	lsls	r3, r3, #3
 80121c0:	440b      	add	r3, r1
 80121c2:	3312      	adds	r3, #18
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	83bb      	strh	r3, [r7, #28]
 80121c8:	e037      	b.n	801223a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80121ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ce:	496d      	ldr	r1, [pc, #436]	@ (8012384 <etharp_find_entry+0x2d4>)
 80121d0:	4613      	mov	r3, r2
 80121d2:	005b      	lsls	r3, r3, #1
 80121d4:	4413      	add	r3, r2
 80121d6:	00db      	lsls	r3, r3, #3
 80121d8:	440b      	add	r3, r1
 80121da:	3312      	adds	r3, #18
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	8b7a      	ldrh	r2, [r7, #26]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d82a      	bhi.n	801223a <etharp_find_entry+0x18a>
            old_pending = i;
 80121e4:	8c3b      	ldrh	r3, [r7, #32]
 80121e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80121e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ec:	4965      	ldr	r1, [pc, #404]	@ (8012384 <etharp_find_entry+0x2d4>)
 80121ee:	4613      	mov	r3, r2
 80121f0:	005b      	lsls	r3, r3, #1
 80121f2:	4413      	add	r3, r2
 80121f4:	00db      	lsls	r3, r3, #3
 80121f6:	440b      	add	r3, r1
 80121f8:	3312      	adds	r3, #18
 80121fa:	881b      	ldrh	r3, [r3, #0]
 80121fc:	837b      	strh	r3, [r7, #26]
 80121fe:	e01c      	b.n	801223a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012200:	7dfb      	ldrb	r3, [r7, #23]
 8012202:	2b01      	cmp	r3, #1
 8012204:	d919      	bls.n	801223a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012206:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801220a:	495e      	ldr	r1, [pc, #376]	@ (8012384 <etharp_find_entry+0x2d4>)
 801220c:	4613      	mov	r3, r2
 801220e:	005b      	lsls	r3, r3, #1
 8012210:	4413      	add	r3, r2
 8012212:	00db      	lsls	r3, r3, #3
 8012214:	440b      	add	r3, r1
 8012216:	3312      	adds	r3, #18
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	8b3a      	ldrh	r2, [r7, #24]
 801221c:	429a      	cmp	r2, r3
 801221e:	d80c      	bhi.n	801223a <etharp_find_entry+0x18a>
            old_stable = i;
 8012220:	8c3b      	ldrh	r3, [r7, #32]
 8012222:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012228:	4956      	ldr	r1, [pc, #344]	@ (8012384 <etharp_find_entry+0x2d4>)
 801222a:	4613      	mov	r3, r2
 801222c:	005b      	lsls	r3, r3, #1
 801222e:	4413      	add	r3, r2
 8012230:	00db      	lsls	r3, r3, #3
 8012232:	440b      	add	r3, r1
 8012234:	3312      	adds	r3, #18
 8012236:	881b      	ldrh	r3, [r3, #0]
 8012238:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801223a:	8c3b      	ldrh	r3, [r7, #32]
 801223c:	3301      	adds	r3, #1
 801223e:	b29b      	uxth	r3, r3
 8012240:	843b      	strh	r3, [r7, #32]
 8012242:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012246:	2b09      	cmp	r3, #9
 8012248:	f77f af4c 	ble.w	80120e4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801224c:	7afb      	ldrb	r3, [r7, #11]
 801224e:	f003 0302 	and.w	r3, r3, #2
 8012252:	2b00      	cmp	r3, #0
 8012254:	d108      	bne.n	8012268 <etharp_find_entry+0x1b8>
 8012256:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801225a:	2b0a      	cmp	r3, #10
 801225c:	d107      	bne.n	801226e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801225e:	7afb      	ldrb	r3, [r7, #11]
 8012260:	f003 0301 	and.w	r3, r3, #1
 8012264:	2b00      	cmp	r3, #0
 8012266:	d102      	bne.n	801226e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012268:	f04f 33ff 	mov.w	r3, #4294967295
 801226c:	e085      	b.n	801237a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801226e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012272:	2b09      	cmp	r3, #9
 8012274:	dc02      	bgt.n	801227c <etharp_find_entry+0x1cc>
    i = empty;
 8012276:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012278:	843b      	strh	r3, [r7, #32]
 801227a:	e039      	b.n	80122f0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801227c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012280:	2b09      	cmp	r3, #9
 8012282:	dc14      	bgt.n	80122ae <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012286:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012288:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801228c:	493d      	ldr	r1, [pc, #244]	@ (8012384 <etharp_find_entry+0x2d4>)
 801228e:	4613      	mov	r3, r2
 8012290:	005b      	lsls	r3, r3, #1
 8012292:	4413      	add	r3, r2
 8012294:	00db      	lsls	r3, r3, #3
 8012296:	440b      	add	r3, r1
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d018      	beq.n	80122d0 <etharp_find_entry+0x220>
 801229e:	4b3a      	ldr	r3, [pc, #232]	@ (8012388 <etharp_find_entry+0x2d8>)
 80122a0:	f240 126d 	movw	r2, #365	@ 0x16d
 80122a4:	493b      	ldr	r1, [pc, #236]	@ (8012394 <etharp_find_entry+0x2e4>)
 80122a6:	483a      	ldr	r0, [pc, #232]	@ (8012390 <etharp_find_entry+0x2e0>)
 80122a8:	f002 fb94 	bl	80149d4 <iprintf>
 80122ac:	e010      	b.n	80122d0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80122ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80122b2:	2b09      	cmp	r3, #9
 80122b4:	dc02      	bgt.n	80122bc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80122b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80122b8:	843b      	strh	r3, [r7, #32]
 80122ba:	e009      	b.n	80122d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80122bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80122c0:	2b09      	cmp	r3, #9
 80122c2:	dc02      	bgt.n	80122ca <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80122c4:	8bfb      	ldrh	r3, [r7, #30]
 80122c6:	843b      	strh	r3, [r7, #32]
 80122c8:	e002      	b.n	80122d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80122ca:	f04f 33ff 	mov.w	r3, #4294967295
 80122ce:	e054      	b.n	801237a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80122d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122d4:	2b09      	cmp	r3, #9
 80122d6:	dd06      	ble.n	80122e6 <etharp_find_entry+0x236>
 80122d8:	4b2b      	ldr	r3, [pc, #172]	@ (8012388 <etharp_find_entry+0x2d8>)
 80122da:	f240 127f 	movw	r2, #383	@ 0x17f
 80122de:	492e      	ldr	r1, [pc, #184]	@ (8012398 <etharp_find_entry+0x2e8>)
 80122e0:	482b      	ldr	r0, [pc, #172]	@ (8012390 <etharp_find_entry+0x2e0>)
 80122e2:	f002 fb77 	bl	80149d4 <iprintf>
    etharp_free_entry(i);
 80122e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7ff fe06 	bl	8011efc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80122f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122f4:	2b09      	cmp	r3, #9
 80122f6:	dd06      	ble.n	8012306 <etharp_find_entry+0x256>
 80122f8:	4b23      	ldr	r3, [pc, #140]	@ (8012388 <etharp_find_entry+0x2d8>)
 80122fa:	f240 1283 	movw	r2, #387	@ 0x183
 80122fe:	4926      	ldr	r1, [pc, #152]	@ (8012398 <etharp_find_entry+0x2e8>)
 8012300:	4823      	ldr	r0, [pc, #140]	@ (8012390 <etharp_find_entry+0x2e0>)
 8012302:	f002 fb67 	bl	80149d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801230a:	491e      	ldr	r1, [pc, #120]	@ (8012384 <etharp_find_entry+0x2d4>)
 801230c:	4613      	mov	r3, r2
 801230e:	005b      	lsls	r3, r3, #1
 8012310:	4413      	add	r3, r2
 8012312:	00db      	lsls	r3, r3, #3
 8012314:	440b      	add	r3, r1
 8012316:	3314      	adds	r3, #20
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d006      	beq.n	801232c <etharp_find_entry+0x27c>
 801231e:	4b1a      	ldr	r3, [pc, #104]	@ (8012388 <etharp_find_entry+0x2d8>)
 8012320:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012324:	491d      	ldr	r1, [pc, #116]	@ (801239c <etharp_find_entry+0x2ec>)
 8012326:	481a      	ldr	r0, [pc, #104]	@ (8012390 <etharp_find_entry+0x2e0>)
 8012328:	f002 fb54 	bl	80149d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d00b      	beq.n	801234a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012332:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	6819      	ldr	r1, [r3, #0]
 801233a:	4812      	ldr	r0, [pc, #72]	@ (8012384 <etharp_find_entry+0x2d4>)
 801233c:	4613      	mov	r3, r2
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	4413      	add	r3, r2
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	4403      	add	r3, r0
 8012346:	3304      	adds	r3, #4
 8012348:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801234a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801234e:	490d      	ldr	r1, [pc, #52]	@ (8012384 <etharp_find_entry+0x2d4>)
 8012350:	4613      	mov	r3, r2
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	4413      	add	r3, r2
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	440b      	add	r3, r1
 801235a:	3312      	adds	r3, #18
 801235c:	2200      	movs	r2, #0
 801235e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012360:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012364:	4907      	ldr	r1, [pc, #28]	@ (8012384 <etharp_find_entry+0x2d4>)
 8012366:	4613      	mov	r3, r2
 8012368:	005b      	lsls	r3, r3, #1
 801236a:	4413      	add	r3, r2
 801236c:	00db      	lsls	r3, r3, #3
 801236e:	440b      	add	r3, r1
 8012370:	3308      	adds	r3, #8
 8012372:	687a      	ldr	r2, [r7, #4]
 8012374:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012376:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801237a:	4618      	mov	r0, r3
 801237c:	3728      	adds	r7, #40	@ 0x28
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	2000d844 	.word	0x2000d844
 8012388:	08017d20 	.word	0x08017d20
 801238c:	08017d58 	.word	0x08017d58
 8012390:	08017d98 	.word	0x08017d98
 8012394:	08017dc0 	.word	0x08017dc0
 8012398:	08017dd8 	.word	0x08017dd8
 801239c:	08017dec 	.word	0x08017dec

080123a0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b088      	sub	sp, #32
 80123a4:	af02      	add	r7, sp, #8
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80123b4:	2b06      	cmp	r3, #6
 80123b6:	d006      	beq.n	80123c6 <etharp_update_arp_entry+0x26>
 80123b8:	4b48      	ldr	r3, [pc, #288]	@ (80124dc <etharp_update_arp_entry+0x13c>)
 80123ba:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80123be:	4948      	ldr	r1, [pc, #288]	@ (80124e0 <etharp_update_arp_entry+0x140>)
 80123c0:	4848      	ldr	r0, [pc, #288]	@ (80124e4 <etharp_update_arp_entry+0x144>)
 80123c2:	f002 fb07 	bl	80149d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d012      	beq.n	80123f2 <etharp_update_arp_entry+0x52>
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d00e      	beq.n	80123f2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68f9      	ldr	r1, [r7, #12]
 80123da:	4618      	mov	r0, r3
 80123dc:	f001 f8fe 	bl	80135dc <ip4_addr_isbroadcast_u32>
 80123e0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d105      	bne.n	80123f2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80123ee:	2be0      	cmp	r3, #224	@ 0xe0
 80123f0:	d102      	bne.n	80123f8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80123f2:	f06f 030f 	mvn.w	r3, #15
 80123f6:	e06c      	b.n	80124d2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80123f8:	78fb      	ldrb	r3, [r7, #3]
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	4619      	mov	r1, r3
 80123fe:	68b8      	ldr	r0, [r7, #8]
 8012400:	f7ff fe56 	bl	80120b0 <etharp_find_entry>
 8012404:	4603      	mov	r3, r0
 8012406:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012408:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801240c:	2b00      	cmp	r3, #0
 801240e:	da02      	bge.n	8012416 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012410:	8afb      	ldrh	r3, [r7, #22]
 8012412:	b25b      	sxtb	r3, r3
 8012414:	e05d      	b.n	80124d2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012416:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801241a:	4933      	ldr	r1, [pc, #204]	@ (80124e8 <etharp_update_arp_entry+0x148>)
 801241c:	4613      	mov	r3, r2
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	4413      	add	r3, r2
 8012422:	00db      	lsls	r3, r3, #3
 8012424:	440b      	add	r3, r1
 8012426:	3314      	adds	r3, #20
 8012428:	2202      	movs	r2, #2
 801242a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801242c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012430:	492d      	ldr	r1, [pc, #180]	@ (80124e8 <etharp_update_arp_entry+0x148>)
 8012432:	4613      	mov	r3, r2
 8012434:	005b      	lsls	r3, r3, #1
 8012436:	4413      	add	r3, r2
 8012438:	00db      	lsls	r3, r3, #3
 801243a:	440b      	add	r3, r1
 801243c:	3308      	adds	r3, #8
 801243e:	68fa      	ldr	r2, [r7, #12]
 8012440:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012442:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012446:	4613      	mov	r3, r2
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	4413      	add	r3, r2
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	3308      	adds	r3, #8
 8012450:	4a25      	ldr	r2, [pc, #148]	@ (80124e8 <etharp_update_arp_entry+0x148>)
 8012452:	4413      	add	r3, r2
 8012454:	3304      	adds	r3, #4
 8012456:	2206      	movs	r2, #6
 8012458:	6879      	ldr	r1, [r7, #4]
 801245a:	4618      	mov	r0, r3
 801245c:	f002 fb95 	bl	8014b8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012460:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012464:	4920      	ldr	r1, [pc, #128]	@ (80124e8 <etharp_update_arp_entry+0x148>)
 8012466:	4613      	mov	r3, r2
 8012468:	005b      	lsls	r3, r3, #1
 801246a:	4413      	add	r3, r2
 801246c:	00db      	lsls	r3, r3, #3
 801246e:	440b      	add	r3, r1
 8012470:	3312      	adds	r3, #18
 8012472:	2200      	movs	r2, #0
 8012474:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012476:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801247a:	491b      	ldr	r1, [pc, #108]	@ (80124e8 <etharp_update_arp_entry+0x148>)
 801247c:	4613      	mov	r3, r2
 801247e:	005b      	lsls	r3, r3, #1
 8012480:	4413      	add	r3, r2
 8012482:	00db      	lsls	r3, r3, #3
 8012484:	440b      	add	r3, r1
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d021      	beq.n	80124d0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801248c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012490:	4915      	ldr	r1, [pc, #84]	@ (80124e8 <etharp_update_arp_entry+0x148>)
 8012492:	4613      	mov	r3, r2
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	4413      	add	r3, r2
 8012498:	00db      	lsls	r3, r3, #3
 801249a:	440b      	add	r3, r1
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80124a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124a4:	4910      	ldr	r1, [pc, #64]	@ (80124e8 <etharp_update_arp_entry+0x148>)
 80124a6:	4613      	mov	r3, r2
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	4413      	add	r3, r2
 80124ac:	00db      	lsls	r3, r3, #3
 80124ae:	440b      	add	r3, r1
 80124b0:	2200      	movs	r2, #0
 80124b2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80124ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80124be:	9300      	str	r3, [sp, #0]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6939      	ldr	r1, [r7, #16]
 80124c4:	68f8      	ldr	r0, [r7, #12]
 80124c6:	f002 f827 	bl	8014518 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80124ca:	6938      	ldr	r0, [r7, #16]
 80124cc:	f7f9 fb32 	bl	800bb34 <pbuf_free>
  }
  return ERR_OK;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	08017d20 	.word	0x08017d20
 80124e0:	08017e18 	.word	0x08017e18
 80124e4:	08017d98 	.word	0x08017d98
 80124e8:	2000d844 	.word	0x2000d844

080124ec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80124f4:	2300      	movs	r3, #0
 80124f6:	60fb      	str	r3, [r7, #12]
 80124f8:	e01e      	b.n	8012538 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80124fa:	4913      	ldr	r1, [pc, #76]	@ (8012548 <etharp_cleanup_netif+0x5c>)
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	4613      	mov	r3, r2
 8012500:	005b      	lsls	r3, r3, #1
 8012502:	4413      	add	r3, r2
 8012504:	00db      	lsls	r3, r3, #3
 8012506:	440b      	add	r3, r1
 8012508:	3314      	adds	r3, #20
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801250e:	7afb      	ldrb	r3, [r7, #11]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00e      	beq.n	8012532 <etharp_cleanup_netif+0x46>
 8012514:	490c      	ldr	r1, [pc, #48]	@ (8012548 <etharp_cleanup_netif+0x5c>)
 8012516:	68fa      	ldr	r2, [r7, #12]
 8012518:	4613      	mov	r3, r2
 801251a:	005b      	lsls	r3, r3, #1
 801251c:	4413      	add	r3, r2
 801251e:	00db      	lsls	r3, r3, #3
 8012520:	440b      	add	r3, r1
 8012522:	3308      	adds	r3, #8
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	687a      	ldr	r2, [r7, #4]
 8012528:	429a      	cmp	r2, r3
 801252a:	d102      	bne.n	8012532 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7ff fce5 	bl	8011efc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	3301      	adds	r3, #1
 8012536:	60fb      	str	r3, [r7, #12]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2b09      	cmp	r3, #9
 801253c:	dddd      	ble.n	80124fa <etharp_cleanup_netif+0xe>
    }
  }
}
 801253e:	bf00      	nop
 8012540:	bf00      	nop
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	2000d844 	.word	0x2000d844

0801254c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801254c:	b5b0      	push	{r4, r5, r7, lr}
 801254e:	b08a      	sub	sp, #40	@ 0x28
 8012550:	af04      	add	r7, sp, #16
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d107      	bne.n	801256c <etharp_input+0x20>
 801255c:	4b3d      	ldr	r3, [pc, #244]	@ (8012654 <etharp_input+0x108>)
 801255e:	f240 228a 	movw	r2, #650	@ 0x28a
 8012562:	493d      	ldr	r1, [pc, #244]	@ (8012658 <etharp_input+0x10c>)
 8012564:	483d      	ldr	r0, [pc, #244]	@ (801265c <etharp_input+0x110>)
 8012566:	f002 fa35 	bl	80149d4 <iprintf>
 801256a:	e06f      	b.n	801264c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	881b      	ldrh	r3, [r3, #0]
 8012576:	b29b      	uxth	r3, r3
 8012578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801257c:	d10c      	bne.n	8012598 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012582:	2b06      	cmp	r3, #6
 8012584:	d108      	bne.n	8012598 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801258a:	2b04      	cmp	r3, #4
 801258c:	d104      	bne.n	8012598 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	885b      	ldrh	r3, [r3, #2]
 8012592:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012594:	2b08      	cmp	r3, #8
 8012596:	d003      	beq.n	80125a0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f7f9 facb 	bl	800bb34 <pbuf_free>
    return;
 801259e:	e055      	b.n	801264c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	330e      	adds	r3, #14
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	3318      	adds	r3, #24
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	3304      	adds	r3, #4
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d102      	bne.n	80125c0 <etharp_input+0x74>
    for_us = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	75fb      	strb	r3, [r7, #23]
 80125be:	e009      	b.n	80125d4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80125c0:	68ba      	ldr	r2, [r7, #8]
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	3304      	adds	r3, #4
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	429a      	cmp	r2, r3
 80125ca:	bf0c      	ite	eq
 80125cc:	2301      	moveq	r3, #1
 80125ce:	2300      	movne	r3, #0
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	f103 0208 	add.w	r2, r3, #8
 80125da:	7dfb      	ldrb	r3, [r7, #23]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d001      	beq.n	80125e4 <etharp_input+0x98>
 80125e0:	2301      	movs	r3, #1
 80125e2:	e000      	b.n	80125e6 <etharp_input+0x9a>
 80125e4:	2302      	movs	r3, #2
 80125e6:	f107 010c 	add.w	r1, r7, #12
 80125ea:	6838      	ldr	r0, [r7, #0]
 80125ec:	f7ff fed8 	bl	80123a0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	88db      	ldrh	r3, [r3, #6]
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125fa:	d003      	beq.n	8012604 <etharp_input+0xb8>
 80125fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012600:	d01e      	beq.n	8012640 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012602:	e020      	b.n	8012646 <etharp_input+0xfa>
      if (for_us) {
 8012604:	7dfb      	ldrb	r3, [r7, #23]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d01c      	beq.n	8012644 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012620:	693a      	ldr	r2, [r7, #16]
 8012622:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012624:	2102      	movs	r1, #2
 8012626:	9103      	str	r1, [sp, #12]
 8012628:	f107 010c 	add.w	r1, r7, #12
 801262c:	9102      	str	r1, [sp, #8]
 801262e:	9201      	str	r2, [sp, #4]
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	462b      	mov	r3, r5
 8012634:	4622      	mov	r2, r4
 8012636:	4601      	mov	r1, r0
 8012638:	6838      	ldr	r0, [r7, #0]
 801263a:	f000 faeb 	bl	8012c14 <etharp_raw>
      break;
 801263e:	e001      	b.n	8012644 <etharp_input+0xf8>
      break;
 8012640:	bf00      	nop
 8012642:	e000      	b.n	8012646 <etharp_input+0xfa>
      break;
 8012644:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7f9 fa74 	bl	800bb34 <pbuf_free>
}
 801264c:	3718      	adds	r7, #24
 801264e:	46bd      	mov	sp, r7
 8012650:	bdb0      	pop	{r4, r5, r7, pc}
 8012652:	bf00      	nop
 8012654:	08017d20 	.word	0x08017d20
 8012658:	08017e70 	.word	0x08017e70
 801265c:	08017d98 	.word	0x08017d98

08012660 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b086      	sub	sp, #24
 8012664:	af02      	add	r7, sp, #8
 8012666:	60f8      	str	r0, [r7, #12]
 8012668:	60b9      	str	r1, [r7, #8]
 801266a:	4613      	mov	r3, r2
 801266c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801266e:	79fa      	ldrb	r2, [r7, #7]
 8012670:	4944      	ldr	r1, [pc, #272]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 8012672:	4613      	mov	r3, r2
 8012674:	005b      	lsls	r3, r3, #1
 8012676:	4413      	add	r3, r2
 8012678:	00db      	lsls	r3, r3, #3
 801267a:	440b      	add	r3, r1
 801267c:	3314      	adds	r3, #20
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	2b01      	cmp	r3, #1
 8012682:	d806      	bhi.n	8012692 <etharp_output_to_arp_index+0x32>
 8012684:	4b40      	ldr	r3, [pc, #256]	@ (8012788 <etharp_output_to_arp_index+0x128>)
 8012686:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801268a:	4940      	ldr	r1, [pc, #256]	@ (801278c <etharp_output_to_arp_index+0x12c>)
 801268c:	4840      	ldr	r0, [pc, #256]	@ (8012790 <etharp_output_to_arp_index+0x130>)
 801268e:	f002 f9a1 	bl	80149d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012692:	79fa      	ldrb	r2, [r7, #7]
 8012694:	493b      	ldr	r1, [pc, #236]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 8012696:	4613      	mov	r3, r2
 8012698:	005b      	lsls	r3, r3, #1
 801269a:	4413      	add	r3, r2
 801269c:	00db      	lsls	r3, r3, #3
 801269e:	440b      	add	r3, r1
 80126a0:	3314      	adds	r3, #20
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	2b02      	cmp	r3, #2
 80126a6:	d153      	bne.n	8012750 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80126a8:	79fa      	ldrb	r2, [r7, #7]
 80126aa:	4936      	ldr	r1, [pc, #216]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 80126ac:	4613      	mov	r3, r2
 80126ae:	005b      	lsls	r3, r3, #1
 80126b0:	4413      	add	r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	440b      	add	r3, r1
 80126b6:	3312      	adds	r3, #18
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80126be:	d919      	bls.n	80126f4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80126c0:	79fa      	ldrb	r2, [r7, #7]
 80126c2:	4613      	mov	r3, r2
 80126c4:	005b      	lsls	r3, r3, #1
 80126c6:	4413      	add	r3, r2
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	4a2e      	ldr	r2, [pc, #184]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 80126cc:	4413      	add	r3, r2
 80126ce:	3304      	adds	r3, #4
 80126d0:	4619      	mov	r1, r3
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f000 fb4c 	bl	8012d70 <etharp_request>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d138      	bne.n	8012750 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80126de:	79fa      	ldrb	r2, [r7, #7]
 80126e0:	4928      	ldr	r1, [pc, #160]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 80126e2:	4613      	mov	r3, r2
 80126e4:	005b      	lsls	r3, r3, #1
 80126e6:	4413      	add	r3, r2
 80126e8:	00db      	lsls	r3, r3, #3
 80126ea:	440b      	add	r3, r1
 80126ec:	3314      	adds	r3, #20
 80126ee:	2203      	movs	r2, #3
 80126f0:	701a      	strb	r2, [r3, #0]
 80126f2:	e02d      	b.n	8012750 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80126f4:	79fa      	ldrb	r2, [r7, #7]
 80126f6:	4923      	ldr	r1, [pc, #140]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 80126f8:	4613      	mov	r3, r2
 80126fa:	005b      	lsls	r3, r3, #1
 80126fc:	4413      	add	r3, r2
 80126fe:	00db      	lsls	r3, r3, #3
 8012700:	440b      	add	r3, r1
 8012702:	3312      	adds	r3, #18
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801270a:	d321      	bcc.n	8012750 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801270c:	79fa      	ldrb	r2, [r7, #7]
 801270e:	4613      	mov	r3, r2
 8012710:	005b      	lsls	r3, r3, #1
 8012712:	4413      	add	r3, r2
 8012714:	00db      	lsls	r3, r3, #3
 8012716:	4a1b      	ldr	r2, [pc, #108]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 8012718:	4413      	add	r3, r2
 801271a:	1d19      	adds	r1, r3, #4
 801271c:	79fa      	ldrb	r2, [r7, #7]
 801271e:	4613      	mov	r3, r2
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	4413      	add	r3, r2
 8012724:	00db      	lsls	r3, r3, #3
 8012726:	3308      	adds	r3, #8
 8012728:	4a16      	ldr	r2, [pc, #88]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 801272a:	4413      	add	r3, r2
 801272c:	3304      	adds	r3, #4
 801272e:	461a      	mov	r2, r3
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	f000 fafb 	bl	8012d2c <etharp_request_dst>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d109      	bne.n	8012750 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801273c:	79fa      	ldrb	r2, [r7, #7]
 801273e:	4911      	ldr	r1, [pc, #68]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 8012740:	4613      	mov	r3, r2
 8012742:	005b      	lsls	r3, r3, #1
 8012744:	4413      	add	r3, r2
 8012746:	00db      	lsls	r3, r3, #3
 8012748:	440b      	add	r3, r1
 801274a:	3314      	adds	r3, #20
 801274c:	2203      	movs	r2, #3
 801274e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012756:	79fa      	ldrb	r2, [r7, #7]
 8012758:	4613      	mov	r3, r2
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	4413      	add	r3, r2
 801275e:	00db      	lsls	r3, r3, #3
 8012760:	3308      	adds	r3, #8
 8012762:	4a08      	ldr	r2, [pc, #32]	@ (8012784 <etharp_output_to_arp_index+0x124>)
 8012764:	4413      	add	r3, r2
 8012766:	3304      	adds	r3, #4
 8012768:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801276c:	9200      	str	r2, [sp, #0]
 801276e:	460a      	mov	r2, r1
 8012770:	68b9      	ldr	r1, [r7, #8]
 8012772:	68f8      	ldr	r0, [r7, #12]
 8012774:	f001 fed0 	bl	8014518 <ethernet_output>
 8012778:	4603      	mov	r3, r0
}
 801277a:	4618      	mov	r0, r3
 801277c:	3710      	adds	r7, #16
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	2000d844 	.word	0x2000d844
 8012788:	08017d20 	.word	0x08017d20
 801278c:	08017e90 	.word	0x08017e90
 8012790:	08017d98 	.word	0x08017d98

08012794 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b08a      	sub	sp, #40	@ 0x28
 8012798:	af02      	add	r7, sp, #8
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d106      	bne.n	80127b8 <etharp_output+0x24>
 80127aa:	4b73      	ldr	r3, [pc, #460]	@ (8012978 <etharp_output+0x1e4>)
 80127ac:	f240 321e 	movw	r2, #798	@ 0x31e
 80127b0:	4972      	ldr	r1, [pc, #456]	@ (801297c <etharp_output+0x1e8>)
 80127b2:	4873      	ldr	r0, [pc, #460]	@ (8012980 <etharp_output+0x1ec>)
 80127b4:	f002 f90e 	bl	80149d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <etharp_output+0x38>
 80127be:	4b6e      	ldr	r3, [pc, #440]	@ (8012978 <etharp_output+0x1e4>)
 80127c0:	f240 321f 	movw	r2, #799	@ 0x31f
 80127c4:	496f      	ldr	r1, [pc, #444]	@ (8012984 <etharp_output+0x1f0>)
 80127c6:	486e      	ldr	r0, [pc, #440]	@ (8012980 <etharp_output+0x1ec>)
 80127c8:	f002 f904 	bl	80149d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d106      	bne.n	80127e0 <etharp_output+0x4c>
 80127d2:	4b69      	ldr	r3, [pc, #420]	@ (8012978 <etharp_output+0x1e4>)
 80127d4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80127d8:	496b      	ldr	r1, [pc, #428]	@ (8012988 <etharp_output+0x1f4>)
 80127da:	4869      	ldr	r0, [pc, #420]	@ (8012980 <etharp_output+0x1ec>)
 80127dc:	f002 f8fa 	bl	80149d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	68f9      	ldr	r1, [r7, #12]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f000 fef8 	bl	80135dc <ip4_addr_isbroadcast_u32>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d002      	beq.n	80127f8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80127f2:	4b66      	ldr	r3, [pc, #408]	@ (801298c <etharp_output+0x1f8>)
 80127f4:	61fb      	str	r3, [r7, #28]
 80127f6:	e0af      	b.n	8012958 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012800:	2be0      	cmp	r3, #224	@ 0xe0
 8012802:	d118      	bne.n	8012836 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012804:	2301      	movs	r3, #1
 8012806:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012808:	2300      	movs	r3, #0
 801280a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801280c:	235e      	movs	r3, #94	@ 0x5e
 801280e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	3301      	adds	r3, #1
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801281a:	b2db      	uxtb	r3, r3
 801281c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3302      	adds	r3, #2
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	3303      	adds	r3, #3
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801282e:	f107 0310 	add.w	r3, r7, #16
 8012832:	61fb      	str	r3, [r7, #28]
 8012834:	e090      	b.n	8012958 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	3304      	adds	r3, #4
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	405a      	eors	r2, r3
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	3308      	adds	r3, #8
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4013      	ands	r3, r2
 801284a:	2b00      	cmp	r3, #0
 801284c:	d012      	beq.n	8012874 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012854:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012858:	4293      	cmp	r3, r2
 801285a:	d00b      	beq.n	8012874 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	330c      	adds	r3, #12
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d003      	beq.n	801286e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	330c      	adds	r3, #12
 801286a:	61bb      	str	r3, [r7, #24]
 801286c:	e002      	b.n	8012874 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801286e:	f06f 0303 	mvn.w	r3, #3
 8012872:	e07d      	b.n	8012970 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012874:	4b46      	ldr	r3, [pc, #280]	@ (8012990 <etharp_output+0x1fc>)
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	4619      	mov	r1, r3
 801287a:	4a46      	ldr	r2, [pc, #280]	@ (8012994 <etharp_output+0x200>)
 801287c:	460b      	mov	r3, r1
 801287e:	005b      	lsls	r3, r3, #1
 8012880:	440b      	add	r3, r1
 8012882:	00db      	lsls	r3, r3, #3
 8012884:	4413      	add	r3, r2
 8012886:	3314      	adds	r3, #20
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b01      	cmp	r3, #1
 801288c:	d925      	bls.n	80128da <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801288e:	4b40      	ldr	r3, [pc, #256]	@ (8012990 <etharp_output+0x1fc>)
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	4619      	mov	r1, r3
 8012894:	4a3f      	ldr	r2, [pc, #252]	@ (8012994 <etharp_output+0x200>)
 8012896:	460b      	mov	r3, r1
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	440b      	add	r3, r1
 801289c:	00db      	lsls	r3, r3, #3
 801289e:	4413      	add	r3, r2
 80128a0:	3308      	adds	r3, #8
 80128a2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128a4:	68fa      	ldr	r2, [r7, #12]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d117      	bne.n	80128da <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	4b38      	ldr	r3, [pc, #224]	@ (8012990 <etharp_output+0x1fc>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	4618      	mov	r0, r3
 80128b4:	4937      	ldr	r1, [pc, #220]	@ (8012994 <etharp_output+0x200>)
 80128b6:	4603      	mov	r3, r0
 80128b8:	005b      	lsls	r3, r3, #1
 80128ba:	4403      	add	r3, r0
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	440b      	add	r3, r1
 80128c0:	3304      	adds	r3, #4
 80128c2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d108      	bne.n	80128da <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80128c8:	4b31      	ldr	r3, [pc, #196]	@ (8012990 <etharp_output+0x1fc>)
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	461a      	mov	r2, r3
 80128ce:	68b9      	ldr	r1, [r7, #8]
 80128d0:	68f8      	ldr	r0, [r7, #12]
 80128d2:	f7ff fec5 	bl	8012660 <etharp_output_to_arp_index>
 80128d6:	4603      	mov	r3, r0
 80128d8:	e04a      	b.n	8012970 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80128da:	2300      	movs	r3, #0
 80128dc:	75fb      	strb	r3, [r7, #23]
 80128de:	e031      	b.n	8012944 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80128e0:	7dfa      	ldrb	r2, [r7, #23]
 80128e2:	492c      	ldr	r1, [pc, #176]	@ (8012994 <etharp_output+0x200>)
 80128e4:	4613      	mov	r3, r2
 80128e6:	005b      	lsls	r3, r3, #1
 80128e8:	4413      	add	r3, r2
 80128ea:	00db      	lsls	r3, r3, #3
 80128ec:	440b      	add	r3, r1
 80128ee:	3314      	adds	r3, #20
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d923      	bls.n	801293e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80128f6:	7dfa      	ldrb	r2, [r7, #23]
 80128f8:	4926      	ldr	r1, [pc, #152]	@ (8012994 <etharp_output+0x200>)
 80128fa:	4613      	mov	r3, r2
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	4413      	add	r3, r2
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	440b      	add	r3, r1
 8012904:	3308      	adds	r3, #8
 8012906:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	429a      	cmp	r2, r3
 801290c:	d117      	bne.n	801293e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	6819      	ldr	r1, [r3, #0]
 8012912:	7dfa      	ldrb	r2, [r7, #23]
 8012914:	481f      	ldr	r0, [pc, #124]	@ (8012994 <etharp_output+0x200>)
 8012916:	4613      	mov	r3, r2
 8012918:	005b      	lsls	r3, r3, #1
 801291a:	4413      	add	r3, r2
 801291c:	00db      	lsls	r3, r3, #3
 801291e:	4403      	add	r3, r0
 8012920:	3304      	adds	r3, #4
 8012922:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012924:	4299      	cmp	r1, r3
 8012926:	d10a      	bne.n	801293e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012928:	4a19      	ldr	r2, [pc, #100]	@ (8012990 <etharp_output+0x1fc>)
 801292a:	7dfb      	ldrb	r3, [r7, #23]
 801292c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	461a      	mov	r2, r3
 8012932:	68b9      	ldr	r1, [r7, #8]
 8012934:	68f8      	ldr	r0, [r7, #12]
 8012936:	f7ff fe93 	bl	8012660 <etharp_output_to_arp_index>
 801293a:	4603      	mov	r3, r0
 801293c:	e018      	b.n	8012970 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801293e:	7dfb      	ldrb	r3, [r7, #23]
 8012940:	3301      	adds	r3, #1
 8012942:	75fb      	strb	r3, [r7, #23]
 8012944:	7dfb      	ldrb	r3, [r7, #23]
 8012946:	2b09      	cmp	r3, #9
 8012948:	d9ca      	bls.n	80128e0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801294a:	68ba      	ldr	r2, [r7, #8]
 801294c:	69b9      	ldr	r1, [r7, #24]
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f000 f822 	bl	8012998 <etharp_query>
 8012954:	4603      	mov	r3, r0
 8012956:	e00b      	b.n	8012970 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801295e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012962:	9300      	str	r3, [sp, #0]
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	68b9      	ldr	r1, [r7, #8]
 8012968:	68f8      	ldr	r0, [r7, #12]
 801296a:	f001 fdd5 	bl	8014518 <ethernet_output>
 801296e:	4603      	mov	r3, r0
}
 8012970:	4618      	mov	r0, r3
 8012972:	3720      	adds	r7, #32
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	08017d20 	.word	0x08017d20
 801297c:	08017e70 	.word	0x08017e70
 8012980:	08017d98 	.word	0x08017d98
 8012984:	08017ec0 	.word	0x08017ec0
 8012988:	08017e60 	.word	0x08017e60
 801298c:	0801851c 	.word	0x0801851c
 8012990:	2000d934 	.word	0x2000d934
 8012994:	2000d844 	.word	0x2000d844

08012998 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b08c      	sub	sp, #48	@ 0x30
 801299c:	af02      	add	r7, sp, #8
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	3326      	adds	r3, #38	@ 0x26
 80129a8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80129aa:	23ff      	movs	r3, #255	@ 0xff
 80129ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80129b0:	2300      	movs	r3, #0
 80129b2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	68f9      	ldr	r1, [r7, #12]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 fe0e 	bl	80135dc <ip4_addr_isbroadcast_u32>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d10c      	bne.n	80129e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80129ce:	2be0      	cmp	r3, #224	@ 0xe0
 80129d0:	d006      	beq.n	80129e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d003      	beq.n	80129e0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d102      	bne.n	80129e6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80129e0:	f06f 030f 	mvn.w	r3, #15
 80129e4:	e101      	b.n	8012bea <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80129e6:	68fa      	ldr	r2, [r7, #12]
 80129e8:	2101      	movs	r1, #1
 80129ea:	68b8      	ldr	r0, [r7, #8]
 80129ec:	f7ff fb60 	bl	80120b0 <etharp_find_entry>
 80129f0:	4603      	mov	r3, r0
 80129f2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80129f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	da02      	bge.n	8012a02 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80129fc:	8a7b      	ldrh	r3, [r7, #18]
 80129fe:	b25b      	sxtb	r3, r3
 8012a00:	e0f3      	b.n	8012bea <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a02:	8a7b      	ldrh	r3, [r7, #18]
 8012a04:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a06:	d906      	bls.n	8012a16 <etharp_query+0x7e>
 8012a08:	4b7a      	ldr	r3, [pc, #488]	@ (8012bf4 <etharp_query+0x25c>)
 8012a0a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8012a0e:	497a      	ldr	r1, [pc, #488]	@ (8012bf8 <etharp_query+0x260>)
 8012a10:	487a      	ldr	r0, [pc, #488]	@ (8012bfc <etharp_query+0x264>)
 8012a12:	f001 ffdf 	bl	80149d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a16:	8a7b      	ldrh	r3, [r7, #18]
 8012a18:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a1a:	7c7a      	ldrb	r2, [r7, #17]
 8012a1c:	4978      	ldr	r1, [pc, #480]	@ (8012c00 <etharp_query+0x268>)
 8012a1e:	4613      	mov	r3, r2
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	4413      	add	r3, r2
 8012a24:	00db      	lsls	r3, r3, #3
 8012a26:	440b      	add	r3, r1
 8012a28:	3314      	adds	r3, #20
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d115      	bne.n	8012a5c <etharp_query+0xc4>
    is_new_entry = 1;
 8012a30:	2301      	movs	r3, #1
 8012a32:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012a34:	7c7a      	ldrb	r2, [r7, #17]
 8012a36:	4972      	ldr	r1, [pc, #456]	@ (8012c00 <etharp_query+0x268>)
 8012a38:	4613      	mov	r3, r2
 8012a3a:	005b      	lsls	r3, r3, #1
 8012a3c:	4413      	add	r3, r2
 8012a3e:	00db      	lsls	r3, r3, #3
 8012a40:	440b      	add	r3, r1
 8012a42:	3314      	adds	r3, #20
 8012a44:	2201      	movs	r2, #1
 8012a46:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012a48:	7c7a      	ldrb	r2, [r7, #17]
 8012a4a:	496d      	ldr	r1, [pc, #436]	@ (8012c00 <etharp_query+0x268>)
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	4413      	add	r3, r2
 8012a52:	00db      	lsls	r3, r3, #3
 8012a54:	440b      	add	r3, r1
 8012a56:	3308      	adds	r3, #8
 8012a58:	68fa      	ldr	r2, [r7, #12]
 8012a5a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012a5c:	7c7a      	ldrb	r2, [r7, #17]
 8012a5e:	4968      	ldr	r1, [pc, #416]	@ (8012c00 <etharp_query+0x268>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	4413      	add	r3, r2
 8012a66:	00db      	lsls	r3, r3, #3
 8012a68:	440b      	add	r3, r1
 8012a6a:	3314      	adds	r3, #20
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d011      	beq.n	8012a96 <etharp_query+0xfe>
 8012a72:	7c7a      	ldrb	r2, [r7, #17]
 8012a74:	4962      	ldr	r1, [pc, #392]	@ (8012c00 <etharp_query+0x268>)
 8012a76:	4613      	mov	r3, r2
 8012a78:	005b      	lsls	r3, r3, #1
 8012a7a:	4413      	add	r3, r2
 8012a7c:	00db      	lsls	r3, r3, #3
 8012a7e:	440b      	add	r3, r1
 8012a80:	3314      	adds	r3, #20
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d806      	bhi.n	8012a96 <etharp_query+0xfe>
 8012a88:	4b5a      	ldr	r3, [pc, #360]	@ (8012bf4 <etharp_query+0x25c>)
 8012a8a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8012a8e:	495d      	ldr	r1, [pc, #372]	@ (8012c04 <etharp_query+0x26c>)
 8012a90:	485a      	ldr	r0, [pc, #360]	@ (8012bfc <etharp_query+0x264>)
 8012a92:	f001 ff9f 	bl	80149d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012a96:	6a3b      	ldr	r3, [r7, #32]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d102      	bne.n	8012aa2 <etharp_query+0x10a>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d10c      	bne.n	8012abc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012aa2:	68b9      	ldr	r1, [r7, #8]
 8012aa4:	68f8      	ldr	r0, [r7, #12]
 8012aa6:	f000 f963 	bl	8012d70 <etharp_request>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d102      	bne.n	8012abc <etharp_query+0x124>
      return result;
 8012ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012aba:	e096      	b.n	8012bea <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d106      	bne.n	8012ad0 <etharp_query+0x138>
 8012ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8012bf4 <etharp_query+0x25c>)
 8012ac4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012ac8:	494f      	ldr	r1, [pc, #316]	@ (8012c08 <etharp_query+0x270>)
 8012aca:	484c      	ldr	r0, [pc, #304]	@ (8012bfc <etharp_query+0x264>)
 8012acc:	f001 ff82 	bl	80149d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012ad0:	7c7a      	ldrb	r2, [r7, #17]
 8012ad2:	494b      	ldr	r1, [pc, #300]	@ (8012c00 <etharp_query+0x268>)
 8012ad4:	4613      	mov	r3, r2
 8012ad6:	005b      	lsls	r3, r3, #1
 8012ad8:	4413      	add	r3, r2
 8012ada:	00db      	lsls	r3, r3, #3
 8012adc:	440b      	add	r3, r1
 8012ade:	3314      	adds	r3, #20
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d917      	bls.n	8012b16 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012ae6:	4a49      	ldr	r2, [pc, #292]	@ (8012c0c <etharp_query+0x274>)
 8012ae8:	7c7b      	ldrb	r3, [r7, #17]
 8012aea:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012aec:	7c7a      	ldrb	r2, [r7, #17]
 8012aee:	4613      	mov	r3, r2
 8012af0:	005b      	lsls	r3, r3, #1
 8012af2:	4413      	add	r3, r2
 8012af4:	00db      	lsls	r3, r3, #3
 8012af6:	3308      	adds	r3, #8
 8012af8:	4a41      	ldr	r2, [pc, #260]	@ (8012c00 <etharp_query+0x268>)
 8012afa:	4413      	add	r3, r2
 8012afc:	3304      	adds	r3, #4
 8012afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012b02:	9200      	str	r2, [sp, #0]
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	6879      	ldr	r1, [r7, #4]
 8012b08:	68f8      	ldr	r0, [r7, #12]
 8012b0a:	f001 fd05 	bl	8014518 <ethernet_output>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b14:	e067      	b.n	8012be6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b16:	7c7a      	ldrb	r2, [r7, #17]
 8012b18:	4939      	ldr	r1, [pc, #228]	@ (8012c00 <etharp_query+0x268>)
 8012b1a:	4613      	mov	r3, r2
 8012b1c:	005b      	lsls	r3, r3, #1
 8012b1e:	4413      	add	r3, r2
 8012b20:	00db      	lsls	r3, r3, #3
 8012b22:	440b      	add	r3, r1
 8012b24:	3314      	adds	r3, #20
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d15c      	bne.n	8012be6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b34:	e01c      	b.n	8012b70 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	895a      	ldrh	r2, [r3, #10]
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	891b      	ldrh	r3, [r3, #8]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d10a      	bne.n	8012b58 <etharp_query+0x1c0>
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d006      	beq.n	8012b58 <etharp_query+0x1c0>
 8012b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8012bf4 <etharp_query+0x25c>)
 8012b4c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8012b50:	492f      	ldr	r1, [pc, #188]	@ (8012c10 <etharp_query+0x278>)
 8012b52:	482a      	ldr	r0, [pc, #168]	@ (8012bfc <etharp_query+0x264>)
 8012b54:	f001 ff3e 	bl	80149d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	7b1b      	ldrb	r3, [r3, #12]
 8012b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d002      	beq.n	8012b6a <etharp_query+0x1d2>
        copy_needed = 1;
 8012b64:	2301      	movs	r3, #1
 8012b66:	61bb      	str	r3, [r7, #24]
        break;
 8012b68:	e005      	b.n	8012b76 <etharp_query+0x1de>
      }
      p = p->next;
 8012b6a:	69fb      	ldr	r3, [r7, #28]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d1df      	bne.n	8012b36 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012b76:	69bb      	ldr	r3, [r7, #24]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d007      	beq.n	8012b8c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012b82:	200e      	movs	r0, #14
 8012b84:	f7f9 fa4e 	bl	800c024 <pbuf_clone>
 8012b88:	61f8      	str	r0, [r7, #28]
 8012b8a:	e004      	b.n	8012b96 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012b90:	69f8      	ldr	r0, [r7, #28]
 8012b92:	f7f9 f875 	bl	800bc80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d021      	beq.n	8012be0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012b9c:	7c7a      	ldrb	r2, [r7, #17]
 8012b9e:	4918      	ldr	r1, [pc, #96]	@ (8012c00 <etharp_query+0x268>)
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	005b      	lsls	r3, r3, #1
 8012ba4:	4413      	add	r3, r2
 8012ba6:	00db      	lsls	r3, r3, #3
 8012ba8:	440b      	add	r3, r1
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d00a      	beq.n	8012bc6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012bb0:	7c7a      	ldrb	r2, [r7, #17]
 8012bb2:	4913      	ldr	r1, [pc, #76]	@ (8012c00 <etharp_query+0x268>)
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	005b      	lsls	r3, r3, #1
 8012bb8:	4413      	add	r3, r2
 8012bba:	00db      	lsls	r3, r3, #3
 8012bbc:	440b      	add	r3, r1
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7f8 ffb7 	bl	800bb34 <pbuf_free>
      }
      arp_table[i].q = p;
 8012bc6:	7c7a      	ldrb	r2, [r7, #17]
 8012bc8:	490d      	ldr	r1, [pc, #52]	@ (8012c00 <etharp_query+0x268>)
 8012bca:	4613      	mov	r3, r2
 8012bcc:	005b      	lsls	r3, r3, #1
 8012bce:	4413      	add	r3, r2
 8012bd0:	00db      	lsls	r3, r3, #3
 8012bd2:	440b      	add	r3, r1
 8012bd4:	69fa      	ldr	r2, [r7, #28]
 8012bd6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012bde:	e002      	b.n	8012be6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012be0:	23ff      	movs	r3, #255	@ 0xff
 8012be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3728      	adds	r7, #40	@ 0x28
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	08017d20 	.word	0x08017d20
 8012bf8:	08017ecc 	.word	0x08017ecc
 8012bfc:	08017d98 	.word	0x08017d98
 8012c00:	2000d844 	.word	0x2000d844
 8012c04:	08017edc 	.word	0x08017edc
 8012c08:	08017ec0 	.word	0x08017ec0
 8012c0c:	2000d934 	.word	0x2000d934
 8012c10:	08017f04 	.word	0x08017f04

08012c14 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b08a      	sub	sp, #40	@ 0x28
 8012c18:	af02      	add	r7, sp, #8
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
 8012c20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012c22:	2300      	movs	r3, #0
 8012c24:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d106      	bne.n	8012c3a <etharp_raw+0x26>
 8012c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8012d18 <etharp_raw+0x104>)
 8012c2e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012c32:	493a      	ldr	r1, [pc, #232]	@ (8012d1c <etharp_raw+0x108>)
 8012c34:	483a      	ldr	r0, [pc, #232]	@ (8012d20 <etharp_raw+0x10c>)
 8012c36:	f001 fecd 	bl	80149d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012c3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c3e:	211c      	movs	r1, #28
 8012c40:	200e      	movs	r0, #14
 8012c42:	f7f8 fc93 	bl	800b56c <pbuf_alloc>
 8012c46:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d102      	bne.n	8012c54 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c52:	e05d      	b.n	8012d10 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	895b      	ldrh	r3, [r3, #10]
 8012c58:	2b1b      	cmp	r3, #27
 8012c5a:	d806      	bhi.n	8012c6a <etharp_raw+0x56>
 8012c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8012d18 <etharp_raw+0x104>)
 8012c5e:	f240 4262 	movw	r2, #1122	@ 0x462
 8012c62:	4930      	ldr	r1, [pc, #192]	@ (8012d24 <etharp_raw+0x110>)
 8012c64:	482e      	ldr	r0, [pc, #184]	@ (8012d20 <etharp_raw+0x10c>)
 8012c66:	f001 feb5 	bl	80149d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012c70:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7f7 fb6c 	bl	800a350 <lwip_htons>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012c86:	2b06      	cmp	r3, #6
 8012c88:	d006      	beq.n	8012c98 <etharp_raw+0x84>
 8012c8a:	4b23      	ldr	r3, [pc, #140]	@ (8012d18 <etharp_raw+0x104>)
 8012c8c:	f240 4269 	movw	r2, #1129	@ 0x469
 8012c90:	4925      	ldr	r1, [pc, #148]	@ (8012d28 <etharp_raw+0x114>)
 8012c92:	4823      	ldr	r0, [pc, #140]	@ (8012d20 <etharp_raw+0x10c>)
 8012c94:	f001 fe9e 	bl	80149d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	3308      	adds	r3, #8
 8012c9c:	2206      	movs	r2, #6
 8012c9e:	6839      	ldr	r1, [r7, #0]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f001 ff72 	bl	8014b8a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	3312      	adds	r3, #18
 8012caa:	2206      	movs	r2, #6
 8012cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f001 ff6b 	bl	8014b8a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	330e      	adds	r3, #14
 8012cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012cba:	6812      	ldr	r2, [r2, #0]
 8012cbc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	3318      	adds	r3, #24
 8012cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012cc4:	6812      	ldr	r2, [r2, #0]
 8012cc6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	701a      	strb	r2, [r3, #0]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	f042 0201 	orr.w	r2, r2, #1
 8012cd4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f042 0208 	orr.w	r2, r2, #8
 8012cde:	709a      	strb	r2, [r3, #2]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	2206      	movs	r2, #6
 8012ce8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	2204      	movs	r2, #4
 8012cee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012cf0:	f640 0306 	movw	r3, #2054	@ 0x806
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	68ba      	ldr	r2, [r7, #8]
 8012cfa:	69b9      	ldr	r1, [r7, #24]
 8012cfc:	68f8      	ldr	r0, [r7, #12]
 8012cfe:	f001 fc0b 	bl	8014518 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012d02:	69b8      	ldr	r0, [r7, #24]
 8012d04:	f7f8 ff16 	bl	800bb34 <pbuf_free>
  p = NULL;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3720      	adds	r7, #32
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	08017d20 	.word	0x08017d20
 8012d1c:	08017e70 	.word	0x08017e70
 8012d20:	08017d98 	.word	0x08017d98
 8012d24:	08017f20 	.word	0x08017f20
 8012d28:	08017f54 	.word	0x08017f54

08012d2c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b088      	sub	sp, #32
 8012d30:	af04      	add	r7, sp, #16
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d48:	2201      	movs	r2, #1
 8012d4a:	9203      	str	r2, [sp, #12]
 8012d4c:	68ba      	ldr	r2, [r7, #8]
 8012d4e:	9202      	str	r2, [sp, #8]
 8012d50:	4a06      	ldr	r2, [pc, #24]	@ (8012d6c <etharp_request_dst+0x40>)
 8012d52:	9201      	str	r2, [sp, #4]
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	4603      	mov	r3, r0
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f7ff ff5a 	bl	8012c14 <etharp_raw>
 8012d60:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3710      	adds	r7, #16
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	08018524 	.word	0x08018524

08012d70 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012d7a:	4a05      	ldr	r2, [pc, #20]	@ (8012d90 <etharp_request+0x20>)
 8012d7c:	6839      	ldr	r1, [r7, #0]
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f7ff ffd4 	bl	8012d2c <etharp_request_dst>
 8012d84:	4603      	mov	r3, r0
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	0801851c 	.word	0x0801851c

08012d94 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b08e      	sub	sp, #56	@ 0x38
 8012d98:	af04      	add	r7, sp, #16
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012d9e:	4b79      	ldr	r3, [pc, #484]	@ (8012f84 <icmp_input+0x1f0>)
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	f003 030f 	and.w	r3, r3, #15
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	009b      	lsls	r3, r3, #2
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012db4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012db6:	2b13      	cmp	r3, #19
 8012db8:	f240 80cd 	bls.w	8012f56 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	895b      	ldrh	r3, [r3, #10]
 8012dc0:	2b03      	cmp	r3, #3
 8012dc2:	f240 80ca 	bls.w	8012f5a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	685b      	ldr	r3, [r3, #4]
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012dd0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f000 80b7 	beq.w	8012f48 <icmp_input+0x1b4>
 8012dda:	2b08      	cmp	r3, #8
 8012ddc:	f040 80b7 	bne.w	8012f4e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012de0:	4b69      	ldr	r3, [pc, #420]	@ (8012f88 <icmp_input+0x1f4>)
 8012de2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012de4:	4b67      	ldr	r3, [pc, #412]	@ (8012f84 <icmp_input+0x1f0>)
 8012de6:	695b      	ldr	r3, [r3, #20]
 8012de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012dec:	2be0      	cmp	r3, #224	@ 0xe0
 8012dee:	f000 80bb 	beq.w	8012f68 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012df2:	4b64      	ldr	r3, [pc, #400]	@ (8012f84 <icmp_input+0x1f0>)
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	4a63      	ldr	r2, [pc, #396]	@ (8012f84 <icmp_input+0x1f0>)
 8012df8:	6812      	ldr	r2, [r2, #0]
 8012dfa:	4611      	mov	r1, r2
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f000 fbed 	bl	80135dc <ip4_addr_isbroadcast_u32>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	f040 80b1 	bne.w	8012f6c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	891b      	ldrh	r3, [r3, #8]
 8012e0e:	2b07      	cmp	r3, #7
 8012e10:	f240 80a5 	bls.w	8012f5e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012e14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e16:	330e      	adds	r3, #14
 8012e18:	4619      	mov	r1, r3
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7f8 fdf4 	bl	800ba08 <pbuf_add_header>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d04b      	beq.n	8012ebe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	891a      	ldrh	r2, [r3, #8]
 8012e2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e2c:	4413      	add	r3, r2
 8012e2e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	891b      	ldrh	r3, [r3, #8]
 8012e34:	8b7a      	ldrh	r2, [r7, #26]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	f0c0 809a 	bcc.w	8012f70 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012e3c:	8b7b      	ldrh	r3, [r7, #26]
 8012e3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012e42:	4619      	mov	r1, r3
 8012e44:	200e      	movs	r0, #14
 8012e46:	f7f8 fb91 	bl	800b56c <pbuf_alloc>
 8012e4a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f000 8090 	beq.w	8012f74 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	895b      	ldrh	r3, [r3, #10]
 8012e58:	461a      	mov	r2, r3
 8012e5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e5c:	3308      	adds	r3, #8
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d203      	bcs.n	8012e6a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012e62:	6978      	ldr	r0, [r7, #20]
 8012e64:	f7f8 fe66 	bl	800bb34 <pbuf_free>
          goto icmperr;
 8012e68:	e085      	b.n	8012f76 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012e70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e72:	4618      	mov	r0, r3
 8012e74:	f001 fe89 	bl	8014b8a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	6978      	ldr	r0, [r7, #20]
 8012e7e:	f7f8 fdd3 	bl	800ba28 <pbuf_remove_header>
 8012e82:	4603      	mov	r3, r0
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d009      	beq.n	8012e9c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012e88:	4b40      	ldr	r3, [pc, #256]	@ (8012f8c <icmp_input+0x1f8>)
 8012e8a:	22b6      	movs	r2, #182	@ 0xb6
 8012e8c:	4940      	ldr	r1, [pc, #256]	@ (8012f90 <icmp_input+0x1fc>)
 8012e8e:	4841      	ldr	r0, [pc, #260]	@ (8012f94 <icmp_input+0x200>)
 8012e90:	f001 fda0 	bl	80149d4 <iprintf>
          pbuf_free(r);
 8012e94:	6978      	ldr	r0, [r7, #20]
 8012e96:	f7f8 fe4d 	bl	800bb34 <pbuf_free>
          goto icmperr;
 8012e9a:	e06c      	b.n	8012f76 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012e9c:	6879      	ldr	r1, [r7, #4]
 8012e9e:	6978      	ldr	r0, [r7, #20]
 8012ea0:	f7f8 ff7c 	bl	800bd9c <pbuf_copy>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d003      	beq.n	8012eb2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012eaa:	6978      	ldr	r0, [r7, #20]
 8012eac:	f7f8 fe42 	bl	800bb34 <pbuf_free>
          goto icmperr;
 8012eb0:	e061      	b.n	8012f76 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f7f8 fe3e 	bl	800bb34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	607b      	str	r3, [r7, #4]
 8012ebc:	e00f      	b.n	8012ede <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ebe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ec0:	330e      	adds	r3, #14
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7f8 fdaf 	bl	800ba28 <pbuf_remove_header>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d006      	beq.n	8012ede <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8012f8c <icmp_input+0x1f8>)
 8012ed2:	22c7      	movs	r2, #199	@ 0xc7
 8012ed4:	4930      	ldr	r1, [pc, #192]	@ (8012f98 <icmp_input+0x204>)
 8012ed6:	482f      	ldr	r0, [pc, #188]	@ (8012f94 <icmp_input+0x200>)
 8012ed8:	f001 fd7c 	bl	80149d4 <iprintf>
          goto icmperr;
 8012edc:	e04b      	b.n	8012f76 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012ee4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f7f8 fd8d 	bl	800ba08 <pbuf_add_header>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d12b      	bne.n	8012f4c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012f02:	4b20      	ldr	r3, [pc, #128]	@ (8012f84 <icmp_input+0x1f0>)
 8012f04:	691a      	ldr	r2, [r3, #16]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	2200      	movs	r2, #0
 8012f14:	709a      	strb	r2, [r3, #2]
 8012f16:	2200      	movs	r2, #0
 8012f18:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	22ff      	movs	r2, #255	@ 0xff
 8012f1e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2200      	movs	r2, #0
 8012f24:	729a      	strb	r2, [r3, #10]
 8012f26:	2200      	movs	r2, #0
 8012f28:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	9302      	str	r3, [sp, #8]
 8012f2e:	2301      	movs	r3, #1
 8012f30:	9301      	str	r3, [sp, #4]
 8012f32:	2300      	movs	r3, #0
 8012f34:	9300      	str	r3, [sp, #0]
 8012f36:	23ff      	movs	r3, #255	@ 0xff
 8012f38:	2200      	movs	r2, #0
 8012f3a:	69f9      	ldr	r1, [r7, #28]
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f000 fa75 	bl	801342c <ip4_output_if>
 8012f42:	4603      	mov	r3, r0
 8012f44:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012f46:	e001      	b.n	8012f4c <icmp_input+0x1b8>
      break;
 8012f48:	bf00      	nop
 8012f4a:	e000      	b.n	8012f4e <icmp_input+0x1ba>
      break;
 8012f4c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7f8 fdf0 	bl	800bb34 <pbuf_free>
  return;
 8012f54:	e013      	b.n	8012f7e <icmp_input+0x1ea>
    goto lenerr;
 8012f56:	bf00      	nop
 8012f58:	e002      	b.n	8012f60 <icmp_input+0x1cc>
    goto lenerr;
 8012f5a:	bf00      	nop
 8012f5c:	e000      	b.n	8012f60 <icmp_input+0x1cc>
        goto lenerr;
 8012f5e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7f8 fde7 	bl	800bb34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f66:	e00a      	b.n	8012f7e <icmp_input+0x1ea>
        goto icmperr;
 8012f68:	bf00      	nop
 8012f6a:	e004      	b.n	8012f76 <icmp_input+0x1e2>
        goto icmperr;
 8012f6c:	bf00      	nop
 8012f6e:	e002      	b.n	8012f76 <icmp_input+0x1e2>
          goto icmperr;
 8012f70:	bf00      	nop
 8012f72:	e000      	b.n	8012f76 <icmp_input+0x1e2>
          goto icmperr;
 8012f74:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f7f8 fddc 	bl	800bb34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f7c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012f7e:	3728      	adds	r7, #40	@ 0x28
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	2000a090 	.word	0x2000a090
 8012f88:	2000a0a4 	.word	0x2000a0a4
 8012f8c:	08017f98 	.word	0x08017f98
 8012f90:	08017fd0 	.word	0x08017fd0
 8012f94:	08018008 	.word	0x08018008
 8012f98:	08018030 	.word	0x08018030

08012f9c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012fa8:	78fb      	ldrb	r3, [r7, #3]
 8012faa:	461a      	mov	r2, r3
 8012fac:	2103      	movs	r1, #3
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 f814 	bl	8012fdc <icmp_send_response>
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b082      	sub	sp, #8
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012fc8:	78fb      	ldrb	r3, [r7, #3]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	210b      	movs	r1, #11
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 f804 	bl	8012fdc <icmp_send_response>
}
 8012fd4:	bf00      	nop
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}

08012fdc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b08c      	sub	sp, #48	@ 0x30
 8012fe0:	af04      	add	r7, sp, #16
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	70fb      	strb	r3, [r7, #3]
 8012fe8:	4613      	mov	r3, r2
 8012fea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012fec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012ff0:	2124      	movs	r1, #36	@ 0x24
 8012ff2:	2022      	movs	r0, #34	@ 0x22
 8012ff4:	f7f8 faba 	bl	800b56c <pbuf_alloc>
 8012ff8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d04c      	beq.n	801309a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	895b      	ldrh	r3, [r3, #10]
 8013004:	2b23      	cmp	r3, #35	@ 0x23
 8013006:	d806      	bhi.n	8013016 <icmp_send_response+0x3a>
 8013008:	4b26      	ldr	r3, [pc, #152]	@ (80130a4 <icmp_send_response+0xc8>)
 801300a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801300e:	4926      	ldr	r1, [pc, #152]	@ (80130a8 <icmp_send_response+0xcc>)
 8013010:	4826      	ldr	r0, [pc, #152]	@ (80130ac <icmp_send_response+0xd0>)
 8013012:	f001 fcdf 	bl	80149d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	78fa      	ldrb	r2, [r7, #3]
 8013026:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	78ba      	ldrb	r2, [r7, #2]
 801302c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	2200      	movs	r2, #0
 8013032:	711a      	strb	r2, [r3, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	2200      	movs	r2, #0
 801303c:	719a      	strb	r2, [r3, #6]
 801303e:	2200      	movs	r2, #0
 8013040:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	f103 0008 	add.w	r0, r3, #8
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	221c      	movs	r2, #28
 8013050:	4619      	mov	r1, r3
 8013052:	f001 fd9a 	bl	8014b8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801305c:	f107 030c 	add.w	r3, r7, #12
 8013060:	4618      	mov	r0, r3
 8013062:	f000 f825 	bl	80130b0 <ip4_route>
 8013066:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d011      	beq.n	8013092 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	2200      	movs	r2, #0
 8013072:	709a      	strb	r2, [r3, #2]
 8013074:	2200      	movs	r2, #0
 8013076:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013078:	f107 020c 	add.w	r2, r7, #12
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	9302      	str	r3, [sp, #8]
 8013080:	2301      	movs	r3, #1
 8013082:	9301      	str	r3, [sp, #4]
 8013084:	2300      	movs	r3, #0
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	23ff      	movs	r3, #255	@ 0xff
 801308a:	2100      	movs	r1, #0
 801308c:	69f8      	ldr	r0, [r7, #28]
 801308e:	f000 f9cd 	bl	801342c <ip4_output_if>
  }
  pbuf_free(q);
 8013092:	69f8      	ldr	r0, [r7, #28]
 8013094:	f7f8 fd4e 	bl	800bb34 <pbuf_free>
 8013098:	e000      	b.n	801309c <icmp_send_response+0xc0>
    return;
 801309a:	bf00      	nop
}
 801309c:	3720      	adds	r7, #32
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	08017f98 	.word	0x08017f98
 80130a8:	08018064 	.word	0x08018064
 80130ac:	08018008 	.word	0x08018008

080130b0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80130b8:	4b33      	ldr	r3, [pc, #204]	@ (8013188 <ip4_route+0xd8>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	60fb      	str	r3, [r7, #12]
 80130be:	e036      	b.n	801312e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80130c6:	f003 0301 	and.w	r3, r3, #1
 80130ca:	b2db      	uxtb	r3, r3
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d02b      	beq.n	8013128 <ip4_route+0x78>
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80130d6:	089b      	lsrs	r3, r3, #2
 80130d8:	f003 0301 	and.w	r3, r3, #1
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d022      	beq.n	8013128 <ip4_route+0x78>
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	3304      	adds	r3, #4
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d01d      	beq.n	8013128 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681a      	ldr	r2, [r3, #0]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	3304      	adds	r3, #4
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	405a      	eors	r2, r3
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	3308      	adds	r3, #8
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	4013      	ands	r3, r2
 8013100:	2b00      	cmp	r3, #0
 8013102:	d101      	bne.n	8013108 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	e038      	b.n	801317a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801310e:	f003 0302 	and.w	r3, r3, #2
 8013112:	2b00      	cmp	r3, #0
 8013114:	d108      	bne.n	8013128 <ip4_route+0x78>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	330c      	adds	r3, #12
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	429a      	cmp	r2, r3
 8013122:	d101      	bne.n	8013128 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	e028      	b.n	801317a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	60fb      	str	r3, [r7, #12]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d1c5      	bne.n	80130c0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013134:	4b15      	ldr	r3, [pc, #84]	@ (801318c <ip4_route+0xdc>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d01a      	beq.n	8013172 <ip4_route+0xc2>
 801313c:	4b13      	ldr	r3, [pc, #76]	@ (801318c <ip4_route+0xdc>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013144:	f003 0301 	and.w	r3, r3, #1
 8013148:	2b00      	cmp	r3, #0
 801314a:	d012      	beq.n	8013172 <ip4_route+0xc2>
 801314c:	4b0f      	ldr	r3, [pc, #60]	@ (801318c <ip4_route+0xdc>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013154:	f003 0304 	and.w	r3, r3, #4
 8013158:	2b00      	cmp	r3, #0
 801315a:	d00a      	beq.n	8013172 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801315c:	4b0b      	ldr	r3, [pc, #44]	@ (801318c <ip4_route+0xdc>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	3304      	adds	r3, #4
 8013162:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013164:	2b00      	cmp	r3, #0
 8013166:	d004      	beq.n	8013172 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	b2db      	uxtb	r3, r3
 801316e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013170:	d101      	bne.n	8013176 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013172:	2300      	movs	r3, #0
 8013174:	e001      	b.n	801317a <ip4_route+0xca>
  }

  return netif_default;
 8013176:	4b05      	ldr	r3, [pc, #20]	@ (801318c <ip4_route+0xdc>)
 8013178:	681b      	ldr	r3, [r3, #0]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3714      	adds	r7, #20
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr
 8013186:	bf00      	nop
 8013188:	2000d7d8 	.word	0x2000d7d8
 801318c:	2000d7dc 	.word	0x2000d7dc

08013190 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801319e:	f003 0301 	and.w	r3, r3, #1
 80131a2:	b2db      	uxtb	r3, r3
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d016      	beq.n	80131d6 <ip4_input_accept+0x46>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	3304      	adds	r3, #4
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d011      	beq.n	80131d6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80131b2:	4b0b      	ldr	r3, [pc, #44]	@ (80131e0 <ip4_input_accept+0x50>)
 80131b4:	695a      	ldr	r2, [r3, #20]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	3304      	adds	r3, #4
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	429a      	cmp	r2, r3
 80131be:	d008      	beq.n	80131d2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80131c0:	4b07      	ldr	r3, [pc, #28]	@ (80131e0 <ip4_input_accept+0x50>)
 80131c2:	695b      	ldr	r3, [r3, #20]
 80131c4:	6879      	ldr	r1, [r7, #4]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f000 fa08 	bl	80135dc <ip4_addr_isbroadcast_u32>
 80131cc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80131d2:	2301      	movs	r3, #1
 80131d4:	e000      	b.n	80131d8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80131d6:	2300      	movs	r3, #0
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	2000a090 	.word	0x2000a090

080131e4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b086      	sub	sp, #24
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	091b      	lsrs	r3, r3, #4
 80131fa:	b2db      	uxtb	r3, r3
 80131fc:	2b04      	cmp	r3, #4
 80131fe:	d004      	beq.n	801320a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7f8 fc97 	bl	800bb34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013206:	2300      	movs	r3, #0
 8013208:	e107      	b.n	801341a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	f003 030f 	and.w	r3, r3, #15
 8013212:	b2db      	uxtb	r3, r3
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	b2db      	uxtb	r3, r3
 8013218:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	885b      	ldrh	r3, [r3, #2]
 801321e:	b29b      	uxth	r3, r3
 8013220:	4618      	mov	r0, r3
 8013222:	f7f7 f895 	bl	800a350 <lwip_htons>
 8013226:	4603      	mov	r3, r0
 8013228:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	891b      	ldrh	r3, [r3, #8]
 801322e:	89ba      	ldrh	r2, [r7, #12]
 8013230:	429a      	cmp	r2, r3
 8013232:	d204      	bcs.n	801323e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013234:	89bb      	ldrh	r3, [r7, #12]
 8013236:	4619      	mov	r1, r3
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f7f8 faf5 	bl	800b828 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	895b      	ldrh	r3, [r3, #10]
 8013242:	89fa      	ldrh	r2, [r7, #14]
 8013244:	429a      	cmp	r2, r3
 8013246:	d807      	bhi.n	8013258 <ip4_input+0x74>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	891b      	ldrh	r3, [r3, #8]
 801324c:	89ba      	ldrh	r2, [r7, #12]
 801324e:	429a      	cmp	r2, r3
 8013250:	d802      	bhi.n	8013258 <ip4_input+0x74>
 8013252:	89fb      	ldrh	r3, [r7, #14]
 8013254:	2b13      	cmp	r3, #19
 8013256:	d804      	bhi.n	8013262 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7f8 fc6b 	bl	800bb34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801325e:	2300      	movs	r3, #0
 8013260:	e0db      	b.n	801341a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	691b      	ldr	r3, [r3, #16]
 8013266:	4a6f      	ldr	r2, [pc, #444]	@ (8013424 <ip4_input+0x240>)
 8013268:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	68db      	ldr	r3, [r3, #12]
 801326e:	4a6d      	ldr	r2, [pc, #436]	@ (8013424 <ip4_input+0x240>)
 8013270:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013272:	4b6c      	ldr	r3, [pc, #432]	@ (8013424 <ip4_input+0x240>)
 8013274:	695b      	ldr	r3, [r3, #20]
 8013276:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801327a:	2be0      	cmp	r3, #224	@ 0xe0
 801327c:	d112      	bne.n	80132a4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013284:	f003 0301 	and.w	r3, r3, #1
 8013288:	b2db      	uxtb	r3, r3
 801328a:	2b00      	cmp	r3, #0
 801328c:	d007      	beq.n	801329e <ip4_input+0xba>
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	3304      	adds	r3, #4
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <ip4_input+0xba>
      netif = inp;
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	613b      	str	r3, [r7, #16]
 801329c:	e02a      	b.n	80132f4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	613b      	str	r3, [r7, #16]
 80132a2:	e027      	b.n	80132f4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80132a4:	6838      	ldr	r0, [r7, #0]
 80132a6:	f7ff ff73 	bl	8013190 <ip4_input_accept>
 80132aa:	4603      	mov	r3, r0
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d002      	beq.n	80132b6 <ip4_input+0xd2>
      netif = inp;
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	613b      	str	r3, [r7, #16]
 80132b4:	e01e      	b.n	80132f4 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132b6:	2300      	movs	r3, #0
 80132b8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80132ba:	4b5a      	ldr	r3, [pc, #360]	@ (8013424 <ip4_input+0x240>)
 80132bc:	695b      	ldr	r3, [r3, #20]
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80132c2:	d017      	beq.n	80132f4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80132c4:	4b58      	ldr	r3, [pc, #352]	@ (8013428 <ip4_input+0x244>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	613b      	str	r3, [r7, #16]
 80132ca:	e00e      	b.n	80132ea <ip4_input+0x106>
          if (netif == inp) {
 80132cc:	693a      	ldr	r2, [r7, #16]
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d006      	beq.n	80132e2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80132d4:	6938      	ldr	r0, [r7, #16]
 80132d6:	f7ff ff5b 	bl	8013190 <ip4_input_accept>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d108      	bne.n	80132f2 <ip4_input+0x10e>
 80132e0:	e000      	b.n	80132e4 <ip4_input+0x100>
            continue;
 80132e2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	613b      	str	r3, [r7, #16]
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d1ed      	bne.n	80132cc <ip4_input+0xe8>
 80132f0:	e000      	b.n	80132f4 <ip4_input+0x110>
            break;
 80132f2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80132f4:	4b4b      	ldr	r3, [pc, #300]	@ (8013424 <ip4_input+0x240>)
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	6839      	ldr	r1, [r7, #0]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 f96e 	bl	80135dc <ip4_addr_isbroadcast_u32>
 8013300:	4603      	mov	r3, r0
 8013302:	2b00      	cmp	r3, #0
 8013304:	d105      	bne.n	8013312 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013306:	4b47      	ldr	r3, [pc, #284]	@ (8013424 <ip4_input+0x240>)
 8013308:	691b      	ldr	r3, [r3, #16]
 801330a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801330e:	2be0      	cmp	r3, #224	@ 0xe0
 8013310:	d104      	bne.n	801331c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f7f8 fc0e 	bl	800bb34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013318:	2300      	movs	r3, #0
 801331a:	e07e      	b.n	801341a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d104      	bne.n	801332c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7f8 fc06 	bl	800bb34 <pbuf_free>
    return ERR_OK;
 8013328:	2300      	movs	r3, #0
 801332a:	e076      	b.n	801341a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	88db      	ldrh	r3, [r3, #6]
 8013330:	b29b      	uxth	r3, r3
 8013332:	461a      	mov	r2, r3
 8013334:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013338:	4013      	ands	r3, r2
 801333a:	2b00      	cmp	r3, #0
 801333c:	d00b      	beq.n	8013356 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f000 fd22 	bl	8013d88 <ip4_reass>
 8013344:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d101      	bne.n	8013350 <ip4_input+0x16c>
      return ERR_OK;
 801334c:	2300      	movs	r3, #0
 801334e:	e064      	b.n	801341a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013356:	4a33      	ldr	r2, [pc, #204]	@ (8013424 <ip4_input+0x240>)
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801335c:	4a31      	ldr	r2, [pc, #196]	@ (8013424 <ip4_input+0x240>)
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013362:	4a30      	ldr	r2, [pc, #192]	@ (8013424 <ip4_input+0x240>)
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	f003 030f 	and.w	r3, r3, #15
 8013370:	b2db      	uxtb	r3, r3
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	b2db      	uxtb	r3, r3
 8013376:	461a      	mov	r2, r3
 8013378:	4b2a      	ldr	r3, [pc, #168]	@ (8013424 <ip4_input+0x240>)
 801337a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801337c:	89fb      	ldrh	r3, [r7, #14]
 801337e:	4619      	mov	r1, r3
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7f8 fb51 	bl	800ba28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	7a5b      	ldrb	r3, [r3, #9]
 801338a:	2b11      	cmp	r3, #17
 801338c:	d006      	beq.n	801339c <ip4_input+0x1b8>
 801338e:	2b11      	cmp	r3, #17
 8013390:	dc13      	bgt.n	80133ba <ip4_input+0x1d6>
 8013392:	2b01      	cmp	r3, #1
 8013394:	d00c      	beq.n	80133b0 <ip4_input+0x1cc>
 8013396:	2b06      	cmp	r3, #6
 8013398:	d005      	beq.n	80133a6 <ip4_input+0x1c2>
 801339a:	e00e      	b.n	80133ba <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801339c:	6839      	ldr	r1, [r7, #0]
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f7fe f9f2 	bl	8011788 <udp_input>
        break;
 80133a4:	e026      	b.n	80133f4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80133a6:	6839      	ldr	r1, [r7, #0]
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f7fa fa09 	bl	800d7c0 <tcp_input>
        break;
 80133ae:	e021      	b.n	80133f4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f7ff fcee 	bl	8012d94 <icmp_input>
        break;
 80133b8:	e01c      	b.n	80133f4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80133ba:	4b1a      	ldr	r3, [pc, #104]	@ (8013424 <ip4_input+0x240>)
 80133bc:	695b      	ldr	r3, [r3, #20]
 80133be:	6939      	ldr	r1, [r7, #16]
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 f90b 	bl	80135dc <ip4_addr_isbroadcast_u32>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d10f      	bne.n	80133ec <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80133cc:	4b15      	ldr	r3, [pc, #84]	@ (8013424 <ip4_input+0x240>)
 80133ce:	695b      	ldr	r3, [r3, #20]
 80133d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80133d4:	2be0      	cmp	r3, #224	@ 0xe0
 80133d6:	d009      	beq.n	80133ec <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80133d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80133dc:	4619      	mov	r1, r3
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7f8 fb95 	bl	800bb0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80133e4:	2102      	movs	r1, #2
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f7ff fdd8 	bl	8012f9c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7f8 fba1 	bl	800bb34 <pbuf_free>
        break;
 80133f2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80133f4:	4b0b      	ldr	r3, [pc, #44]	@ (8013424 <ip4_input+0x240>)
 80133f6:	2200      	movs	r2, #0
 80133f8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80133fa:	4b0a      	ldr	r3, [pc, #40]	@ (8013424 <ip4_input+0x240>)
 80133fc:	2200      	movs	r2, #0
 80133fe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013400:	4b08      	ldr	r3, [pc, #32]	@ (8013424 <ip4_input+0x240>)
 8013402:	2200      	movs	r2, #0
 8013404:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013406:	4b07      	ldr	r3, [pc, #28]	@ (8013424 <ip4_input+0x240>)
 8013408:	2200      	movs	r2, #0
 801340a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801340c:	4b05      	ldr	r3, [pc, #20]	@ (8013424 <ip4_input+0x240>)
 801340e:	2200      	movs	r2, #0
 8013410:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013412:	4b04      	ldr	r3, [pc, #16]	@ (8013424 <ip4_input+0x240>)
 8013414:	2200      	movs	r2, #0
 8013416:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013418:	2300      	movs	r3, #0
}
 801341a:	4618      	mov	r0, r3
 801341c:	3718      	adds	r7, #24
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	2000a090 	.word	0x2000a090
 8013428:	2000d7d8 	.word	0x2000d7d8

0801342c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b08a      	sub	sp, #40	@ 0x28
 8013430:	af04      	add	r7, sp, #16
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	607a      	str	r2, [r7, #4]
 8013438:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d009      	beq.n	8013458 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d003      	beq.n	8013452 <ip4_output_if+0x26>
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d102      	bne.n	8013458 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013454:	3304      	adds	r3, #4
 8013456:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013458:	78fa      	ldrb	r2, [r7, #3]
 801345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801345c:	9302      	str	r3, [sp, #8]
 801345e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013462:	9301      	str	r3, [sp, #4]
 8013464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013468:	9300      	str	r3, [sp, #0]
 801346a:	4613      	mov	r3, r2
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	6979      	ldr	r1, [r7, #20]
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f000 f805 	bl	8013480 <ip4_output_if_src>
 8013476:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013478:	4618      	mov	r0, r3
 801347a:	3718      	adds	r7, #24
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b088      	sub	sp, #32
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	607a      	str	r2, [r7, #4]
 801348c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	7b9b      	ldrb	r3, [r3, #14]
 8013492:	2b01      	cmp	r3, #1
 8013494:	d006      	beq.n	80134a4 <ip4_output_if_src+0x24>
 8013496:	4b4b      	ldr	r3, [pc, #300]	@ (80135c4 <ip4_output_if_src+0x144>)
 8013498:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801349c:	494a      	ldr	r1, [pc, #296]	@ (80135c8 <ip4_output_if_src+0x148>)
 801349e:	484b      	ldr	r0, [pc, #300]	@ (80135cc <ip4_output_if_src+0x14c>)
 80134a0:	f001 fa98 	bl	80149d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d060      	beq.n	801356c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80134aa:	2314      	movs	r3, #20
 80134ac:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80134ae:	2114      	movs	r1, #20
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f7f8 faa9 	bl	800ba08 <pbuf_add_header>
 80134b6:	4603      	mov	r3, r0
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d002      	beq.n	80134c2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80134bc:	f06f 0301 	mvn.w	r3, #1
 80134c0:	e07c      	b.n	80135bc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	895b      	ldrh	r3, [r3, #10]
 80134cc:	2b13      	cmp	r3, #19
 80134ce:	d806      	bhi.n	80134de <ip4_output_if_src+0x5e>
 80134d0:	4b3c      	ldr	r3, [pc, #240]	@ (80135c4 <ip4_output_if_src+0x144>)
 80134d2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80134d6:	493e      	ldr	r1, [pc, #248]	@ (80135d0 <ip4_output_if_src+0x150>)
 80134d8:	483c      	ldr	r0, [pc, #240]	@ (80135cc <ip4_output_if_src+0x14c>)
 80134da:	f001 fa7b 	bl	80149d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	78fa      	ldrb	r2, [r7, #3]
 80134e2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80134e4:	69fb      	ldr	r3, [r7, #28]
 80134e6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80134ea:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681a      	ldr	r2, [r3, #0]
 80134f0:	69fb      	ldr	r3, [r7, #28]
 80134f2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80134f4:	8b7b      	ldrh	r3, [r7, #26]
 80134f6:	089b      	lsrs	r3, r3, #2
 80134f8:	b29b      	uxth	r3, r3
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013500:	b2da      	uxtb	r2, r3
 8013502:	69fb      	ldr	r3, [r7, #28]
 8013504:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801350c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	891b      	ldrh	r3, [r3, #8]
 8013512:	4618      	mov	r0, r3
 8013514:	f7f6 ff1c 	bl	800a350 <lwip_htons>
 8013518:	4603      	mov	r3, r0
 801351a:	461a      	mov	r2, r3
 801351c:	69fb      	ldr	r3, [r7, #28]
 801351e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013520:	69fb      	ldr	r3, [r7, #28]
 8013522:	2200      	movs	r2, #0
 8013524:	719a      	strb	r2, [r3, #6]
 8013526:	2200      	movs	r2, #0
 8013528:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801352a:	4b2a      	ldr	r3, [pc, #168]	@ (80135d4 <ip4_output_if_src+0x154>)
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	4618      	mov	r0, r3
 8013530:	f7f6 ff0e 	bl	800a350 <lwip_htons>
 8013534:	4603      	mov	r3, r0
 8013536:	461a      	mov	r2, r3
 8013538:	69fb      	ldr	r3, [r7, #28]
 801353a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801353c:	4b25      	ldr	r3, [pc, #148]	@ (80135d4 <ip4_output_if_src+0x154>)
 801353e:	881b      	ldrh	r3, [r3, #0]
 8013540:	3301      	adds	r3, #1
 8013542:	b29a      	uxth	r2, r3
 8013544:	4b23      	ldr	r3, [pc, #140]	@ (80135d4 <ip4_output_if_src+0x154>)
 8013546:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d104      	bne.n	8013558 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801354e:	4b22      	ldr	r3, [pc, #136]	@ (80135d8 <ip4_output_if_src+0x158>)
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	60da      	str	r2, [r3, #12]
 8013556:	e003      	b.n	8013560 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	2200      	movs	r2, #0
 8013564:	729a      	strb	r2, [r3, #10]
 8013566:	2200      	movs	r2, #0
 8013568:	72da      	strb	r2, [r3, #11]
 801356a:	e00f      	b.n	801358c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	895b      	ldrh	r3, [r3, #10]
 8013570:	2b13      	cmp	r3, #19
 8013572:	d802      	bhi.n	801357a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013574:	f06f 0301 	mvn.w	r3, #1
 8013578:	e020      	b.n	80135bc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	691b      	ldr	r3, [r3, #16]
 8013584:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013586:	f107 0314 	add.w	r3, r7, #20
 801358a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801358e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013590:	2b00      	cmp	r3, #0
 8013592:	d00c      	beq.n	80135ae <ip4_output_if_src+0x12e>
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	891a      	ldrh	r2, [r3, #8]
 8013598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801359a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801359c:	429a      	cmp	r2, r3
 801359e:	d906      	bls.n	80135ae <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f000 fde3 	bl	8014170 <ip4_frag>
 80135aa:	4603      	mov	r3, r0
 80135ac:	e006      	b.n	80135bc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80135ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b0:	695b      	ldr	r3, [r3, #20]
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	68f9      	ldr	r1, [r7, #12]
 80135b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135b8:	4798      	blx	r3
 80135ba:	4603      	mov	r3, r0
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3720      	adds	r7, #32
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	08018090 	.word	0x08018090
 80135c8:	080180c4 	.word	0x080180c4
 80135cc:	080180d0 	.word	0x080180d0
 80135d0:	080180f8 	.word	0x080180f8
 80135d4:	2000d936 	.word	0x2000d936
 80135d8:	08018518 	.word	0x08018518

080135dc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80135dc:	b480      	push	{r7}
 80135de:	b085      	sub	sp, #20
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135f0:	d002      	beq.n	80135f8 <ip4_addr_isbroadcast_u32+0x1c>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d101      	bne.n	80135fc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80135f8:	2301      	movs	r3, #1
 80135fa:	e02a      	b.n	8013652 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013602:	f003 0302 	and.w	r3, r3, #2
 8013606:	2b00      	cmp	r3, #0
 8013608:	d101      	bne.n	801360e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801360a:	2300      	movs	r3, #0
 801360c:	e021      	b.n	8013652 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	3304      	adds	r3, #4
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	429a      	cmp	r2, r3
 8013618:	d101      	bne.n	801361e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801361a:	2300      	movs	r3, #0
 801361c:	e019      	b.n	8013652 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801361e:	68fa      	ldr	r2, [r7, #12]
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	3304      	adds	r3, #4
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	405a      	eors	r2, r3
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	3308      	adds	r3, #8
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	4013      	ands	r3, r2
 8013630:	2b00      	cmp	r3, #0
 8013632:	d10d      	bne.n	8013650 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	3308      	adds	r3, #8
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	43da      	mvns	r2, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	3308      	adds	r3, #8
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013648:	429a      	cmp	r2, r3
 801364a:	d101      	bne.n	8013650 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801364c:	2301      	movs	r3, #1
 801364e:	e000      	b.n	8013652 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013650:	2300      	movs	r3, #0
  }
}
 8013652:	4618      	mov	r0, r3
 8013654:	3714      	adds	r7, #20
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr
	...

08013660 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8013668:	2210      	movs	r2, #16
 801366a:	4904      	ldr	r1, [pc, #16]	@ (801367c <ip4addr_ntoa+0x1c>)
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f807 	bl	8013680 <ip4addr_ntoa_r>
 8013672:	4603      	mov	r3, r0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3708      	adds	r7, #8
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}
 801367c:	2000d938 	.word	0x2000d938

08013680 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8013680:	b480      	push	{r7}
 8013682:	b08d      	sub	sp, #52	@ 0x34
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801368c:	2300      	movs	r3, #0
 801368e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801369a:	f107 0318 	add.w	r3, r7, #24
 801369e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80136a0:	2300      	movs	r3, #0
 80136a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136a6:	e058      	b.n	801375a <ip4addr_ntoa_r+0xda>
    i = 0;
 80136a8:	2300      	movs	r3, #0
 80136aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 80136ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b0:	781a      	ldrb	r2, [r3, #0]
 80136b2:	4b32      	ldr	r3, [pc, #200]	@ (801377c <ip4addr_ntoa_r+0xfc>)
 80136b4:	fba3 1302 	umull	r1, r3, r3, r2
 80136b8:	08d9      	lsrs	r1, r3, #3
 80136ba:	460b      	mov	r3, r1
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	440b      	add	r3, r1
 80136c0:	005b      	lsls	r3, r3, #1
 80136c2:	1ad3      	subs	r3, r2, r3
 80136c4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80136c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	4a2c      	ldr	r2, [pc, #176]	@ (801377c <ip4addr_ntoa_r+0xfc>)
 80136cc:	fba2 2303 	umull	r2, r3, r2, r3
 80136d0:	08db      	lsrs	r3, r3, #3
 80136d2:	b2da      	uxtb	r2, r3
 80136d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136d6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80136d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136dc:	1c5a      	adds	r2, r3, #1
 80136de:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80136e2:	4619      	mov	r1, r3
 80136e4:	7ffb      	ldrb	r3, [r7, #31]
 80136e6:	3330      	adds	r3, #48	@ 0x30
 80136e8:	b2da      	uxtb	r2, r3
 80136ea:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 80136ee:	443b      	add	r3, r7
 80136f0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80136f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1d8      	bne.n	80136ae <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80136fc:	e011      	b.n	8013722 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	1c5a      	adds	r2, r3, #1
 8013702:	623a      	str	r2, [r7, #32]
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	429a      	cmp	r2, r3
 8013708:	dc01      	bgt.n	801370e <ip4addr_ntoa_r+0x8e>
        return NULL;
 801370a:	2300      	movs	r3, #0
 801370c:	e030      	b.n	8013770 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801370e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013714:	1c59      	adds	r1, r3, #1
 8013716:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8013718:	3230      	adds	r2, #48	@ 0x30
 801371a:	443a      	add	r2, r7
 801371c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8013720:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8013722:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013726:	1e5a      	subs	r2, r3, #1
 8013728:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801372c:	2b00      	cmp	r3, #0
 801372e:	d1e6      	bne.n	80136fe <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8013730:	6a3b      	ldr	r3, [r7, #32]
 8013732:	1c5a      	adds	r2, r3, #1
 8013734:	623a      	str	r2, [r7, #32]
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	429a      	cmp	r2, r3
 801373a:	dc01      	bgt.n	8013740 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801373c:	2300      	movs	r3, #0
 801373e:	e017      	b.n	8013770 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8013740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013742:	1c5a      	adds	r2, r3, #1
 8013744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013746:	222e      	movs	r2, #46	@ 0x2e
 8013748:	701a      	strb	r2, [r3, #0]
    ap++;
 801374a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801374c:	3301      	adds	r3, #1
 801374e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8013750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013754:	3301      	adds	r3, #1
 8013756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801375a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801375e:	2b03      	cmp	r3, #3
 8013760:	d9a2      	bls.n	80136a8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8013762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013764:	3b01      	subs	r3, #1
 8013766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801376a:	2200      	movs	r2, #0
 801376c:	701a      	strb	r2, [r3, #0]
  return buf;
 801376e:	68bb      	ldr	r3, [r7, #8]
}
 8013770:	4618      	mov	r0, r3
 8013772:	3734      	adds	r7, #52	@ 0x34
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr
 801377c:	cccccccd 	.word	0xcccccccd

08013780 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013786:	2300      	movs	r3, #0
 8013788:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801378a:	4b12      	ldr	r3, [pc, #72]	@ (80137d4 <ip_reass_tmr+0x54>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013790:	e018      	b.n	80137c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	7fdb      	ldrb	r3, [r3, #31]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d00b      	beq.n	80137b2 <ip_reass_tmr+0x32>
      r->timer--;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	7fdb      	ldrb	r3, [r3, #31]
 801379e:	3b01      	subs	r3, #1
 80137a0:	b2da      	uxtb	r2, r3
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	60fb      	str	r3, [r7, #12]
 80137b0:	e008      	b.n	80137c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80137bc:	68b9      	ldr	r1, [r7, #8]
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f000 f80a 	bl	80137d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d1e3      	bne.n	8013792 <ip_reass_tmr+0x12>
    }
  }
}
 80137ca:	bf00      	nop
 80137cc:	bf00      	nop
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	2000d948 	.word	0x2000d948

080137d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b088      	sub	sp, #32
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80137e2:	2300      	movs	r3, #0
 80137e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80137e6:	683a      	ldr	r2, [r7, #0]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d105      	bne.n	80137fa <ip_reass_free_complete_datagram+0x22>
 80137ee:	4b45      	ldr	r3, [pc, #276]	@ (8013904 <ip_reass_free_complete_datagram+0x12c>)
 80137f0:	22ab      	movs	r2, #171	@ 0xab
 80137f2:	4945      	ldr	r1, [pc, #276]	@ (8013908 <ip_reass_free_complete_datagram+0x130>)
 80137f4:	4845      	ldr	r0, [pc, #276]	@ (801390c <ip_reass_free_complete_datagram+0x134>)
 80137f6:	f001 f8ed 	bl	80149d4 <iprintf>
  if (prev != NULL) {
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00a      	beq.n	8013816 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	429a      	cmp	r2, r3
 8013808:	d005      	beq.n	8013816 <ip_reass_free_complete_datagram+0x3e>
 801380a:	4b3e      	ldr	r3, [pc, #248]	@ (8013904 <ip_reass_free_complete_datagram+0x12c>)
 801380c:	22ad      	movs	r2, #173	@ 0xad
 801380e:	4940      	ldr	r1, [pc, #256]	@ (8013910 <ip_reass_free_complete_datagram+0x138>)
 8013810:	483e      	ldr	r0, [pc, #248]	@ (801390c <ip_reass_free_complete_datagram+0x134>)
 8013812:	f001 f8df 	bl	80149d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	685b      	ldr	r3, [r3, #4]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	889b      	ldrh	r3, [r3, #4]
 8013822:	b29b      	uxth	r3, r3
 8013824:	2b00      	cmp	r3, #0
 8013826:	d12a      	bne.n	801387e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	6858      	ldr	r0, [r3, #4]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	3308      	adds	r3, #8
 801383e:	2214      	movs	r2, #20
 8013840:	4619      	mov	r1, r3
 8013842:	f001 f9a2 	bl	8014b8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013846:	2101      	movs	r1, #1
 8013848:	69b8      	ldr	r0, [r7, #24]
 801384a:	f7ff fbb7 	bl	8012fbc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801384e:	69b8      	ldr	r0, [r7, #24]
 8013850:	f7f8 f9fe 	bl	800bc50 <pbuf_clen>
 8013854:	4603      	mov	r3, r0
 8013856:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013858:	8bfa      	ldrh	r2, [r7, #30]
 801385a:	8a7b      	ldrh	r3, [r7, #18]
 801385c:	4413      	add	r3, r2
 801385e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013862:	db05      	blt.n	8013870 <ip_reass_free_complete_datagram+0x98>
 8013864:	4b27      	ldr	r3, [pc, #156]	@ (8013904 <ip_reass_free_complete_datagram+0x12c>)
 8013866:	22bc      	movs	r2, #188	@ 0xbc
 8013868:	492a      	ldr	r1, [pc, #168]	@ (8013914 <ip_reass_free_complete_datagram+0x13c>)
 801386a:	4828      	ldr	r0, [pc, #160]	@ (801390c <ip_reass_free_complete_datagram+0x134>)
 801386c:	f001 f8b2 	bl	80149d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013870:	8bfa      	ldrh	r2, [r7, #30]
 8013872:	8a7b      	ldrh	r3, [r7, #18]
 8013874:	4413      	add	r3, r2
 8013876:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013878:	69b8      	ldr	r0, [r7, #24]
 801387a:	f7f8 f95b 	bl	800bb34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013884:	e01f      	b.n	80138c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013896:	68f8      	ldr	r0, [r7, #12]
 8013898:	f7f8 f9da 	bl	800bc50 <pbuf_clen>
 801389c:	4603      	mov	r3, r0
 801389e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80138a0:	8bfa      	ldrh	r2, [r7, #30]
 80138a2:	8a7b      	ldrh	r3, [r7, #18]
 80138a4:	4413      	add	r3, r2
 80138a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138aa:	db05      	blt.n	80138b8 <ip_reass_free_complete_datagram+0xe0>
 80138ac:	4b15      	ldr	r3, [pc, #84]	@ (8013904 <ip_reass_free_complete_datagram+0x12c>)
 80138ae:	22cc      	movs	r2, #204	@ 0xcc
 80138b0:	4918      	ldr	r1, [pc, #96]	@ (8013914 <ip_reass_free_complete_datagram+0x13c>)
 80138b2:	4816      	ldr	r0, [pc, #88]	@ (801390c <ip_reass_free_complete_datagram+0x134>)
 80138b4:	f001 f88e 	bl	80149d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80138b8:	8bfa      	ldrh	r2, [r7, #30]
 80138ba:	8a7b      	ldrh	r3, [r7, #18]
 80138bc:	4413      	add	r3, r2
 80138be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80138c0:	68f8      	ldr	r0, [r7, #12]
 80138c2:	f7f8 f937 	bl	800bb34 <pbuf_free>
  while (p != NULL) {
 80138c6:	69bb      	ldr	r3, [r7, #24]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d1dc      	bne.n	8013886 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80138cc:	6839      	ldr	r1, [r7, #0]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 f8c2 	bl	8013a58 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80138d4:	4b10      	ldr	r3, [pc, #64]	@ (8013918 <ip_reass_free_complete_datagram+0x140>)
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	8bfa      	ldrh	r2, [r7, #30]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d905      	bls.n	80138ea <ip_reass_free_complete_datagram+0x112>
 80138de:	4b09      	ldr	r3, [pc, #36]	@ (8013904 <ip_reass_free_complete_datagram+0x12c>)
 80138e0:	22d2      	movs	r2, #210	@ 0xd2
 80138e2:	490e      	ldr	r1, [pc, #56]	@ (801391c <ip_reass_free_complete_datagram+0x144>)
 80138e4:	4809      	ldr	r0, [pc, #36]	@ (801390c <ip_reass_free_complete_datagram+0x134>)
 80138e6:	f001 f875 	bl	80149d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80138ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013918 <ip_reass_free_complete_datagram+0x140>)
 80138ec:	881a      	ldrh	r2, [r3, #0]
 80138ee:	8bfb      	ldrh	r3, [r7, #30]
 80138f0:	1ad3      	subs	r3, r2, r3
 80138f2:	b29a      	uxth	r2, r3
 80138f4:	4b08      	ldr	r3, [pc, #32]	@ (8013918 <ip_reass_free_complete_datagram+0x140>)
 80138f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80138f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3720      	adds	r7, #32
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	08018128 	.word	0x08018128
 8013908:	08018164 	.word	0x08018164
 801390c:	08018170 	.word	0x08018170
 8013910:	08018198 	.word	0x08018198
 8013914:	080181ac 	.word	0x080181ac
 8013918:	2000d94c 	.word	0x2000d94c
 801391c:	080181cc 	.word	0x080181cc

08013920 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b08a      	sub	sp, #40	@ 0x28
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801392a:	2300      	movs	r3, #0
 801392c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801392e:	2300      	movs	r3, #0
 8013930:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013932:	2300      	movs	r3, #0
 8013934:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013936:	2300      	movs	r3, #0
 8013938:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801393a:	2300      	movs	r3, #0
 801393c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801393e:	4b28      	ldr	r3, [pc, #160]	@ (80139e0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013944:	e030      	b.n	80139a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013948:	695a      	ldr	r2, [r3, #20]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	68db      	ldr	r3, [r3, #12]
 801394e:	429a      	cmp	r2, r3
 8013950:	d10c      	bne.n	801396c <ip_reass_remove_oldest_datagram+0x4c>
 8013952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013954:	699a      	ldr	r2, [r3, #24]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	691b      	ldr	r3, [r3, #16]
 801395a:	429a      	cmp	r2, r3
 801395c:	d106      	bne.n	801396c <ip_reass_remove_oldest_datagram+0x4c>
 801395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013960:	899a      	ldrh	r2, [r3, #12]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	889b      	ldrh	r3, [r3, #4]
 8013966:	b29b      	uxth	r3, r3
 8013968:	429a      	cmp	r2, r3
 801396a:	d014      	beq.n	8013996 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	3301      	adds	r3, #1
 8013970:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013972:	6a3b      	ldr	r3, [r7, #32]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d104      	bne.n	8013982 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801397a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	61bb      	str	r3, [r7, #24]
 8013980:	e009      	b.n	8013996 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013984:	7fda      	ldrb	r2, [r3, #31]
 8013986:	6a3b      	ldr	r3, [r7, #32]
 8013988:	7fdb      	ldrb	r3, [r3, #31]
 801398a:	429a      	cmp	r2, r3
 801398c:	d803      	bhi.n	8013996 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013990:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d001      	beq.n	80139a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80139a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80139a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d1cb      	bne.n	8013946 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d008      	beq.n	80139c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80139b4:	69b9      	ldr	r1, [r7, #24]
 80139b6:	6a38      	ldr	r0, [r7, #32]
 80139b8:	f7ff ff0e 	bl	80137d8 <ip_reass_free_complete_datagram>
 80139bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80139be:	697a      	ldr	r2, [r7, #20]
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	4413      	add	r3, r2
 80139c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80139c6:	697a      	ldr	r2, [r7, #20]
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	da02      	bge.n	80139d4 <ip_reass_remove_oldest_datagram+0xb4>
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	dcac      	bgt.n	801392e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80139d4:	697b      	ldr	r3, [r7, #20]
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	3728      	adds	r7, #40	@ 0x28
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	2000d948 	.word	0x2000d948

080139e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80139ee:	2004      	movs	r0, #4
 80139f0:	f7f7 f986 	bl	800ad00 <memp_malloc>
 80139f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d110      	bne.n	8013a1e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80139fc:	6839      	ldr	r1, [r7, #0]
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f7ff ff8e 	bl	8013920 <ip_reass_remove_oldest_datagram>
 8013a04:	4602      	mov	r2, r0
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	dc03      	bgt.n	8013a14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013a0c:	2004      	movs	r0, #4
 8013a0e:	f7f7 f977 	bl	800ad00 <memp_malloc>
 8013a12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d101      	bne.n	8013a1e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	e016      	b.n	8013a4c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013a1e:	2220      	movs	r2, #32
 8013a20:	2100      	movs	r1, #0
 8013a22:	68f8      	ldr	r0, [r7, #12]
 8013a24:	f001 f83b 	bl	8014a9e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	220f      	movs	r2, #15
 8013a2c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013a2e:	4b09      	ldr	r3, [pc, #36]	@ (8013a54 <ip_reass_enqueue_new_datagram+0x70>)
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013a36:	4a07      	ldr	r2, [pc, #28]	@ (8013a54 <ip_reass_enqueue_new_datagram+0x70>)
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	3308      	adds	r3, #8
 8013a40:	2214      	movs	r2, #20
 8013a42:	6879      	ldr	r1, [r7, #4]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f001 f8a0 	bl	8014b8a <memcpy>
  return ipr;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3710      	adds	r7, #16
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	2000d948 	.word	0x2000d948

08013a58 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013a62:	4b10      	ldr	r3, [pc, #64]	@ (8013aa4 <ip_reass_dequeue_datagram+0x4c>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d104      	bne.n	8013a76 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	4a0c      	ldr	r2, [pc, #48]	@ (8013aa4 <ip_reass_dequeue_datagram+0x4c>)
 8013a72:	6013      	str	r3, [r2, #0]
 8013a74:	e00d      	b.n	8013a92 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d106      	bne.n	8013a8a <ip_reass_dequeue_datagram+0x32>
 8013a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8013aa8 <ip_reass_dequeue_datagram+0x50>)
 8013a7e:	f240 1245 	movw	r2, #325	@ 0x145
 8013a82:	490a      	ldr	r1, [pc, #40]	@ (8013aac <ip_reass_dequeue_datagram+0x54>)
 8013a84:	480a      	ldr	r0, [pc, #40]	@ (8013ab0 <ip_reass_dequeue_datagram+0x58>)
 8013a86:	f000 ffa5 	bl	80149d4 <iprintf>
    prev->next = ipr->next;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013a92:	6879      	ldr	r1, [r7, #4]
 8013a94:	2004      	movs	r0, #4
 8013a96:	f7f7 f9a9 	bl	800adec <memp_free>
}
 8013a9a:	bf00      	nop
 8013a9c:	3708      	adds	r7, #8
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	2000d948 	.word	0x2000d948
 8013aa8:	08018128 	.word	0x08018128
 8013aac:	080181f0 	.word	0x080181f0
 8013ab0:	08018170 	.word	0x08018170

08013ab4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b08c      	sub	sp, #48	@ 0x30
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	885b      	ldrh	r3, [r3, #2]
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f6 fc3b 	bl	800a350 <lwip_htons>
 8013ada:	4603      	mov	r3, r0
 8013adc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	f003 030f 	and.w	r3, r3, #15
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	009b      	lsls	r3, r3, #2
 8013aea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013aec:	7e7b      	ldrb	r3, [r7, #25]
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	8b7a      	ldrh	r2, [r7, #26]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d202      	bcs.n	8013afc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013af6:	f04f 33ff 	mov.w	r3, #4294967295
 8013afa:	e135      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013afc:	7e7b      	ldrb	r3, [r7, #25]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	8b7a      	ldrh	r2, [r7, #26]
 8013b02:	1ad3      	subs	r3, r2, r3
 8013b04:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	88db      	ldrh	r3, [r3, #6]
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7f6 fc1f 	bl	800a350 <lwip_htons>
 8013b12:	4603      	mov	r3, r0
 8013b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	00db      	lsls	r3, r3, #3
 8013b1c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b26:	2200      	movs	r2, #0
 8013b28:	701a      	strb	r2, [r3, #0]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	705a      	strb	r2, [r3, #1]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	709a      	strb	r2, [r3, #2]
 8013b32:	2200      	movs	r2, #0
 8013b34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b38:	8afa      	ldrh	r2, [r7, #22]
 8013b3a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013b3c:	8afa      	ldrh	r2, [r7, #22]
 8013b3e:	8b7b      	ldrh	r3, [r7, #26]
 8013b40:	4413      	add	r3, r2
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b46:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b4a:	88db      	ldrh	r3, [r3, #6]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	8afa      	ldrh	r2, [r7, #22]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d902      	bls.n	8013b5a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b54:	f04f 33ff 	mov.w	r3, #4294967295
 8013b58:	e106      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b60:	e068      	b.n	8013c34 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b6a:	889b      	ldrh	r3, [r3, #4]
 8013b6c:	b29a      	uxth	r2, r3
 8013b6e:	693b      	ldr	r3, [r7, #16]
 8013b70:	889b      	ldrh	r3, [r3, #4]
 8013b72:	b29b      	uxth	r3, r3
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d235      	bcs.n	8013be4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d020      	beq.n	8013bc6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b86:	889b      	ldrh	r3, [r3, #4]
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b8c:	88db      	ldrh	r3, [r3, #6]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d307      	bcc.n	8013ba4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b96:	88db      	ldrh	r3, [r3, #6]
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	889b      	ldrh	r3, [r3, #4]
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d902      	bls.n	8013baa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba8:	e0de      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bac:	68ba      	ldr	r2, [r7, #8]
 8013bae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb2:	88db      	ldrh	r3, [r3, #6]
 8013bb4:	b29a      	uxth	r2, r3
 8013bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bb8:	889b      	ldrh	r3, [r3, #4]
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d03d      	beq.n	8013c3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013bc4:	e03a      	b.n	8013c3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bc8:	88db      	ldrh	r3, [r3, #6]
 8013bca:	b29a      	uxth	r2, r3
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	889b      	ldrh	r3, [r3, #4]
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d902      	bls.n	8013bdc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8013bda:	e0c5      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	68ba      	ldr	r2, [r7, #8]
 8013be0:	605a      	str	r2, [r3, #4]
      break;
 8013be2:	e02b      	b.n	8013c3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013be6:	889b      	ldrh	r3, [r3, #4]
 8013be8:	b29a      	uxth	r2, r3
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	889b      	ldrh	r3, [r3, #4]
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d102      	bne.n	8013bfa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8013bf8:	e0b6      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bfc:	889b      	ldrh	r3, [r3, #4]
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	88db      	ldrh	r3, [r3, #6]
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d202      	bcs.n	8013c10 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c0e:	e0ab      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d009      	beq.n	8013c2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c18:	88db      	ldrh	r3, [r3, #6]
 8013c1a:	b29a      	uxth	r2, r3
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	889b      	ldrh	r3, [r3, #4]
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d001      	beq.n	8013c2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c26:	2300      	movs	r3, #0
 8013c28:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d193      	bne.n	8013b62 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013c3a:	e000      	b.n	8013c3e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013c3c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d12d      	bne.n	8013ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d01c      	beq.n	8013c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c4c:	88db      	ldrh	r3, [r3, #6]
 8013c4e:	b29a      	uxth	r2, r3
 8013c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c52:	889b      	ldrh	r3, [r3, #4]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d906      	bls.n	8013c68 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013c5a:	4b45      	ldr	r3, [pc, #276]	@ (8013d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c5c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013c60:	4944      	ldr	r1, [pc, #272]	@ (8013d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013c62:	4845      	ldr	r0, [pc, #276]	@ (8013d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c64:	f000 feb6 	bl	80149d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c70:	88db      	ldrh	r3, [r3, #6]
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c76:	889b      	ldrh	r3, [r3, #4]
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d010      	beq.n	8013ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	623b      	str	r3, [r7, #32]
 8013c82:	e00d      	b.n	8013ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d006      	beq.n	8013c9a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013c8c:	4b38      	ldr	r3, [pc, #224]	@ (8013d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c8e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013c92:	493a      	ldr	r1, [pc, #232]	@ (8013d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013c94:	4838      	ldr	r0, [pc, #224]	@ (8013d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c96:	f000 fe9d 	bl	80149d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	68ba      	ldr	r2, [r7, #8]
 8013c9e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d105      	bne.n	8013cb2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	7f9b      	ldrb	r3, [r3, #30]
 8013caa:	f003 0301 	and.w	r3, r3, #1
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d059      	beq.n	8013d66 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013cb2:	6a3b      	ldr	r3, [r7, #32]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d04f      	beq.n	8013d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d006      	beq.n	8013cce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	889b      	ldrh	r3, [r3, #4]
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d002      	beq.n	8013cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	623b      	str	r3, [r7, #32]
 8013cd2:	e041      	b.n	8013d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8013cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013cde:	e012      	b.n	8013d06 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8013ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ce8:	88db      	ldrh	r3, [r3, #6]
 8013cea:	b29a      	uxth	r2, r3
 8013cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cee:	889b      	ldrh	r3, [r3, #4]
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d002      	beq.n	8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	623b      	str	r3, [r7, #32]
            break;
 8013cfa:	e007      	b.n	8013d0c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d1e9      	bne.n	8013ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013d0c:	6a3b      	ldr	r3, [r7, #32]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d022      	beq.n	8013d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d106      	bne.n	8013d28 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013d1a:	4b15      	ldr	r3, [pc, #84]	@ (8013d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d1c:	f240 12df 	movw	r2, #479	@ 0x1df
 8013d20:	4917      	ldr	r1, [pc, #92]	@ (8013d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013d22:	4815      	ldr	r0, [pc, #84]	@ (8013d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d24:	f000 fe56 	bl	80149d4 <iprintf>
          LWIP_ASSERT("sanity check",
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d106      	bne.n	8013d42 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013d34:	4b0e      	ldr	r3, [pc, #56]	@ (8013d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d36:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013d3a:	4911      	ldr	r1, [pc, #68]	@ (8013d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013d3c:	480e      	ldr	r0, [pc, #56]	@ (8013d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d3e:	f000 fe49 	bl	80149d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d006      	beq.n	8013d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013d4a:	4b09      	ldr	r3, [pc, #36]	@ (8013d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d4c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013d50:	490c      	ldr	r1, [pc, #48]	@ (8013d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013d52:	4809      	ldr	r0, [pc, #36]	@ (8013d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d54:	f000 fe3e 	bl	80149d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013d58:	6a3b      	ldr	r3, [r7, #32]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	bf14      	ite	ne
 8013d5e:	2301      	movne	r3, #1
 8013d60:	2300      	moveq	r3, #0
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	e000      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013d66:	2300      	movs	r3, #0
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3730      	adds	r7, #48	@ 0x30
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	08018128 	.word	0x08018128
 8013d74:	0801820c 	.word	0x0801820c
 8013d78:	08018170 	.word	0x08018170
 8013d7c:	0801822c 	.word	0x0801822c
 8013d80:	08018264 	.word	0x08018264
 8013d84:	08018274 	.word	0x08018274

08013d88 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b08e      	sub	sp, #56	@ 0x38
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	f003 030f 	and.w	r3, r3, #15
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	009b      	lsls	r3, r3, #2
 8013da2:	b2db      	uxtb	r3, r3
 8013da4:	2b14      	cmp	r3, #20
 8013da6:	f040 8171 	bne.w	801408c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dac:	88db      	ldrh	r3, [r3, #6]
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7f6 facd 	bl	800a350 <lwip_htons>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dc4:	885b      	ldrh	r3, [r3, #2]
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7f6 fac1 	bl	800a350 <lwip_htons>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	f003 030f 	and.w	r3, r3, #15
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	009b      	lsls	r3, r3, #2
 8013dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013de2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013dea:	429a      	cmp	r2, r3
 8013dec:	f0c0 8150 	bcc.w	8014090 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013df8:	1ad3      	subs	r3, r2, r3
 8013dfa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7f7 ff27 	bl	800bc50 <pbuf_clen>
 8013e02:	4603      	mov	r3, r0
 8013e04:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013e06:	4b8c      	ldr	r3, [pc, #560]	@ (8014038 <ip4_reass+0x2b0>)
 8013e08:	881b      	ldrh	r3, [r3, #0]
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	8c3b      	ldrh	r3, [r7, #32]
 8013e0e:	4413      	add	r3, r2
 8013e10:	2b0a      	cmp	r3, #10
 8013e12:	dd10      	ble.n	8013e36 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e14:	8c3b      	ldrh	r3, [r7, #32]
 8013e16:	4619      	mov	r1, r3
 8013e18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e1a:	f7ff fd81 	bl	8013920 <ip_reass_remove_oldest_datagram>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f000 8137 	beq.w	8014094 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013e26:	4b84      	ldr	r3, [pc, #528]	@ (8014038 <ip4_reass+0x2b0>)
 8013e28:	881b      	ldrh	r3, [r3, #0]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	8c3b      	ldrh	r3, [r7, #32]
 8013e2e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013e30:	2b0a      	cmp	r3, #10
 8013e32:	f300 812f 	bgt.w	8014094 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013e36:	4b81      	ldr	r3, [pc, #516]	@ (801403c <ip4_reass+0x2b4>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e3c:	e015      	b.n	8013e6a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e40:	695a      	ldr	r2, [r3, #20]
 8013e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e44:	68db      	ldr	r3, [r3, #12]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d10c      	bne.n	8013e64 <ip4_reass+0xdc>
 8013e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e4c:	699a      	ldr	r2, [r3, #24]
 8013e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d106      	bne.n	8013e64 <ip4_reass+0xdc>
 8013e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e58:	899a      	ldrh	r2, [r3, #12]
 8013e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e5c:	889b      	ldrh	r3, [r3, #4]
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d006      	beq.n	8013e72 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d1e6      	bne.n	8013e3e <ip4_reass+0xb6>
 8013e70:	e000      	b.n	8013e74 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013e72:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d109      	bne.n	8013e8e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013e7a:	8c3b      	ldrh	r3, [r7, #32]
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e80:	f7ff fdb0 	bl	80139e4 <ip_reass_enqueue_new_datagram>
 8013e84:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d11c      	bne.n	8013ec6 <ip4_reass+0x13e>
      goto nullreturn;
 8013e8c:	e105      	b.n	801409a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e90:	88db      	ldrh	r3, [r3, #6]
 8013e92:	b29b      	uxth	r3, r3
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7f6 fa5b 	bl	800a350 <lwip_htons>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d110      	bne.n	8013ec6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ea6:	89db      	ldrh	r3, [r3, #14]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7f6 fa51 	bl	800a350 <lwip_htons>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d006      	beq.n	8013ec6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eba:	3308      	adds	r3, #8
 8013ebc:	2214      	movs	r2, #20
 8013ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f000 fe62 	bl	8014b8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ec8:	88db      	ldrh	r3, [r3, #6]
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	f003 0320 	and.w	r3, r3, #32
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	bf0c      	ite	eq
 8013ed4:	2301      	moveq	r3, #1
 8013ed6:	2300      	movne	r3, #0
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d00e      	beq.n	8013f00 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013ee2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013ee4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013ee6:	4413      	add	r3, r2
 8013ee8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013eea:	8b7a      	ldrh	r2, [r7, #26]
 8013eec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	f0c0 80a0 	bcc.w	8014034 <ip4_reass+0x2ac>
 8013ef4:	8b7b      	ldrh	r3, [r7, #26]
 8013ef6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013efa:	4293      	cmp	r3, r2
 8013efc:	f200 809a 	bhi.w	8014034 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013f00:	69fa      	ldr	r2, [r7, #28]
 8013f02:	6879      	ldr	r1, [r7, #4]
 8013f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f06:	f7ff fdd5 	bl	8013ab4 <ip_reass_chain_frag_into_datagram_and_validate>
 8013f0a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f12:	f000 809b 	beq.w	801404c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013f16:	4b48      	ldr	r3, [pc, #288]	@ (8014038 <ip4_reass+0x2b0>)
 8013f18:	881a      	ldrh	r2, [r3, #0]
 8013f1a:	8c3b      	ldrh	r3, [r7, #32]
 8013f1c:	4413      	add	r3, r2
 8013f1e:	b29a      	uxth	r2, r3
 8013f20:	4b45      	ldr	r3, [pc, #276]	@ (8014038 <ip4_reass+0x2b0>)
 8013f22:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d00d      	beq.n	8013f46 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013f2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013f2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f2e:	4413      	add	r3, r2
 8013f30:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f34:	8a7a      	ldrh	r2, [r7, #18]
 8013f36:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f3a:	7f9b      	ldrb	r3, [r3, #30]
 8013f3c:	f043 0301 	orr.w	r3, r3, #1
 8013f40:	b2da      	uxtb	r2, r3
 8013f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f44:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d171      	bne.n	8014030 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f4e:	8b9b      	ldrh	r3, [r3, #28]
 8013f50:	3314      	adds	r3, #20
 8013f52:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f68:	3308      	adds	r3, #8
 8013f6a:	2214      	movs	r2, #20
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f70:	f000 fe0b 	bl	8014b8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013f74:	8a3b      	ldrh	r3, [r7, #16]
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7f6 f9ea 	bl	800a350 <lwip_htons>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	461a      	mov	r2, r3
 8013f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f82:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f86:	2200      	movs	r2, #0
 8013f88:	719a      	strb	r2, [r3, #6]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f90:	2200      	movs	r2, #0
 8013f92:	729a      	strb	r2, [r3, #10]
 8013f94:	2200      	movs	r2, #0
 8013f96:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f9a:	685b      	ldr	r3, [r3, #4]
 8013f9c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013f9e:	e00d      	b.n	8013fbc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fa2:	685b      	ldr	r3, [r3, #4]
 8013fa4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013fa6:	2114      	movs	r1, #20
 8013fa8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013faa:	f7f7 fd3d 	bl	800ba28 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013fae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f7f7 fe8d 	bl	800bcd0 <pbuf_cat>
      r = iprh->next_pbuf;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8013fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d1ee      	bne.n	8013fa0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013fc2:	4b1e      	ldr	r3, [pc, #120]	@ (801403c <ip4_reass+0x2b4>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d102      	bne.n	8013fd2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013fd0:	e010      	b.n	8013ff4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013fd2:	4b1a      	ldr	r3, [pc, #104]	@ (801403c <ip4_reass+0x2b4>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013fd8:	e007      	b.n	8013fea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d006      	beq.n	8013ff2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d1f4      	bne.n	8013fda <ip4_reass+0x252>
 8013ff0:	e000      	b.n	8013ff4 <ip4_reass+0x26c>
          break;
 8013ff2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013ff4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013ff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ff8:	f7ff fd2e 	bl	8013a58 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7f7 fe27 	bl	800bc50 <pbuf_clen>
 8014002:	4603      	mov	r3, r0
 8014004:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014006:	4b0c      	ldr	r3, [pc, #48]	@ (8014038 <ip4_reass+0x2b0>)
 8014008:	881b      	ldrh	r3, [r3, #0]
 801400a:	8c3a      	ldrh	r2, [r7, #32]
 801400c:	429a      	cmp	r2, r3
 801400e:	d906      	bls.n	801401e <ip4_reass+0x296>
 8014010:	4b0b      	ldr	r3, [pc, #44]	@ (8014040 <ip4_reass+0x2b8>)
 8014012:	f240 229b 	movw	r2, #667	@ 0x29b
 8014016:	490b      	ldr	r1, [pc, #44]	@ (8014044 <ip4_reass+0x2bc>)
 8014018:	480b      	ldr	r0, [pc, #44]	@ (8014048 <ip4_reass+0x2c0>)
 801401a:	f000 fcdb 	bl	80149d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801401e:	4b06      	ldr	r3, [pc, #24]	@ (8014038 <ip4_reass+0x2b0>)
 8014020:	881a      	ldrh	r2, [r3, #0]
 8014022:	8c3b      	ldrh	r3, [r7, #32]
 8014024:	1ad3      	subs	r3, r2, r3
 8014026:	b29a      	uxth	r2, r3
 8014028:	4b03      	ldr	r3, [pc, #12]	@ (8014038 <ip4_reass+0x2b0>)
 801402a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	e038      	b.n	80140a2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014030:	2300      	movs	r3, #0
 8014032:	e036      	b.n	80140a2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014034:	bf00      	nop
 8014036:	e00a      	b.n	801404e <ip4_reass+0x2c6>
 8014038:	2000d94c 	.word	0x2000d94c
 801403c:	2000d948 	.word	0x2000d948
 8014040:	08018128 	.word	0x08018128
 8014044:	08018298 	.word	0x08018298
 8014048:	08018170 	.word	0x08018170
    goto nullreturn_ipr;
 801404c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014050:	2b00      	cmp	r3, #0
 8014052:	d106      	bne.n	8014062 <ip4_reass+0x2da>
 8014054:	4b15      	ldr	r3, [pc, #84]	@ (80140ac <ip4_reass+0x324>)
 8014056:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801405a:	4915      	ldr	r1, [pc, #84]	@ (80140b0 <ip4_reass+0x328>)
 801405c:	4815      	ldr	r0, [pc, #84]	@ (80140b4 <ip4_reass+0x32c>)
 801405e:	f000 fcb9 	bl	80149d4 <iprintf>
  if (ipr->p == NULL) {
 8014062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d116      	bne.n	8014098 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801406a:	4b13      	ldr	r3, [pc, #76]	@ (80140b8 <ip4_reass+0x330>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014070:	429a      	cmp	r2, r3
 8014072:	d006      	beq.n	8014082 <ip4_reass+0x2fa>
 8014074:	4b0d      	ldr	r3, [pc, #52]	@ (80140ac <ip4_reass+0x324>)
 8014076:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801407a:	4910      	ldr	r1, [pc, #64]	@ (80140bc <ip4_reass+0x334>)
 801407c:	480d      	ldr	r0, [pc, #52]	@ (80140b4 <ip4_reass+0x32c>)
 801407e:	f000 fca9 	bl	80149d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014082:	2100      	movs	r1, #0
 8014084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014086:	f7ff fce7 	bl	8013a58 <ip_reass_dequeue_datagram>
 801408a:	e006      	b.n	801409a <ip4_reass+0x312>
    goto nullreturn;
 801408c:	bf00      	nop
 801408e:	e004      	b.n	801409a <ip4_reass+0x312>
    goto nullreturn;
 8014090:	bf00      	nop
 8014092:	e002      	b.n	801409a <ip4_reass+0x312>
      goto nullreturn;
 8014094:	bf00      	nop
 8014096:	e000      	b.n	801409a <ip4_reass+0x312>
  }

nullreturn:
 8014098:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801409a:	6878      	ldr	r0, [r7, #4]
 801409c:	f7f7 fd4a 	bl	800bb34 <pbuf_free>
  return NULL;
 80140a0:	2300      	movs	r3, #0
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3738      	adds	r7, #56	@ 0x38
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	08018128 	.word	0x08018128
 80140b0:	080182b4 	.word	0x080182b4
 80140b4:	08018170 	.word	0x08018170
 80140b8:	2000d948 	.word	0x2000d948
 80140bc:	080182c0 	.word	0x080182c0

080140c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80140c4:	2005      	movs	r0, #5
 80140c6:	f7f6 fe1b 	bl	800ad00 <memp_malloc>
 80140ca:	4603      	mov	r3, r0
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d106      	bne.n	80140ec <ip_frag_free_pbuf_custom_ref+0x1c>
 80140de:	4b07      	ldr	r3, [pc, #28]	@ (80140fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80140e0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80140e4:	4906      	ldr	r1, [pc, #24]	@ (8014100 <ip_frag_free_pbuf_custom_ref+0x30>)
 80140e6:	4807      	ldr	r0, [pc, #28]	@ (8014104 <ip_frag_free_pbuf_custom_ref+0x34>)
 80140e8:	f000 fc74 	bl	80149d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80140ec:	6879      	ldr	r1, [r7, #4]
 80140ee:	2005      	movs	r0, #5
 80140f0:	f7f6 fe7c 	bl	800adec <memp_free>
}
 80140f4:	bf00      	nop
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	08018128 	.word	0x08018128
 8014100:	080182e0 	.word	0x080182e0
 8014104:	08018170 	.word	0x08018170

08014108 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d106      	bne.n	8014128 <ipfrag_free_pbuf_custom+0x20>
 801411a:	4b11      	ldr	r3, [pc, #68]	@ (8014160 <ipfrag_free_pbuf_custom+0x58>)
 801411c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014120:	4910      	ldr	r1, [pc, #64]	@ (8014164 <ipfrag_free_pbuf_custom+0x5c>)
 8014122:	4811      	ldr	r0, [pc, #68]	@ (8014168 <ipfrag_free_pbuf_custom+0x60>)
 8014124:	f000 fc56 	bl	80149d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	429a      	cmp	r2, r3
 801412e:	d006      	beq.n	801413e <ipfrag_free_pbuf_custom+0x36>
 8014130:	4b0b      	ldr	r3, [pc, #44]	@ (8014160 <ipfrag_free_pbuf_custom+0x58>)
 8014132:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014136:	490d      	ldr	r1, [pc, #52]	@ (801416c <ipfrag_free_pbuf_custom+0x64>)
 8014138:	480b      	ldr	r0, [pc, #44]	@ (8014168 <ipfrag_free_pbuf_custom+0x60>)
 801413a:	f000 fc4b 	bl	80149d4 <iprintf>
  if (pcr->original != NULL) {
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	695b      	ldr	r3, [r3, #20]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d004      	beq.n	8014150 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	695b      	ldr	r3, [r3, #20]
 801414a:	4618      	mov	r0, r3
 801414c:	f7f7 fcf2 	bl	800bb34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014150:	68f8      	ldr	r0, [r7, #12]
 8014152:	f7ff ffbd 	bl	80140d0 <ip_frag_free_pbuf_custom_ref>
}
 8014156:	bf00      	nop
 8014158:	3710      	adds	r7, #16
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}
 801415e:	bf00      	nop
 8014160:	08018128 	.word	0x08018128
 8014164:	080182ec 	.word	0x080182ec
 8014168:	08018170 	.word	0x08018170
 801416c:	080182f8 	.word	0x080182f8

08014170 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b094      	sub	sp, #80	@ 0x50
 8014174:	af02      	add	r7, sp, #8
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801417c:	2300      	movs	r3, #0
 801417e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014186:	3b14      	subs	r3, #20
 8014188:	2b00      	cmp	r3, #0
 801418a:	da00      	bge.n	801418e <ip4_frag+0x1e>
 801418c:	3307      	adds	r3, #7
 801418e:	10db      	asrs	r3, r3, #3
 8014190:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014192:	2314      	movs	r3, #20
 8014194:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801419e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80141a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	f003 030f 	and.w	r3, r3, #15
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	009b      	lsls	r3, r3, #2
 80141ac:	b2db      	uxtb	r3, r3
 80141ae:	2b14      	cmp	r3, #20
 80141b0:	d002      	beq.n	80141b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80141b2:	f06f 0305 	mvn.w	r3, #5
 80141b6:	e110      	b.n	80143da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	895b      	ldrh	r3, [r3, #10]
 80141bc:	2b13      	cmp	r3, #19
 80141be:	d809      	bhi.n	80141d4 <ip4_frag+0x64>
 80141c0:	4b88      	ldr	r3, [pc, #544]	@ (80143e4 <ip4_frag+0x274>)
 80141c2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80141c6:	4988      	ldr	r1, [pc, #544]	@ (80143e8 <ip4_frag+0x278>)
 80141c8:	4888      	ldr	r0, [pc, #544]	@ (80143ec <ip4_frag+0x27c>)
 80141ca:	f000 fc03 	bl	80149d4 <iprintf>
 80141ce:	f06f 0305 	mvn.w	r3, #5
 80141d2:	e102      	b.n	80143da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80141d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d6:	88db      	ldrh	r3, [r3, #6]
 80141d8:	b29b      	uxth	r3, r3
 80141da:	4618      	mov	r0, r3
 80141dc:	f7f6 f8b8 	bl	800a350 <lwip_htons>
 80141e0:	4603      	mov	r3, r0
 80141e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80141e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80141e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80141ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80141f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80141f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	891b      	ldrh	r3, [r3, #8]
 80141fa:	3b14      	subs	r3, #20
 80141fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014200:	e0e1      	b.n	80143c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014202:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014204:	00db      	lsls	r3, r3, #3
 8014206:	b29b      	uxth	r3, r3
 8014208:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801420c:	4293      	cmp	r3, r2
 801420e:	bf28      	it	cs
 8014210:	4613      	movcs	r3, r2
 8014212:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014214:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014218:	2114      	movs	r1, #20
 801421a:	200e      	movs	r0, #14
 801421c:	f7f7 f9a6 	bl	800b56c <pbuf_alloc>
 8014220:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014224:	2b00      	cmp	r3, #0
 8014226:	f000 80d5 	beq.w	80143d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801422c:	895b      	ldrh	r3, [r3, #10]
 801422e:	2b13      	cmp	r3, #19
 8014230:	d806      	bhi.n	8014240 <ip4_frag+0xd0>
 8014232:	4b6c      	ldr	r3, [pc, #432]	@ (80143e4 <ip4_frag+0x274>)
 8014234:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014238:	496d      	ldr	r1, [pc, #436]	@ (80143f0 <ip4_frag+0x280>)
 801423a:	486c      	ldr	r0, [pc, #432]	@ (80143ec <ip4_frag+0x27c>)
 801423c:	f000 fbca 	bl	80149d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	2214      	movs	r2, #20
 8014246:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014248:	4618      	mov	r0, r3
 801424a:	f000 fc9e 	bl	8014b8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014250:	685b      	ldr	r3, [r3, #4]
 8014252:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014254:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014256:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801425a:	e064      	b.n	8014326 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	895a      	ldrh	r2, [r3, #10]
 8014260:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014262:	1ad3      	subs	r3, r2, r3
 8014264:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	895b      	ldrh	r3, [r3, #10]
 801426a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801426c:	429a      	cmp	r2, r3
 801426e:	d906      	bls.n	801427e <ip4_frag+0x10e>
 8014270:	4b5c      	ldr	r3, [pc, #368]	@ (80143e4 <ip4_frag+0x274>)
 8014272:	f240 322d 	movw	r2, #813	@ 0x32d
 8014276:	495f      	ldr	r1, [pc, #380]	@ (80143f4 <ip4_frag+0x284>)
 8014278:	485c      	ldr	r0, [pc, #368]	@ (80143ec <ip4_frag+0x27c>)
 801427a:	f000 fbab 	bl	80149d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801427e:	8bfa      	ldrh	r2, [r7, #30]
 8014280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014284:	4293      	cmp	r3, r2
 8014286:	bf28      	it	cs
 8014288:	4613      	movcs	r3, r2
 801428a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801428e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014292:	2b00      	cmp	r3, #0
 8014294:	d105      	bne.n	80142a2 <ip4_frag+0x132>
        poff = 0;
 8014296:	2300      	movs	r3, #0
 8014298:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	60fb      	str	r3, [r7, #12]
        continue;
 80142a0:	e041      	b.n	8014326 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80142a2:	f7ff ff0d 	bl	80140c0 <ip_frag_alloc_pbuf_custom_ref>
 80142a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d103      	bne.n	80142b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80142ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80142b0:	f7f7 fc40 	bl	800bb34 <pbuf_free>
        goto memerr;
 80142b4:	e08f      	b.n	80143d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80142b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80142bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80142be:	4413      	add	r3, r2
 80142c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80142c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80142c8:	9201      	str	r2, [sp, #4]
 80142ca:	9300      	str	r3, [sp, #0]
 80142cc:	4603      	mov	r3, r0
 80142ce:	2241      	movs	r2, #65	@ 0x41
 80142d0:	2000      	movs	r0, #0
 80142d2:	f7f7 fa75 	bl	800b7c0 <pbuf_alloced_custom>
 80142d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d106      	bne.n	80142ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80142de:	69b8      	ldr	r0, [r7, #24]
 80142e0:	f7ff fef6 	bl	80140d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80142e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80142e6:	f7f7 fc25 	bl	800bb34 <pbuf_free>
        goto memerr;
 80142ea:	e074      	b.n	80143d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80142ec:	68f8      	ldr	r0, [r7, #12]
 80142ee:	f7f7 fcc7 	bl	800bc80 <pbuf_ref>
      pcr->original = p;
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	68fa      	ldr	r2, [r7, #12]
 80142f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	4a3f      	ldr	r2, [pc, #252]	@ (80143f8 <ip4_frag+0x288>)
 80142fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80142fe:	6979      	ldr	r1, [r7, #20]
 8014300:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014302:	f7f7 fce5 	bl	800bcd0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014306:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801430a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801430e:	1ad3      	subs	r3, r2, r3
 8014310:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014318:	2b00      	cmp	r3, #0
 801431a:	d004      	beq.n	8014326 <ip4_frag+0x1b6>
        poff = 0;
 801431c:	2300      	movs	r3, #0
 801431e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014326:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801432a:	2b00      	cmp	r3, #0
 801432c:	d196      	bne.n	801425c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801432e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014334:	4413      	add	r3, r2
 8014336:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801433c:	f1a3 0213 	sub.w	r2, r3, #19
 8014340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014344:	429a      	cmp	r2, r3
 8014346:	bfcc      	ite	gt
 8014348:	2301      	movgt	r3, #1
 801434a:	2300      	movle	r3, #0
 801434c:	b2db      	uxtb	r3, r3
 801434e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014350:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014358:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801435a:	6a3b      	ldr	r3, [r7, #32]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d002      	beq.n	8014366 <ip4_frag+0x1f6>
 8014360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014362:	2b00      	cmp	r3, #0
 8014364:	d003      	beq.n	801436e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014366:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014368:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801436c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801436e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014370:	4618      	mov	r0, r3
 8014372:	f7f5 ffed 	bl	800a350 <lwip_htons>
 8014376:	4603      	mov	r3, r0
 8014378:	461a      	mov	r2, r3
 801437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801437c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801437e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014380:	3314      	adds	r3, #20
 8014382:	b29b      	uxth	r3, r3
 8014384:	4618      	mov	r0, r3
 8014386:	f7f5 ffe3 	bl	800a350 <lwip_htons>
 801438a:	4603      	mov	r3, r0
 801438c:	461a      	mov	r2, r3
 801438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014390:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014394:	2200      	movs	r2, #0
 8014396:	729a      	strb	r2, [r3, #10]
 8014398:	2200      	movs	r2, #0
 801439a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	695b      	ldr	r3, [r3, #20]
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80143a4:	68b8      	ldr	r0, [r7, #8]
 80143a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80143a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80143aa:	f7f7 fbc3 	bl	800bb34 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80143ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80143b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80143b4:	1ad3      	subs	r3, r2, r3
 80143b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80143ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80143be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80143c0:	4413      	add	r3, r2
 80143c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80143c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	f47f af19 	bne.w	8014202 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80143d0:	2300      	movs	r3, #0
 80143d2:	e002      	b.n	80143da <ip4_frag+0x26a>
      goto memerr;
 80143d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80143d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3748      	adds	r7, #72	@ 0x48
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	08018128 	.word	0x08018128
 80143e8:	08018304 	.word	0x08018304
 80143ec:	08018170 	.word	0x08018170
 80143f0:	08018320 	.word	0x08018320
 80143f4:	08018340 	.word	0x08018340
 80143f8:	08014109 	.word	0x08014109

080143fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b086      	sub	sp, #24
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014406:	230e      	movs	r3, #14
 8014408:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	895b      	ldrh	r3, [r3, #10]
 801440e:	2b0e      	cmp	r3, #14
 8014410:	d96e      	bls.n	80144f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	7bdb      	ldrb	r3, [r3, #15]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d106      	bne.n	8014428 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014420:	3301      	adds	r3, #1
 8014422:	b2da      	uxtb	r2, r3
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	7b1a      	ldrb	r2, [r3, #12]
 8014432:	7b5b      	ldrb	r3, [r3, #13]
 8014434:	021b      	lsls	r3, r3, #8
 8014436:	4313      	orrs	r3, r2
 8014438:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	f003 0301 	and.w	r3, r3, #1
 8014442:	2b00      	cmp	r3, #0
 8014444:	d023      	beq.n	801448e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	2b01      	cmp	r3, #1
 801444c:	d10f      	bne.n	801446e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	785b      	ldrb	r3, [r3, #1]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d11b      	bne.n	801448e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014456:	693b      	ldr	r3, [r7, #16]
 8014458:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801445a:	2b5e      	cmp	r3, #94	@ 0x5e
 801445c:	d117      	bne.n	801448e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	7b5b      	ldrb	r3, [r3, #13]
 8014462:	f043 0310 	orr.w	r3, r3, #16
 8014466:	b2da      	uxtb	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	735a      	strb	r2, [r3, #13]
 801446c:	e00f      	b.n	801448e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	2206      	movs	r2, #6
 8014472:	4928      	ldr	r1, [pc, #160]	@ (8014514 <ethernet_input+0x118>)
 8014474:	4618      	mov	r0, r3
 8014476:	f000 fb02 	bl	8014a7e <memcmp>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d106      	bne.n	801448e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	7b5b      	ldrb	r3, [r3, #13]
 8014484:	f043 0308 	orr.w	r3, r3, #8
 8014488:	b2da      	uxtb	r2, r3
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801448e:	89fb      	ldrh	r3, [r7, #14]
 8014490:	2b08      	cmp	r3, #8
 8014492:	d003      	beq.n	801449c <ethernet_input+0xa0>
 8014494:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014498:	d014      	beq.n	80144c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801449a:	e032      	b.n	8014502 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144a2:	f003 0308 	and.w	r3, r3, #8
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d024      	beq.n	80144f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80144aa:	8afb      	ldrh	r3, [r7, #22]
 80144ac:	4619      	mov	r1, r3
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7f7 faba 	bl	800ba28 <pbuf_remove_header>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d11e      	bne.n	80144f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80144ba:	6839      	ldr	r1, [r7, #0]
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f7fe fe91 	bl	80131e4 <ip4_input>
      break;
 80144c2:	e013      	b.n	80144ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144ca:	f003 0308 	and.w	r3, r3, #8
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d014      	beq.n	80144fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80144d2:	8afb      	ldrh	r3, [r7, #22]
 80144d4:	4619      	mov	r1, r3
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f7f7 faa6 	bl	800ba28 <pbuf_remove_header>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d10e      	bne.n	8014500 <ethernet_input+0x104>
        etharp_input(p, netif);
 80144e2:	6839      	ldr	r1, [r7, #0]
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f7fe f831 	bl	801254c <etharp_input>
      break;
 80144ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80144ec:	2300      	movs	r3, #0
 80144ee:	e00c      	b.n	801450a <ethernet_input+0x10e>
    goto free_and_return;
 80144f0:	bf00      	nop
 80144f2:	e006      	b.n	8014502 <ethernet_input+0x106>
        goto free_and_return;
 80144f4:	bf00      	nop
 80144f6:	e004      	b.n	8014502 <ethernet_input+0x106>
        goto free_and_return;
 80144f8:	bf00      	nop
 80144fa:	e002      	b.n	8014502 <ethernet_input+0x106>
        goto free_and_return;
 80144fc:	bf00      	nop
 80144fe:	e000      	b.n	8014502 <ethernet_input+0x106>
        goto free_and_return;
 8014500:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7f7 fb16 	bl	800bb34 <pbuf_free>
  return ERR_OK;
 8014508:	2300      	movs	r3, #0
}
 801450a:	4618      	mov	r0, r3
 801450c:	3718      	adds	r7, #24
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	0801851c 	.word	0x0801851c

08014518 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014518:	b580      	push	{r7, lr}
 801451a:	b086      	sub	sp, #24
 801451c:	af00      	add	r7, sp, #0
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	60b9      	str	r1, [r7, #8]
 8014522:	607a      	str	r2, [r7, #4]
 8014524:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014526:	8c3b      	ldrh	r3, [r7, #32]
 8014528:	4618      	mov	r0, r3
 801452a:	f7f5 ff11 	bl	800a350 <lwip_htons>
 801452e:	4603      	mov	r3, r0
 8014530:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014532:	210e      	movs	r1, #14
 8014534:	68b8      	ldr	r0, [r7, #8]
 8014536:	f7f7 fa67 	bl	800ba08 <pbuf_add_header>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d125      	bne.n	801458c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	8afa      	ldrh	r2, [r7, #22]
 801454a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	2206      	movs	r2, #6
 8014550:	6839      	ldr	r1, [r7, #0]
 8014552:	4618      	mov	r0, r3
 8014554:	f000 fb19 	bl	8014b8a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	3306      	adds	r3, #6
 801455c:	2206      	movs	r2, #6
 801455e:	6879      	ldr	r1, [r7, #4]
 8014560:	4618      	mov	r0, r3
 8014562:	f000 fb12 	bl	8014b8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801456c:	2b06      	cmp	r3, #6
 801456e:	d006      	beq.n	801457e <ethernet_output+0x66>
 8014570:	4b0a      	ldr	r3, [pc, #40]	@ (801459c <ethernet_output+0x84>)
 8014572:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014576:	490a      	ldr	r1, [pc, #40]	@ (80145a0 <ethernet_output+0x88>)
 8014578:	480a      	ldr	r0, [pc, #40]	@ (80145a4 <ethernet_output+0x8c>)
 801457a:	f000 fa2b 	bl	80149d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	699b      	ldr	r3, [r3, #24]
 8014582:	68b9      	ldr	r1, [r7, #8]
 8014584:	68f8      	ldr	r0, [r7, #12]
 8014586:	4798      	blx	r3
 8014588:	4603      	mov	r3, r0
 801458a:	e002      	b.n	8014592 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801458c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801458e:	f06f 0301 	mvn.w	r3, #1
}
 8014592:	4618      	mov	r0, r3
 8014594:	3718      	adds	r7, #24
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}
 801459a:	bf00      	nop
 801459c:	08018350 	.word	0x08018350
 80145a0:	08018388 	.word	0x08018388
 80145a4:	080183bc 	.word	0x080183bc

080145a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	60bb      	str	r3, [r7, #8]
 80145b6:	2304      	movs	r3, #4
 80145b8:	60fb      	str	r3, [r7, #12]
 80145ba:	2300      	movs	r3, #0
 80145bc:	613b      	str	r3, [r7, #16]
 80145be:	2300      	movs	r3, #0
 80145c0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80145c2:	f107 0308 	add.w	r3, r7, #8
 80145c6:	2100      	movs	r1, #0
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7f2 fee5 	bl	8007398 <osMessageCreate>
 80145ce:	4602      	mov	r2, r0
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d102      	bne.n	80145e2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80145dc:	f04f 33ff 	mov.w	r3, #4294967295
 80145e0:	e000      	b.n	80145e4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80145e2:	2300      	movs	r3, #0
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3718      	adds	r7, #24
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	6839      	ldr	r1, [r7, #0]
 80145fc:	2200      	movs	r2, #0
 80145fe:	4618      	mov	r0, r3
 8014600:	f7f2 fef2 	bl	80073e8 <osMessagePut>
 8014604:	4603      	mov	r3, r0
 8014606:	2b00      	cmp	r3, #0
 8014608:	d102      	bne.n	8014610 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801460a:	2300      	movs	r3, #0
 801460c:	73fb      	strb	r3, [r7, #15]
 801460e:	e001      	b.n	8014614 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014610:	23ff      	movs	r3, #255	@ 0xff
 8014612:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014618:	4618      	mov	r0, r3
 801461a:	3710      	adds	r7, #16
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}

08014620 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b08c      	sub	sp, #48	@ 0x30
 8014624:	af00      	add	r7, sp, #0
 8014626:	61f8      	str	r0, [r7, #28]
 8014628:	61b9      	str	r1, [r7, #24]
 801462a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801462c:	f7f2 fce5 	bl	8006ffa <osKernelSysTick>
 8014630:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d017      	beq.n	8014668 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	6819      	ldr	r1, [r3, #0]
 801463c:	f107 0320 	add.w	r3, r7, #32
 8014640:	697a      	ldr	r2, [r7, #20]
 8014642:	4618      	mov	r0, r3
 8014644:	f7f2 ff10 	bl	8007468 <osMessageGet>

    if(event.status == osEventMessage)
 8014648:	6a3b      	ldr	r3, [r7, #32]
 801464a:	2b10      	cmp	r3, #16
 801464c:	d109      	bne.n	8014662 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014650:	461a      	mov	r2, r3
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014656:	f7f2 fcd0 	bl	8006ffa <osKernelSysTick>
 801465a:	4602      	mov	r2, r0
 801465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801465e:	1ad3      	subs	r3, r2, r3
 8014660:	e019      	b.n	8014696 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014662:	f04f 33ff 	mov.w	r3, #4294967295
 8014666:	e016      	b.n	8014696 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014668:	69fb      	ldr	r3, [r7, #28]
 801466a:	6819      	ldr	r1, [r3, #0]
 801466c:	463b      	mov	r3, r7
 801466e:	f04f 32ff 	mov.w	r2, #4294967295
 8014672:	4618      	mov	r0, r3
 8014674:	f7f2 fef8 	bl	8007468 <osMessageGet>
 8014678:	f107 0320 	add.w	r3, r7, #32
 801467c:	463a      	mov	r2, r7
 801467e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014680:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014686:	461a      	mov	r2, r3
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801468c:	f7f2 fcb5 	bl	8006ffa <osKernelSysTick>
 8014690:	4602      	mov	r2, r0
 8014692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014694:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014696:	4618      	mov	r0, r3
 8014698:	3730      	adds	r7, #48	@ 0x30
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}

0801469e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801469e:	b480      	push	{r7}
 80146a0:	b083      	sub	sp, #12
 80146a2:	af00      	add	r7, sp, #0
 80146a4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d101      	bne.n	80146b2 <sys_mbox_valid+0x14>
    return 0;
 80146ae:	2300      	movs	r3, #0
 80146b0:	e000      	b.n	80146b4 <sys_mbox_valid+0x16>
  else
    return 1;
 80146b2:	2301      	movs	r3, #1
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	370c      	adds	r7, #12
 80146b8:	46bd      	mov	sp, r7
 80146ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146be:	4770      	bx	lr

080146c0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80146c4:	4803      	ldr	r0, [pc, #12]	@ (80146d4 <sys_init+0x14>)
 80146c6:	f7f2 fd14 	bl	80070f2 <osMutexCreate>
 80146ca:	4603      	mov	r3, r0
 80146cc:	4a02      	ldr	r2, [pc, #8]	@ (80146d8 <sys_init+0x18>)
 80146ce:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80146d0:	bf00      	nop
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	0801852c 	.word	0x0801852c
 80146d8:	2000d954 	.word	0x2000d954

080146dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80146e4:	2300      	movs	r3, #0
 80146e6:	60bb      	str	r3, [r7, #8]
 80146e8:	2300      	movs	r3, #0
 80146ea:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80146ec:	f107 0308 	add.w	r3, r7, #8
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7f2 fcfe 	bl	80070f2 <osMutexCreate>
 80146f6:	4602      	mov	r2, r0
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d102      	bne.n	801470a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014704:	f04f 33ff 	mov.w	r3, #4294967295
 8014708:	e000      	b.n	801470c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801470a:	2300      	movs	r3, #0
}
 801470c:	4618      	mov	r0, r3
 801470e:	3710      	adds	r7, #16
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	f04f 31ff 	mov.w	r1, #4294967295
 8014724:	4618      	mov	r0, r3
 8014726:	f7f2 fcfd 	bl	8007124 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801472a:	bf00      	nop
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b082      	sub	sp, #8
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	4618      	mov	r0, r3
 8014740:	f7f2 fd3e 	bl	80071c0 <osMutexRelease>
}
 8014744:	bf00      	nop
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08c      	sub	sp, #48	@ 0x30
 8014750:	af00      	add	r7, sp, #0
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	607a      	str	r2, [r7, #4]
 8014758:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801475a:	f107 0314 	add.w	r3, r7, #20
 801475e:	2200      	movs	r2, #0
 8014760:	601a      	str	r2, [r3, #0]
 8014762:	605a      	str	r2, [r3, #4]
 8014764:	609a      	str	r2, [r3, #8]
 8014766:	60da      	str	r2, [r3, #12]
 8014768:	611a      	str	r2, [r3, #16]
 801476a:	615a      	str	r2, [r3, #20]
 801476c:	619a      	str	r2, [r3, #24]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	617b      	str	r3, [r7, #20]
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	61bb      	str	r3, [r7, #24]
 8014776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014778:	b21b      	sxth	r3, r3
 801477a:	83bb      	strh	r3, [r7, #28]
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014780:	f107 0314 	add.w	r3, r7, #20
 8014784:	6879      	ldr	r1, [r7, #4]
 8014786:	4618      	mov	r0, r3
 8014788:	f7f2 fc47 	bl	800701a <osThreadCreate>
 801478c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801478e:	4618      	mov	r0, r3
 8014790:	3730      	adds	r7, #48	@ 0x30
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
	...

08014798 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801479c:	4b04      	ldr	r3, [pc, #16]	@ (80147b0 <sys_arch_protect+0x18>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	f04f 31ff 	mov.w	r1, #4294967295
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7f2 fcbd 	bl	8007124 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80147aa:	2301      	movs	r3, #1
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	2000d954 	.word	0x2000d954

080147b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80147bc:	4b04      	ldr	r3, [pc, #16]	@ (80147d0 <sys_arch_unprotect+0x1c>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7f2 fcfd 	bl	80071c0 <osMutexRelease>
}
 80147c6:	bf00      	nop
 80147c8:	3708      	adds	r7, #8
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	2000d954 	.word	0x2000d954

080147d4 <rand>:
 80147d4:	4b16      	ldr	r3, [pc, #88]	@ (8014830 <rand+0x5c>)
 80147d6:	b510      	push	{r4, lr}
 80147d8:	681c      	ldr	r4, [r3, #0]
 80147da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80147dc:	b9b3      	cbnz	r3, 801480c <rand+0x38>
 80147de:	2018      	movs	r0, #24
 80147e0:	f000 fa00 	bl	8014be4 <malloc>
 80147e4:	4602      	mov	r2, r0
 80147e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80147e8:	b920      	cbnz	r0, 80147f4 <rand+0x20>
 80147ea:	4b12      	ldr	r3, [pc, #72]	@ (8014834 <rand+0x60>)
 80147ec:	4812      	ldr	r0, [pc, #72]	@ (8014838 <rand+0x64>)
 80147ee:	2152      	movs	r1, #82	@ 0x52
 80147f0:	f000 f9da 	bl	8014ba8 <__assert_func>
 80147f4:	4911      	ldr	r1, [pc, #68]	@ (801483c <rand+0x68>)
 80147f6:	4b12      	ldr	r3, [pc, #72]	@ (8014840 <rand+0x6c>)
 80147f8:	e9c0 1300 	strd	r1, r3, [r0]
 80147fc:	4b11      	ldr	r3, [pc, #68]	@ (8014844 <rand+0x70>)
 80147fe:	6083      	str	r3, [r0, #8]
 8014800:	230b      	movs	r3, #11
 8014802:	8183      	strh	r3, [r0, #12]
 8014804:	2100      	movs	r1, #0
 8014806:	2001      	movs	r0, #1
 8014808:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801480c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801480e:	480e      	ldr	r0, [pc, #56]	@ (8014848 <rand+0x74>)
 8014810:	690b      	ldr	r3, [r1, #16]
 8014812:	694c      	ldr	r4, [r1, #20]
 8014814:	4a0d      	ldr	r2, [pc, #52]	@ (801484c <rand+0x78>)
 8014816:	4358      	muls	r0, r3
 8014818:	fb02 0004 	mla	r0, r2, r4, r0
 801481c:	fba3 3202 	umull	r3, r2, r3, r2
 8014820:	3301      	adds	r3, #1
 8014822:	eb40 0002 	adc.w	r0, r0, r2
 8014826:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801482a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801482e:	bd10      	pop	{r4, pc}
 8014830:	2000003c 	.word	0x2000003c
 8014834:	08018534 	.word	0x08018534
 8014838:	0801854b 	.word	0x0801854b
 801483c:	abcd330e 	.word	0xabcd330e
 8014840:	e66d1234 	.word	0xe66d1234
 8014844:	0005deec 	.word	0x0005deec
 8014848:	5851f42d 	.word	0x5851f42d
 801484c:	4c957f2d 	.word	0x4c957f2d

08014850 <std>:
 8014850:	2300      	movs	r3, #0
 8014852:	b510      	push	{r4, lr}
 8014854:	4604      	mov	r4, r0
 8014856:	e9c0 3300 	strd	r3, r3, [r0]
 801485a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801485e:	6083      	str	r3, [r0, #8]
 8014860:	8181      	strh	r1, [r0, #12]
 8014862:	6643      	str	r3, [r0, #100]	@ 0x64
 8014864:	81c2      	strh	r2, [r0, #14]
 8014866:	6183      	str	r3, [r0, #24]
 8014868:	4619      	mov	r1, r3
 801486a:	2208      	movs	r2, #8
 801486c:	305c      	adds	r0, #92	@ 0x5c
 801486e:	f000 f916 	bl	8014a9e <memset>
 8014872:	4b0d      	ldr	r3, [pc, #52]	@ (80148a8 <std+0x58>)
 8014874:	6263      	str	r3, [r4, #36]	@ 0x24
 8014876:	4b0d      	ldr	r3, [pc, #52]	@ (80148ac <std+0x5c>)
 8014878:	62a3      	str	r3, [r4, #40]	@ 0x28
 801487a:	4b0d      	ldr	r3, [pc, #52]	@ (80148b0 <std+0x60>)
 801487c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801487e:	4b0d      	ldr	r3, [pc, #52]	@ (80148b4 <std+0x64>)
 8014880:	6323      	str	r3, [r4, #48]	@ 0x30
 8014882:	4b0d      	ldr	r3, [pc, #52]	@ (80148b8 <std+0x68>)
 8014884:	6224      	str	r4, [r4, #32]
 8014886:	429c      	cmp	r4, r3
 8014888:	d006      	beq.n	8014898 <std+0x48>
 801488a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801488e:	4294      	cmp	r4, r2
 8014890:	d002      	beq.n	8014898 <std+0x48>
 8014892:	33d0      	adds	r3, #208	@ 0xd0
 8014894:	429c      	cmp	r4, r3
 8014896:	d105      	bne.n	80148a4 <std+0x54>
 8014898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801489c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148a0:	f000 b970 	b.w	8014b84 <__retarget_lock_init_recursive>
 80148a4:	bd10      	pop	{r4, pc}
 80148a6:	bf00      	nop
 80148a8:	080149f9 	.word	0x080149f9
 80148ac:	08014a1b 	.word	0x08014a1b
 80148b0:	08014a53 	.word	0x08014a53
 80148b4:	08014a77 	.word	0x08014a77
 80148b8:	2000d958 	.word	0x2000d958

080148bc <stdio_exit_handler>:
 80148bc:	4a02      	ldr	r2, [pc, #8]	@ (80148c8 <stdio_exit_handler+0xc>)
 80148be:	4903      	ldr	r1, [pc, #12]	@ (80148cc <stdio_exit_handler+0x10>)
 80148c0:	4803      	ldr	r0, [pc, #12]	@ (80148d0 <stdio_exit_handler+0x14>)
 80148c2:	f000 b869 	b.w	8014998 <_fwalk_sglue>
 80148c6:	bf00      	nop
 80148c8:	20000030 	.word	0x20000030
 80148cc:	080153f9 	.word	0x080153f9
 80148d0:	20000040 	.word	0x20000040

080148d4 <cleanup_stdio>:
 80148d4:	6841      	ldr	r1, [r0, #4]
 80148d6:	4b0c      	ldr	r3, [pc, #48]	@ (8014908 <cleanup_stdio+0x34>)
 80148d8:	4299      	cmp	r1, r3
 80148da:	b510      	push	{r4, lr}
 80148dc:	4604      	mov	r4, r0
 80148de:	d001      	beq.n	80148e4 <cleanup_stdio+0x10>
 80148e0:	f000 fd8a 	bl	80153f8 <_fflush_r>
 80148e4:	68a1      	ldr	r1, [r4, #8]
 80148e6:	4b09      	ldr	r3, [pc, #36]	@ (801490c <cleanup_stdio+0x38>)
 80148e8:	4299      	cmp	r1, r3
 80148ea:	d002      	beq.n	80148f2 <cleanup_stdio+0x1e>
 80148ec:	4620      	mov	r0, r4
 80148ee:	f000 fd83 	bl	80153f8 <_fflush_r>
 80148f2:	68e1      	ldr	r1, [r4, #12]
 80148f4:	4b06      	ldr	r3, [pc, #24]	@ (8014910 <cleanup_stdio+0x3c>)
 80148f6:	4299      	cmp	r1, r3
 80148f8:	d004      	beq.n	8014904 <cleanup_stdio+0x30>
 80148fa:	4620      	mov	r0, r4
 80148fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014900:	f000 bd7a 	b.w	80153f8 <_fflush_r>
 8014904:	bd10      	pop	{r4, pc}
 8014906:	bf00      	nop
 8014908:	2000d958 	.word	0x2000d958
 801490c:	2000d9c0 	.word	0x2000d9c0
 8014910:	2000da28 	.word	0x2000da28

08014914 <global_stdio_init.part.0>:
 8014914:	b510      	push	{r4, lr}
 8014916:	4b0b      	ldr	r3, [pc, #44]	@ (8014944 <global_stdio_init.part.0+0x30>)
 8014918:	4c0b      	ldr	r4, [pc, #44]	@ (8014948 <global_stdio_init.part.0+0x34>)
 801491a:	4a0c      	ldr	r2, [pc, #48]	@ (801494c <global_stdio_init.part.0+0x38>)
 801491c:	601a      	str	r2, [r3, #0]
 801491e:	4620      	mov	r0, r4
 8014920:	2200      	movs	r2, #0
 8014922:	2104      	movs	r1, #4
 8014924:	f7ff ff94 	bl	8014850 <std>
 8014928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801492c:	2201      	movs	r2, #1
 801492e:	2109      	movs	r1, #9
 8014930:	f7ff ff8e 	bl	8014850 <std>
 8014934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014938:	2202      	movs	r2, #2
 801493a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801493e:	2112      	movs	r1, #18
 8014940:	f7ff bf86 	b.w	8014850 <std>
 8014944:	2000da90 	.word	0x2000da90
 8014948:	2000d958 	.word	0x2000d958
 801494c:	080148bd 	.word	0x080148bd

08014950 <__sfp_lock_acquire>:
 8014950:	4801      	ldr	r0, [pc, #4]	@ (8014958 <__sfp_lock_acquire+0x8>)
 8014952:	f000 b918 	b.w	8014b86 <__retarget_lock_acquire_recursive>
 8014956:	bf00      	nop
 8014958:	2000da95 	.word	0x2000da95

0801495c <__sfp_lock_release>:
 801495c:	4801      	ldr	r0, [pc, #4]	@ (8014964 <__sfp_lock_release+0x8>)
 801495e:	f000 b913 	b.w	8014b88 <__retarget_lock_release_recursive>
 8014962:	bf00      	nop
 8014964:	2000da95 	.word	0x2000da95

08014968 <__sinit>:
 8014968:	b510      	push	{r4, lr}
 801496a:	4604      	mov	r4, r0
 801496c:	f7ff fff0 	bl	8014950 <__sfp_lock_acquire>
 8014970:	6a23      	ldr	r3, [r4, #32]
 8014972:	b11b      	cbz	r3, 801497c <__sinit+0x14>
 8014974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014978:	f7ff bff0 	b.w	801495c <__sfp_lock_release>
 801497c:	4b04      	ldr	r3, [pc, #16]	@ (8014990 <__sinit+0x28>)
 801497e:	6223      	str	r3, [r4, #32]
 8014980:	4b04      	ldr	r3, [pc, #16]	@ (8014994 <__sinit+0x2c>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d1f5      	bne.n	8014974 <__sinit+0xc>
 8014988:	f7ff ffc4 	bl	8014914 <global_stdio_init.part.0>
 801498c:	e7f2      	b.n	8014974 <__sinit+0xc>
 801498e:	bf00      	nop
 8014990:	080148d5 	.word	0x080148d5
 8014994:	2000da90 	.word	0x2000da90

08014998 <_fwalk_sglue>:
 8014998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801499c:	4607      	mov	r7, r0
 801499e:	4688      	mov	r8, r1
 80149a0:	4614      	mov	r4, r2
 80149a2:	2600      	movs	r6, #0
 80149a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149a8:	f1b9 0901 	subs.w	r9, r9, #1
 80149ac:	d505      	bpl.n	80149ba <_fwalk_sglue+0x22>
 80149ae:	6824      	ldr	r4, [r4, #0]
 80149b0:	2c00      	cmp	r4, #0
 80149b2:	d1f7      	bne.n	80149a4 <_fwalk_sglue+0xc>
 80149b4:	4630      	mov	r0, r6
 80149b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ba:	89ab      	ldrh	r3, [r5, #12]
 80149bc:	2b01      	cmp	r3, #1
 80149be:	d907      	bls.n	80149d0 <_fwalk_sglue+0x38>
 80149c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149c4:	3301      	adds	r3, #1
 80149c6:	d003      	beq.n	80149d0 <_fwalk_sglue+0x38>
 80149c8:	4629      	mov	r1, r5
 80149ca:	4638      	mov	r0, r7
 80149cc:	47c0      	blx	r8
 80149ce:	4306      	orrs	r6, r0
 80149d0:	3568      	adds	r5, #104	@ 0x68
 80149d2:	e7e9      	b.n	80149a8 <_fwalk_sglue+0x10>

080149d4 <iprintf>:
 80149d4:	b40f      	push	{r0, r1, r2, r3}
 80149d6:	b507      	push	{r0, r1, r2, lr}
 80149d8:	4906      	ldr	r1, [pc, #24]	@ (80149f4 <iprintf+0x20>)
 80149da:	ab04      	add	r3, sp, #16
 80149dc:	6808      	ldr	r0, [r1, #0]
 80149de:	f853 2b04 	ldr.w	r2, [r3], #4
 80149e2:	6881      	ldr	r1, [r0, #8]
 80149e4:	9301      	str	r3, [sp, #4]
 80149e6:	f000 f9dd 	bl	8014da4 <_vfiprintf_r>
 80149ea:	b003      	add	sp, #12
 80149ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80149f0:	b004      	add	sp, #16
 80149f2:	4770      	bx	lr
 80149f4:	2000003c 	.word	0x2000003c

080149f8 <__sread>:
 80149f8:	b510      	push	{r4, lr}
 80149fa:	460c      	mov	r4, r1
 80149fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a00:	f000 f878 	bl	8014af4 <_read_r>
 8014a04:	2800      	cmp	r0, #0
 8014a06:	bfab      	itete	ge
 8014a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8014a0c:	181b      	addge	r3, r3, r0
 8014a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014a12:	bfac      	ite	ge
 8014a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014a16:	81a3      	strhlt	r3, [r4, #12]
 8014a18:	bd10      	pop	{r4, pc}

08014a1a <__swrite>:
 8014a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a1e:	461f      	mov	r7, r3
 8014a20:	898b      	ldrh	r3, [r1, #12]
 8014a22:	05db      	lsls	r3, r3, #23
 8014a24:	4605      	mov	r5, r0
 8014a26:	460c      	mov	r4, r1
 8014a28:	4616      	mov	r6, r2
 8014a2a:	d505      	bpl.n	8014a38 <__swrite+0x1e>
 8014a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a30:	2302      	movs	r3, #2
 8014a32:	2200      	movs	r2, #0
 8014a34:	f000 f84c 	bl	8014ad0 <_lseek_r>
 8014a38:	89a3      	ldrh	r3, [r4, #12]
 8014a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a42:	81a3      	strh	r3, [r4, #12]
 8014a44:	4632      	mov	r2, r6
 8014a46:	463b      	mov	r3, r7
 8014a48:	4628      	mov	r0, r5
 8014a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4e:	f000 b863 	b.w	8014b18 <_write_r>

08014a52 <__sseek>:
 8014a52:	b510      	push	{r4, lr}
 8014a54:	460c      	mov	r4, r1
 8014a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a5a:	f000 f839 	bl	8014ad0 <_lseek_r>
 8014a5e:	1c43      	adds	r3, r0, #1
 8014a60:	89a3      	ldrh	r3, [r4, #12]
 8014a62:	bf15      	itete	ne
 8014a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a6e:	81a3      	strheq	r3, [r4, #12]
 8014a70:	bf18      	it	ne
 8014a72:	81a3      	strhne	r3, [r4, #12]
 8014a74:	bd10      	pop	{r4, pc}

08014a76 <__sclose>:
 8014a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a7a:	f000 b819 	b.w	8014ab0 <_close_r>

08014a7e <memcmp>:
 8014a7e:	b510      	push	{r4, lr}
 8014a80:	3901      	subs	r1, #1
 8014a82:	4402      	add	r2, r0
 8014a84:	4290      	cmp	r0, r2
 8014a86:	d101      	bne.n	8014a8c <memcmp+0xe>
 8014a88:	2000      	movs	r0, #0
 8014a8a:	e005      	b.n	8014a98 <memcmp+0x1a>
 8014a8c:	7803      	ldrb	r3, [r0, #0]
 8014a8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014a92:	42a3      	cmp	r3, r4
 8014a94:	d001      	beq.n	8014a9a <memcmp+0x1c>
 8014a96:	1b18      	subs	r0, r3, r4
 8014a98:	bd10      	pop	{r4, pc}
 8014a9a:	3001      	adds	r0, #1
 8014a9c:	e7f2      	b.n	8014a84 <memcmp+0x6>

08014a9e <memset>:
 8014a9e:	4402      	add	r2, r0
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	4293      	cmp	r3, r2
 8014aa4:	d100      	bne.n	8014aa8 <memset+0xa>
 8014aa6:	4770      	bx	lr
 8014aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8014aac:	e7f9      	b.n	8014aa2 <memset+0x4>
	...

08014ab0 <_close_r>:
 8014ab0:	b538      	push	{r3, r4, r5, lr}
 8014ab2:	4d06      	ldr	r5, [pc, #24]	@ (8014acc <_close_r+0x1c>)
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	4608      	mov	r0, r1
 8014aba:	602b      	str	r3, [r5, #0]
 8014abc:	f7ec fadc 	bl	8001078 <_close>
 8014ac0:	1c43      	adds	r3, r0, #1
 8014ac2:	d102      	bne.n	8014aca <_close_r+0x1a>
 8014ac4:	682b      	ldr	r3, [r5, #0]
 8014ac6:	b103      	cbz	r3, 8014aca <_close_r+0x1a>
 8014ac8:	6023      	str	r3, [r4, #0]
 8014aca:	bd38      	pop	{r3, r4, r5, pc}
 8014acc:	2000d950 	.word	0x2000d950

08014ad0 <_lseek_r>:
 8014ad0:	b538      	push	{r3, r4, r5, lr}
 8014ad2:	4d07      	ldr	r5, [pc, #28]	@ (8014af0 <_lseek_r+0x20>)
 8014ad4:	4604      	mov	r4, r0
 8014ad6:	4608      	mov	r0, r1
 8014ad8:	4611      	mov	r1, r2
 8014ada:	2200      	movs	r2, #0
 8014adc:	602a      	str	r2, [r5, #0]
 8014ade:	461a      	mov	r2, r3
 8014ae0:	f7ec faf1 	bl	80010c6 <_lseek>
 8014ae4:	1c43      	adds	r3, r0, #1
 8014ae6:	d102      	bne.n	8014aee <_lseek_r+0x1e>
 8014ae8:	682b      	ldr	r3, [r5, #0]
 8014aea:	b103      	cbz	r3, 8014aee <_lseek_r+0x1e>
 8014aec:	6023      	str	r3, [r4, #0]
 8014aee:	bd38      	pop	{r3, r4, r5, pc}
 8014af0:	2000d950 	.word	0x2000d950

08014af4 <_read_r>:
 8014af4:	b538      	push	{r3, r4, r5, lr}
 8014af6:	4d07      	ldr	r5, [pc, #28]	@ (8014b14 <_read_r+0x20>)
 8014af8:	4604      	mov	r4, r0
 8014afa:	4608      	mov	r0, r1
 8014afc:	4611      	mov	r1, r2
 8014afe:	2200      	movs	r2, #0
 8014b00:	602a      	str	r2, [r5, #0]
 8014b02:	461a      	mov	r2, r3
 8014b04:	f7ec fa7f 	bl	8001006 <_read>
 8014b08:	1c43      	adds	r3, r0, #1
 8014b0a:	d102      	bne.n	8014b12 <_read_r+0x1e>
 8014b0c:	682b      	ldr	r3, [r5, #0]
 8014b0e:	b103      	cbz	r3, 8014b12 <_read_r+0x1e>
 8014b10:	6023      	str	r3, [r4, #0]
 8014b12:	bd38      	pop	{r3, r4, r5, pc}
 8014b14:	2000d950 	.word	0x2000d950

08014b18 <_write_r>:
 8014b18:	b538      	push	{r3, r4, r5, lr}
 8014b1a:	4d07      	ldr	r5, [pc, #28]	@ (8014b38 <_write_r+0x20>)
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	4608      	mov	r0, r1
 8014b20:	4611      	mov	r1, r2
 8014b22:	2200      	movs	r2, #0
 8014b24:	602a      	str	r2, [r5, #0]
 8014b26:	461a      	mov	r2, r3
 8014b28:	f7ec fa8a 	bl	8001040 <_write>
 8014b2c:	1c43      	adds	r3, r0, #1
 8014b2e:	d102      	bne.n	8014b36 <_write_r+0x1e>
 8014b30:	682b      	ldr	r3, [r5, #0]
 8014b32:	b103      	cbz	r3, 8014b36 <_write_r+0x1e>
 8014b34:	6023      	str	r3, [r4, #0]
 8014b36:	bd38      	pop	{r3, r4, r5, pc}
 8014b38:	2000d950 	.word	0x2000d950

08014b3c <__libc_init_array>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8014b74 <__libc_init_array+0x38>)
 8014b40:	4c0d      	ldr	r4, [pc, #52]	@ (8014b78 <__libc_init_array+0x3c>)
 8014b42:	1b64      	subs	r4, r4, r5
 8014b44:	10a4      	asrs	r4, r4, #2
 8014b46:	2600      	movs	r6, #0
 8014b48:	42a6      	cmp	r6, r4
 8014b4a:	d109      	bne.n	8014b60 <__libc_init_array+0x24>
 8014b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8014b7c <__libc_init_array+0x40>)
 8014b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8014b80 <__libc_init_array+0x44>)
 8014b50:	f000 fe4a 	bl	80157e8 <_init>
 8014b54:	1b64      	subs	r4, r4, r5
 8014b56:	10a4      	asrs	r4, r4, #2
 8014b58:	2600      	movs	r6, #0
 8014b5a:	42a6      	cmp	r6, r4
 8014b5c:	d105      	bne.n	8014b6a <__libc_init_array+0x2e>
 8014b5e:	bd70      	pop	{r4, r5, r6, pc}
 8014b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b64:	4798      	blx	r3
 8014b66:	3601      	adds	r6, #1
 8014b68:	e7ee      	b.n	8014b48 <__libc_init_array+0xc>
 8014b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b6e:	4798      	blx	r3
 8014b70:	3601      	adds	r6, #1
 8014b72:	e7f2      	b.n	8014b5a <__libc_init_array+0x1e>
 8014b74:	0801861c 	.word	0x0801861c
 8014b78:	0801861c 	.word	0x0801861c
 8014b7c:	0801861c 	.word	0x0801861c
 8014b80:	08018620 	.word	0x08018620

08014b84 <__retarget_lock_init_recursive>:
 8014b84:	4770      	bx	lr

08014b86 <__retarget_lock_acquire_recursive>:
 8014b86:	4770      	bx	lr

08014b88 <__retarget_lock_release_recursive>:
 8014b88:	4770      	bx	lr

08014b8a <memcpy>:
 8014b8a:	440a      	add	r2, r1
 8014b8c:	4291      	cmp	r1, r2
 8014b8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b92:	d100      	bne.n	8014b96 <memcpy+0xc>
 8014b94:	4770      	bx	lr
 8014b96:	b510      	push	{r4, lr}
 8014b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ba0:	4291      	cmp	r1, r2
 8014ba2:	d1f9      	bne.n	8014b98 <memcpy+0xe>
 8014ba4:	bd10      	pop	{r4, pc}
	...

08014ba8 <__assert_func>:
 8014ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014baa:	4614      	mov	r4, r2
 8014bac:	461a      	mov	r2, r3
 8014bae:	4b09      	ldr	r3, [pc, #36]	@ (8014bd4 <__assert_func+0x2c>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	4605      	mov	r5, r0
 8014bb4:	68d8      	ldr	r0, [r3, #12]
 8014bb6:	b954      	cbnz	r4, 8014bce <__assert_func+0x26>
 8014bb8:	4b07      	ldr	r3, [pc, #28]	@ (8014bd8 <__assert_func+0x30>)
 8014bba:	461c      	mov	r4, r3
 8014bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014bc0:	9100      	str	r1, [sp, #0]
 8014bc2:	462b      	mov	r3, r5
 8014bc4:	4905      	ldr	r1, [pc, #20]	@ (8014bdc <__assert_func+0x34>)
 8014bc6:	f000 fc3f 	bl	8015448 <fiprintf>
 8014bca:	f000 fcf3 	bl	80155b4 <abort>
 8014bce:	4b04      	ldr	r3, [pc, #16]	@ (8014be0 <__assert_func+0x38>)
 8014bd0:	e7f4      	b.n	8014bbc <__assert_func+0x14>
 8014bd2:	bf00      	nop
 8014bd4:	2000003c 	.word	0x2000003c
 8014bd8:	080185de 	.word	0x080185de
 8014bdc:	080185b0 	.word	0x080185b0
 8014be0:	080185a3 	.word	0x080185a3

08014be4 <malloc>:
 8014be4:	4b02      	ldr	r3, [pc, #8]	@ (8014bf0 <malloc+0xc>)
 8014be6:	4601      	mov	r1, r0
 8014be8:	6818      	ldr	r0, [r3, #0]
 8014bea:	f000 b825 	b.w	8014c38 <_malloc_r>
 8014bee:	bf00      	nop
 8014bf0:	2000003c 	.word	0x2000003c

08014bf4 <sbrk_aligned>:
 8014bf4:	b570      	push	{r4, r5, r6, lr}
 8014bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8014c34 <sbrk_aligned+0x40>)
 8014bf8:	460c      	mov	r4, r1
 8014bfa:	6831      	ldr	r1, [r6, #0]
 8014bfc:	4605      	mov	r5, r0
 8014bfe:	b911      	cbnz	r1, 8014c06 <sbrk_aligned+0x12>
 8014c00:	f000 fcc8 	bl	8015594 <_sbrk_r>
 8014c04:	6030      	str	r0, [r6, #0]
 8014c06:	4621      	mov	r1, r4
 8014c08:	4628      	mov	r0, r5
 8014c0a:	f000 fcc3 	bl	8015594 <_sbrk_r>
 8014c0e:	1c43      	adds	r3, r0, #1
 8014c10:	d103      	bne.n	8014c1a <sbrk_aligned+0x26>
 8014c12:	f04f 34ff 	mov.w	r4, #4294967295
 8014c16:	4620      	mov	r0, r4
 8014c18:	bd70      	pop	{r4, r5, r6, pc}
 8014c1a:	1cc4      	adds	r4, r0, #3
 8014c1c:	f024 0403 	bic.w	r4, r4, #3
 8014c20:	42a0      	cmp	r0, r4
 8014c22:	d0f8      	beq.n	8014c16 <sbrk_aligned+0x22>
 8014c24:	1a21      	subs	r1, r4, r0
 8014c26:	4628      	mov	r0, r5
 8014c28:	f000 fcb4 	bl	8015594 <_sbrk_r>
 8014c2c:	3001      	adds	r0, #1
 8014c2e:	d1f2      	bne.n	8014c16 <sbrk_aligned+0x22>
 8014c30:	e7ef      	b.n	8014c12 <sbrk_aligned+0x1e>
 8014c32:	bf00      	nop
 8014c34:	2000da98 	.word	0x2000da98

08014c38 <_malloc_r>:
 8014c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c3c:	1ccd      	adds	r5, r1, #3
 8014c3e:	f025 0503 	bic.w	r5, r5, #3
 8014c42:	3508      	adds	r5, #8
 8014c44:	2d0c      	cmp	r5, #12
 8014c46:	bf38      	it	cc
 8014c48:	250c      	movcc	r5, #12
 8014c4a:	2d00      	cmp	r5, #0
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	db01      	blt.n	8014c54 <_malloc_r+0x1c>
 8014c50:	42a9      	cmp	r1, r5
 8014c52:	d904      	bls.n	8014c5e <_malloc_r+0x26>
 8014c54:	230c      	movs	r3, #12
 8014c56:	6033      	str	r3, [r6, #0]
 8014c58:	2000      	movs	r0, #0
 8014c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014d34 <_malloc_r+0xfc>
 8014c62:	f000 f869 	bl	8014d38 <__malloc_lock>
 8014c66:	f8d8 3000 	ldr.w	r3, [r8]
 8014c6a:	461c      	mov	r4, r3
 8014c6c:	bb44      	cbnz	r4, 8014cc0 <_malloc_r+0x88>
 8014c6e:	4629      	mov	r1, r5
 8014c70:	4630      	mov	r0, r6
 8014c72:	f7ff ffbf 	bl	8014bf4 <sbrk_aligned>
 8014c76:	1c43      	adds	r3, r0, #1
 8014c78:	4604      	mov	r4, r0
 8014c7a:	d158      	bne.n	8014d2e <_malloc_r+0xf6>
 8014c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8014c80:	4627      	mov	r7, r4
 8014c82:	2f00      	cmp	r7, #0
 8014c84:	d143      	bne.n	8014d0e <_malloc_r+0xd6>
 8014c86:	2c00      	cmp	r4, #0
 8014c88:	d04b      	beq.n	8014d22 <_malloc_r+0xea>
 8014c8a:	6823      	ldr	r3, [r4, #0]
 8014c8c:	4639      	mov	r1, r7
 8014c8e:	4630      	mov	r0, r6
 8014c90:	eb04 0903 	add.w	r9, r4, r3
 8014c94:	f000 fc7e 	bl	8015594 <_sbrk_r>
 8014c98:	4581      	cmp	r9, r0
 8014c9a:	d142      	bne.n	8014d22 <_malloc_r+0xea>
 8014c9c:	6821      	ldr	r1, [r4, #0]
 8014c9e:	1a6d      	subs	r5, r5, r1
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	4630      	mov	r0, r6
 8014ca4:	f7ff ffa6 	bl	8014bf4 <sbrk_aligned>
 8014ca8:	3001      	adds	r0, #1
 8014caa:	d03a      	beq.n	8014d22 <_malloc_r+0xea>
 8014cac:	6823      	ldr	r3, [r4, #0]
 8014cae:	442b      	add	r3, r5
 8014cb0:	6023      	str	r3, [r4, #0]
 8014cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8014cb6:	685a      	ldr	r2, [r3, #4]
 8014cb8:	bb62      	cbnz	r2, 8014d14 <_malloc_r+0xdc>
 8014cba:	f8c8 7000 	str.w	r7, [r8]
 8014cbe:	e00f      	b.n	8014ce0 <_malloc_r+0xa8>
 8014cc0:	6822      	ldr	r2, [r4, #0]
 8014cc2:	1b52      	subs	r2, r2, r5
 8014cc4:	d420      	bmi.n	8014d08 <_malloc_r+0xd0>
 8014cc6:	2a0b      	cmp	r2, #11
 8014cc8:	d917      	bls.n	8014cfa <_malloc_r+0xc2>
 8014cca:	1961      	adds	r1, r4, r5
 8014ccc:	42a3      	cmp	r3, r4
 8014cce:	6025      	str	r5, [r4, #0]
 8014cd0:	bf18      	it	ne
 8014cd2:	6059      	strne	r1, [r3, #4]
 8014cd4:	6863      	ldr	r3, [r4, #4]
 8014cd6:	bf08      	it	eq
 8014cd8:	f8c8 1000 	streq.w	r1, [r8]
 8014cdc:	5162      	str	r2, [r4, r5]
 8014cde:	604b      	str	r3, [r1, #4]
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	f000 f82f 	bl	8014d44 <__malloc_unlock>
 8014ce6:	f104 000b 	add.w	r0, r4, #11
 8014cea:	1d23      	adds	r3, r4, #4
 8014cec:	f020 0007 	bic.w	r0, r0, #7
 8014cf0:	1ac2      	subs	r2, r0, r3
 8014cf2:	bf1c      	itt	ne
 8014cf4:	1a1b      	subne	r3, r3, r0
 8014cf6:	50a3      	strne	r3, [r4, r2]
 8014cf8:	e7af      	b.n	8014c5a <_malloc_r+0x22>
 8014cfa:	6862      	ldr	r2, [r4, #4]
 8014cfc:	42a3      	cmp	r3, r4
 8014cfe:	bf0c      	ite	eq
 8014d00:	f8c8 2000 	streq.w	r2, [r8]
 8014d04:	605a      	strne	r2, [r3, #4]
 8014d06:	e7eb      	b.n	8014ce0 <_malloc_r+0xa8>
 8014d08:	4623      	mov	r3, r4
 8014d0a:	6864      	ldr	r4, [r4, #4]
 8014d0c:	e7ae      	b.n	8014c6c <_malloc_r+0x34>
 8014d0e:	463c      	mov	r4, r7
 8014d10:	687f      	ldr	r7, [r7, #4]
 8014d12:	e7b6      	b.n	8014c82 <_malloc_r+0x4a>
 8014d14:	461a      	mov	r2, r3
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	42a3      	cmp	r3, r4
 8014d1a:	d1fb      	bne.n	8014d14 <_malloc_r+0xdc>
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	6053      	str	r3, [r2, #4]
 8014d20:	e7de      	b.n	8014ce0 <_malloc_r+0xa8>
 8014d22:	230c      	movs	r3, #12
 8014d24:	6033      	str	r3, [r6, #0]
 8014d26:	4630      	mov	r0, r6
 8014d28:	f000 f80c 	bl	8014d44 <__malloc_unlock>
 8014d2c:	e794      	b.n	8014c58 <_malloc_r+0x20>
 8014d2e:	6005      	str	r5, [r0, #0]
 8014d30:	e7d6      	b.n	8014ce0 <_malloc_r+0xa8>
 8014d32:	bf00      	nop
 8014d34:	2000da9c 	.word	0x2000da9c

08014d38 <__malloc_lock>:
 8014d38:	4801      	ldr	r0, [pc, #4]	@ (8014d40 <__malloc_lock+0x8>)
 8014d3a:	f7ff bf24 	b.w	8014b86 <__retarget_lock_acquire_recursive>
 8014d3e:	bf00      	nop
 8014d40:	2000da94 	.word	0x2000da94

08014d44 <__malloc_unlock>:
 8014d44:	4801      	ldr	r0, [pc, #4]	@ (8014d4c <__malloc_unlock+0x8>)
 8014d46:	f7ff bf1f 	b.w	8014b88 <__retarget_lock_release_recursive>
 8014d4a:	bf00      	nop
 8014d4c:	2000da94 	.word	0x2000da94

08014d50 <__sfputc_r>:
 8014d50:	6893      	ldr	r3, [r2, #8]
 8014d52:	3b01      	subs	r3, #1
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	b410      	push	{r4}
 8014d58:	6093      	str	r3, [r2, #8]
 8014d5a:	da08      	bge.n	8014d6e <__sfputc_r+0x1e>
 8014d5c:	6994      	ldr	r4, [r2, #24]
 8014d5e:	42a3      	cmp	r3, r4
 8014d60:	db01      	blt.n	8014d66 <__sfputc_r+0x16>
 8014d62:	290a      	cmp	r1, #10
 8014d64:	d103      	bne.n	8014d6e <__sfputc_r+0x1e>
 8014d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d6a:	f000 bb7f 	b.w	801546c <__swbuf_r>
 8014d6e:	6813      	ldr	r3, [r2, #0]
 8014d70:	1c58      	adds	r0, r3, #1
 8014d72:	6010      	str	r0, [r2, #0]
 8014d74:	7019      	strb	r1, [r3, #0]
 8014d76:	4608      	mov	r0, r1
 8014d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d7c:	4770      	bx	lr

08014d7e <__sfputs_r>:
 8014d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d80:	4606      	mov	r6, r0
 8014d82:	460f      	mov	r7, r1
 8014d84:	4614      	mov	r4, r2
 8014d86:	18d5      	adds	r5, r2, r3
 8014d88:	42ac      	cmp	r4, r5
 8014d8a:	d101      	bne.n	8014d90 <__sfputs_r+0x12>
 8014d8c:	2000      	movs	r0, #0
 8014d8e:	e007      	b.n	8014da0 <__sfputs_r+0x22>
 8014d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d94:	463a      	mov	r2, r7
 8014d96:	4630      	mov	r0, r6
 8014d98:	f7ff ffda 	bl	8014d50 <__sfputc_r>
 8014d9c:	1c43      	adds	r3, r0, #1
 8014d9e:	d1f3      	bne.n	8014d88 <__sfputs_r+0xa>
 8014da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014da4 <_vfiprintf_r>:
 8014da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da8:	460d      	mov	r5, r1
 8014daa:	b09d      	sub	sp, #116	@ 0x74
 8014dac:	4614      	mov	r4, r2
 8014dae:	4698      	mov	r8, r3
 8014db0:	4606      	mov	r6, r0
 8014db2:	b118      	cbz	r0, 8014dbc <_vfiprintf_r+0x18>
 8014db4:	6a03      	ldr	r3, [r0, #32]
 8014db6:	b90b      	cbnz	r3, 8014dbc <_vfiprintf_r+0x18>
 8014db8:	f7ff fdd6 	bl	8014968 <__sinit>
 8014dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014dbe:	07d9      	lsls	r1, r3, #31
 8014dc0:	d405      	bmi.n	8014dce <_vfiprintf_r+0x2a>
 8014dc2:	89ab      	ldrh	r3, [r5, #12]
 8014dc4:	059a      	lsls	r2, r3, #22
 8014dc6:	d402      	bmi.n	8014dce <_vfiprintf_r+0x2a>
 8014dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dca:	f7ff fedc 	bl	8014b86 <__retarget_lock_acquire_recursive>
 8014dce:	89ab      	ldrh	r3, [r5, #12]
 8014dd0:	071b      	lsls	r3, r3, #28
 8014dd2:	d501      	bpl.n	8014dd8 <_vfiprintf_r+0x34>
 8014dd4:	692b      	ldr	r3, [r5, #16]
 8014dd6:	b99b      	cbnz	r3, 8014e00 <_vfiprintf_r+0x5c>
 8014dd8:	4629      	mov	r1, r5
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f000 fb84 	bl	80154e8 <__swsetup_r>
 8014de0:	b170      	cbz	r0, 8014e00 <_vfiprintf_r+0x5c>
 8014de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014de4:	07dc      	lsls	r4, r3, #31
 8014de6:	d504      	bpl.n	8014df2 <_vfiprintf_r+0x4e>
 8014de8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dec:	b01d      	add	sp, #116	@ 0x74
 8014dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df2:	89ab      	ldrh	r3, [r5, #12]
 8014df4:	0598      	lsls	r0, r3, #22
 8014df6:	d4f7      	bmi.n	8014de8 <_vfiprintf_r+0x44>
 8014df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dfa:	f7ff fec5 	bl	8014b88 <__retarget_lock_release_recursive>
 8014dfe:	e7f3      	b.n	8014de8 <_vfiprintf_r+0x44>
 8014e00:	2300      	movs	r3, #0
 8014e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e04:	2320      	movs	r3, #32
 8014e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e0e:	2330      	movs	r3, #48	@ 0x30
 8014e10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014fc0 <_vfiprintf_r+0x21c>
 8014e14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014e18:	f04f 0901 	mov.w	r9, #1
 8014e1c:	4623      	mov	r3, r4
 8014e1e:	469a      	mov	sl, r3
 8014e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e24:	b10a      	cbz	r2, 8014e2a <_vfiprintf_r+0x86>
 8014e26:	2a25      	cmp	r2, #37	@ 0x25
 8014e28:	d1f9      	bne.n	8014e1e <_vfiprintf_r+0x7a>
 8014e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8014e2e:	d00b      	beq.n	8014e48 <_vfiprintf_r+0xa4>
 8014e30:	465b      	mov	r3, fp
 8014e32:	4622      	mov	r2, r4
 8014e34:	4629      	mov	r1, r5
 8014e36:	4630      	mov	r0, r6
 8014e38:	f7ff ffa1 	bl	8014d7e <__sfputs_r>
 8014e3c:	3001      	adds	r0, #1
 8014e3e:	f000 80a7 	beq.w	8014f90 <_vfiprintf_r+0x1ec>
 8014e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e44:	445a      	add	r2, fp
 8014e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e48:	f89a 3000 	ldrb.w	r3, [sl]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	f000 809f 	beq.w	8014f90 <_vfiprintf_r+0x1ec>
 8014e52:	2300      	movs	r3, #0
 8014e54:	f04f 32ff 	mov.w	r2, #4294967295
 8014e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e5c:	f10a 0a01 	add.w	sl, sl, #1
 8014e60:	9304      	str	r3, [sp, #16]
 8014e62:	9307      	str	r3, [sp, #28]
 8014e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e6a:	4654      	mov	r4, sl
 8014e6c:	2205      	movs	r2, #5
 8014e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e72:	4853      	ldr	r0, [pc, #332]	@ (8014fc0 <_vfiprintf_r+0x21c>)
 8014e74:	f7eb f9cc 	bl	8000210 <memchr>
 8014e78:	9a04      	ldr	r2, [sp, #16]
 8014e7a:	b9d8      	cbnz	r0, 8014eb4 <_vfiprintf_r+0x110>
 8014e7c:	06d1      	lsls	r1, r2, #27
 8014e7e:	bf44      	itt	mi
 8014e80:	2320      	movmi	r3, #32
 8014e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e86:	0713      	lsls	r3, r2, #28
 8014e88:	bf44      	itt	mi
 8014e8a:	232b      	movmi	r3, #43	@ 0x2b
 8014e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e90:	f89a 3000 	ldrb.w	r3, [sl]
 8014e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e96:	d015      	beq.n	8014ec4 <_vfiprintf_r+0x120>
 8014e98:	9a07      	ldr	r2, [sp, #28]
 8014e9a:	4654      	mov	r4, sl
 8014e9c:	2000      	movs	r0, #0
 8014e9e:	f04f 0c0a 	mov.w	ip, #10
 8014ea2:	4621      	mov	r1, r4
 8014ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ea8:	3b30      	subs	r3, #48	@ 0x30
 8014eaa:	2b09      	cmp	r3, #9
 8014eac:	d94b      	bls.n	8014f46 <_vfiprintf_r+0x1a2>
 8014eae:	b1b0      	cbz	r0, 8014ede <_vfiprintf_r+0x13a>
 8014eb0:	9207      	str	r2, [sp, #28]
 8014eb2:	e014      	b.n	8014ede <_vfiprintf_r+0x13a>
 8014eb4:	eba0 0308 	sub.w	r3, r0, r8
 8014eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8014ebc:	4313      	orrs	r3, r2
 8014ebe:	9304      	str	r3, [sp, #16]
 8014ec0:	46a2      	mov	sl, r4
 8014ec2:	e7d2      	b.n	8014e6a <_vfiprintf_r+0xc6>
 8014ec4:	9b03      	ldr	r3, [sp, #12]
 8014ec6:	1d19      	adds	r1, r3, #4
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	9103      	str	r1, [sp, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	bfbb      	ittet	lt
 8014ed0:	425b      	neglt	r3, r3
 8014ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ed6:	9307      	strge	r3, [sp, #28]
 8014ed8:	9307      	strlt	r3, [sp, #28]
 8014eda:	bfb8      	it	lt
 8014edc:	9204      	strlt	r2, [sp, #16]
 8014ede:	7823      	ldrb	r3, [r4, #0]
 8014ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8014ee2:	d10a      	bne.n	8014efa <_vfiprintf_r+0x156>
 8014ee4:	7863      	ldrb	r3, [r4, #1]
 8014ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ee8:	d132      	bne.n	8014f50 <_vfiprintf_r+0x1ac>
 8014eea:	9b03      	ldr	r3, [sp, #12]
 8014eec:	1d1a      	adds	r2, r3, #4
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	9203      	str	r2, [sp, #12]
 8014ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014ef6:	3402      	adds	r4, #2
 8014ef8:	9305      	str	r3, [sp, #20]
 8014efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014fd0 <_vfiprintf_r+0x22c>
 8014efe:	7821      	ldrb	r1, [r4, #0]
 8014f00:	2203      	movs	r2, #3
 8014f02:	4650      	mov	r0, sl
 8014f04:	f7eb f984 	bl	8000210 <memchr>
 8014f08:	b138      	cbz	r0, 8014f1a <_vfiprintf_r+0x176>
 8014f0a:	9b04      	ldr	r3, [sp, #16]
 8014f0c:	eba0 000a 	sub.w	r0, r0, sl
 8014f10:	2240      	movs	r2, #64	@ 0x40
 8014f12:	4082      	lsls	r2, r0
 8014f14:	4313      	orrs	r3, r2
 8014f16:	3401      	adds	r4, #1
 8014f18:	9304      	str	r3, [sp, #16]
 8014f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f1e:	4829      	ldr	r0, [pc, #164]	@ (8014fc4 <_vfiprintf_r+0x220>)
 8014f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014f24:	2206      	movs	r2, #6
 8014f26:	f7eb f973 	bl	8000210 <memchr>
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	d03f      	beq.n	8014fae <_vfiprintf_r+0x20a>
 8014f2e:	4b26      	ldr	r3, [pc, #152]	@ (8014fc8 <_vfiprintf_r+0x224>)
 8014f30:	bb1b      	cbnz	r3, 8014f7a <_vfiprintf_r+0x1d6>
 8014f32:	9b03      	ldr	r3, [sp, #12]
 8014f34:	3307      	adds	r3, #7
 8014f36:	f023 0307 	bic.w	r3, r3, #7
 8014f3a:	3308      	adds	r3, #8
 8014f3c:	9303      	str	r3, [sp, #12]
 8014f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f40:	443b      	add	r3, r7
 8014f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f44:	e76a      	b.n	8014e1c <_vfiprintf_r+0x78>
 8014f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	2001      	movs	r0, #1
 8014f4e:	e7a8      	b.n	8014ea2 <_vfiprintf_r+0xfe>
 8014f50:	2300      	movs	r3, #0
 8014f52:	3401      	adds	r4, #1
 8014f54:	9305      	str	r3, [sp, #20]
 8014f56:	4619      	mov	r1, r3
 8014f58:	f04f 0c0a 	mov.w	ip, #10
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f62:	3a30      	subs	r2, #48	@ 0x30
 8014f64:	2a09      	cmp	r2, #9
 8014f66:	d903      	bls.n	8014f70 <_vfiprintf_r+0x1cc>
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d0c6      	beq.n	8014efa <_vfiprintf_r+0x156>
 8014f6c:	9105      	str	r1, [sp, #20]
 8014f6e:	e7c4      	b.n	8014efa <_vfiprintf_r+0x156>
 8014f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f74:	4604      	mov	r4, r0
 8014f76:	2301      	movs	r3, #1
 8014f78:	e7f0      	b.n	8014f5c <_vfiprintf_r+0x1b8>
 8014f7a:	ab03      	add	r3, sp, #12
 8014f7c:	9300      	str	r3, [sp, #0]
 8014f7e:	462a      	mov	r2, r5
 8014f80:	4b12      	ldr	r3, [pc, #72]	@ (8014fcc <_vfiprintf_r+0x228>)
 8014f82:	a904      	add	r1, sp, #16
 8014f84:	4630      	mov	r0, r6
 8014f86:	f3af 8000 	nop.w
 8014f8a:	4607      	mov	r7, r0
 8014f8c:	1c78      	adds	r0, r7, #1
 8014f8e:	d1d6      	bne.n	8014f3e <_vfiprintf_r+0x19a>
 8014f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f92:	07d9      	lsls	r1, r3, #31
 8014f94:	d405      	bmi.n	8014fa2 <_vfiprintf_r+0x1fe>
 8014f96:	89ab      	ldrh	r3, [r5, #12]
 8014f98:	059a      	lsls	r2, r3, #22
 8014f9a:	d402      	bmi.n	8014fa2 <_vfiprintf_r+0x1fe>
 8014f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f9e:	f7ff fdf3 	bl	8014b88 <__retarget_lock_release_recursive>
 8014fa2:	89ab      	ldrh	r3, [r5, #12]
 8014fa4:	065b      	lsls	r3, r3, #25
 8014fa6:	f53f af1f 	bmi.w	8014de8 <_vfiprintf_r+0x44>
 8014faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014fac:	e71e      	b.n	8014dec <_vfiprintf_r+0x48>
 8014fae:	ab03      	add	r3, sp, #12
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	4b05      	ldr	r3, [pc, #20]	@ (8014fcc <_vfiprintf_r+0x228>)
 8014fb6:	a904      	add	r1, sp, #16
 8014fb8:	4630      	mov	r0, r6
 8014fba:	f000 f879 	bl	80150b0 <_printf_i>
 8014fbe:	e7e4      	b.n	8014f8a <_vfiprintf_r+0x1e6>
 8014fc0:	080185df 	.word	0x080185df
 8014fc4:	080185e9 	.word	0x080185e9
 8014fc8:	00000000 	.word	0x00000000
 8014fcc:	08014d7f 	.word	0x08014d7f
 8014fd0:	080185e5 	.word	0x080185e5

08014fd4 <_printf_common>:
 8014fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fd8:	4616      	mov	r6, r2
 8014fda:	4698      	mov	r8, r3
 8014fdc:	688a      	ldr	r2, [r1, #8]
 8014fde:	690b      	ldr	r3, [r1, #16]
 8014fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014fe4:	4293      	cmp	r3, r2
 8014fe6:	bfb8      	it	lt
 8014fe8:	4613      	movlt	r3, r2
 8014fea:	6033      	str	r3, [r6, #0]
 8014fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014ff0:	4607      	mov	r7, r0
 8014ff2:	460c      	mov	r4, r1
 8014ff4:	b10a      	cbz	r2, 8014ffa <_printf_common+0x26>
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	6033      	str	r3, [r6, #0]
 8014ffa:	6823      	ldr	r3, [r4, #0]
 8014ffc:	0699      	lsls	r1, r3, #26
 8014ffe:	bf42      	ittt	mi
 8015000:	6833      	ldrmi	r3, [r6, #0]
 8015002:	3302      	addmi	r3, #2
 8015004:	6033      	strmi	r3, [r6, #0]
 8015006:	6825      	ldr	r5, [r4, #0]
 8015008:	f015 0506 	ands.w	r5, r5, #6
 801500c:	d106      	bne.n	801501c <_printf_common+0x48>
 801500e:	f104 0a19 	add.w	sl, r4, #25
 8015012:	68e3      	ldr	r3, [r4, #12]
 8015014:	6832      	ldr	r2, [r6, #0]
 8015016:	1a9b      	subs	r3, r3, r2
 8015018:	42ab      	cmp	r3, r5
 801501a:	dc26      	bgt.n	801506a <_printf_common+0x96>
 801501c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015020:	6822      	ldr	r2, [r4, #0]
 8015022:	3b00      	subs	r3, #0
 8015024:	bf18      	it	ne
 8015026:	2301      	movne	r3, #1
 8015028:	0692      	lsls	r2, r2, #26
 801502a:	d42b      	bmi.n	8015084 <_printf_common+0xb0>
 801502c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015030:	4641      	mov	r1, r8
 8015032:	4638      	mov	r0, r7
 8015034:	47c8      	blx	r9
 8015036:	3001      	adds	r0, #1
 8015038:	d01e      	beq.n	8015078 <_printf_common+0xa4>
 801503a:	6823      	ldr	r3, [r4, #0]
 801503c:	6922      	ldr	r2, [r4, #16]
 801503e:	f003 0306 	and.w	r3, r3, #6
 8015042:	2b04      	cmp	r3, #4
 8015044:	bf02      	ittt	eq
 8015046:	68e5      	ldreq	r5, [r4, #12]
 8015048:	6833      	ldreq	r3, [r6, #0]
 801504a:	1aed      	subeq	r5, r5, r3
 801504c:	68a3      	ldr	r3, [r4, #8]
 801504e:	bf0c      	ite	eq
 8015050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015054:	2500      	movne	r5, #0
 8015056:	4293      	cmp	r3, r2
 8015058:	bfc4      	itt	gt
 801505a:	1a9b      	subgt	r3, r3, r2
 801505c:	18ed      	addgt	r5, r5, r3
 801505e:	2600      	movs	r6, #0
 8015060:	341a      	adds	r4, #26
 8015062:	42b5      	cmp	r5, r6
 8015064:	d11a      	bne.n	801509c <_printf_common+0xc8>
 8015066:	2000      	movs	r0, #0
 8015068:	e008      	b.n	801507c <_printf_common+0xa8>
 801506a:	2301      	movs	r3, #1
 801506c:	4652      	mov	r2, sl
 801506e:	4641      	mov	r1, r8
 8015070:	4638      	mov	r0, r7
 8015072:	47c8      	blx	r9
 8015074:	3001      	adds	r0, #1
 8015076:	d103      	bne.n	8015080 <_printf_common+0xac>
 8015078:	f04f 30ff 	mov.w	r0, #4294967295
 801507c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015080:	3501      	adds	r5, #1
 8015082:	e7c6      	b.n	8015012 <_printf_common+0x3e>
 8015084:	18e1      	adds	r1, r4, r3
 8015086:	1c5a      	adds	r2, r3, #1
 8015088:	2030      	movs	r0, #48	@ 0x30
 801508a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801508e:	4422      	add	r2, r4
 8015090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015098:	3302      	adds	r3, #2
 801509a:	e7c7      	b.n	801502c <_printf_common+0x58>
 801509c:	2301      	movs	r3, #1
 801509e:	4622      	mov	r2, r4
 80150a0:	4641      	mov	r1, r8
 80150a2:	4638      	mov	r0, r7
 80150a4:	47c8      	blx	r9
 80150a6:	3001      	adds	r0, #1
 80150a8:	d0e6      	beq.n	8015078 <_printf_common+0xa4>
 80150aa:	3601      	adds	r6, #1
 80150ac:	e7d9      	b.n	8015062 <_printf_common+0x8e>
	...

080150b0 <_printf_i>:
 80150b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80150b4:	7e0f      	ldrb	r7, [r1, #24]
 80150b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80150b8:	2f78      	cmp	r7, #120	@ 0x78
 80150ba:	4691      	mov	r9, r2
 80150bc:	4680      	mov	r8, r0
 80150be:	460c      	mov	r4, r1
 80150c0:	469a      	mov	sl, r3
 80150c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80150c6:	d807      	bhi.n	80150d8 <_printf_i+0x28>
 80150c8:	2f62      	cmp	r7, #98	@ 0x62
 80150ca:	d80a      	bhi.n	80150e2 <_printf_i+0x32>
 80150cc:	2f00      	cmp	r7, #0
 80150ce:	f000 80d2 	beq.w	8015276 <_printf_i+0x1c6>
 80150d2:	2f58      	cmp	r7, #88	@ 0x58
 80150d4:	f000 80b9 	beq.w	801524a <_printf_i+0x19a>
 80150d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80150dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80150e0:	e03a      	b.n	8015158 <_printf_i+0xa8>
 80150e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80150e6:	2b15      	cmp	r3, #21
 80150e8:	d8f6      	bhi.n	80150d8 <_printf_i+0x28>
 80150ea:	a101      	add	r1, pc, #4	@ (adr r1, 80150f0 <_printf_i+0x40>)
 80150ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80150f0:	08015149 	.word	0x08015149
 80150f4:	0801515d 	.word	0x0801515d
 80150f8:	080150d9 	.word	0x080150d9
 80150fc:	080150d9 	.word	0x080150d9
 8015100:	080150d9 	.word	0x080150d9
 8015104:	080150d9 	.word	0x080150d9
 8015108:	0801515d 	.word	0x0801515d
 801510c:	080150d9 	.word	0x080150d9
 8015110:	080150d9 	.word	0x080150d9
 8015114:	080150d9 	.word	0x080150d9
 8015118:	080150d9 	.word	0x080150d9
 801511c:	0801525d 	.word	0x0801525d
 8015120:	08015187 	.word	0x08015187
 8015124:	08015217 	.word	0x08015217
 8015128:	080150d9 	.word	0x080150d9
 801512c:	080150d9 	.word	0x080150d9
 8015130:	0801527f 	.word	0x0801527f
 8015134:	080150d9 	.word	0x080150d9
 8015138:	08015187 	.word	0x08015187
 801513c:	080150d9 	.word	0x080150d9
 8015140:	080150d9 	.word	0x080150d9
 8015144:	0801521f 	.word	0x0801521f
 8015148:	6833      	ldr	r3, [r6, #0]
 801514a:	1d1a      	adds	r2, r3, #4
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	6032      	str	r2, [r6, #0]
 8015150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015158:	2301      	movs	r3, #1
 801515a:	e09d      	b.n	8015298 <_printf_i+0x1e8>
 801515c:	6833      	ldr	r3, [r6, #0]
 801515e:	6820      	ldr	r0, [r4, #0]
 8015160:	1d19      	adds	r1, r3, #4
 8015162:	6031      	str	r1, [r6, #0]
 8015164:	0606      	lsls	r6, r0, #24
 8015166:	d501      	bpl.n	801516c <_printf_i+0xbc>
 8015168:	681d      	ldr	r5, [r3, #0]
 801516a:	e003      	b.n	8015174 <_printf_i+0xc4>
 801516c:	0645      	lsls	r5, r0, #25
 801516e:	d5fb      	bpl.n	8015168 <_printf_i+0xb8>
 8015170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015174:	2d00      	cmp	r5, #0
 8015176:	da03      	bge.n	8015180 <_printf_i+0xd0>
 8015178:	232d      	movs	r3, #45	@ 0x2d
 801517a:	426d      	negs	r5, r5
 801517c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015180:	4859      	ldr	r0, [pc, #356]	@ (80152e8 <_printf_i+0x238>)
 8015182:	230a      	movs	r3, #10
 8015184:	e011      	b.n	80151aa <_printf_i+0xfa>
 8015186:	6821      	ldr	r1, [r4, #0]
 8015188:	6833      	ldr	r3, [r6, #0]
 801518a:	0608      	lsls	r0, r1, #24
 801518c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015190:	d402      	bmi.n	8015198 <_printf_i+0xe8>
 8015192:	0649      	lsls	r1, r1, #25
 8015194:	bf48      	it	mi
 8015196:	b2ad      	uxthmi	r5, r5
 8015198:	2f6f      	cmp	r7, #111	@ 0x6f
 801519a:	4853      	ldr	r0, [pc, #332]	@ (80152e8 <_printf_i+0x238>)
 801519c:	6033      	str	r3, [r6, #0]
 801519e:	bf14      	ite	ne
 80151a0:	230a      	movne	r3, #10
 80151a2:	2308      	moveq	r3, #8
 80151a4:	2100      	movs	r1, #0
 80151a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80151aa:	6866      	ldr	r6, [r4, #4]
 80151ac:	60a6      	str	r6, [r4, #8]
 80151ae:	2e00      	cmp	r6, #0
 80151b0:	bfa2      	ittt	ge
 80151b2:	6821      	ldrge	r1, [r4, #0]
 80151b4:	f021 0104 	bicge.w	r1, r1, #4
 80151b8:	6021      	strge	r1, [r4, #0]
 80151ba:	b90d      	cbnz	r5, 80151c0 <_printf_i+0x110>
 80151bc:	2e00      	cmp	r6, #0
 80151be:	d04b      	beq.n	8015258 <_printf_i+0x1a8>
 80151c0:	4616      	mov	r6, r2
 80151c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80151c6:	fb03 5711 	mls	r7, r3, r1, r5
 80151ca:	5dc7      	ldrb	r7, [r0, r7]
 80151cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80151d0:	462f      	mov	r7, r5
 80151d2:	42bb      	cmp	r3, r7
 80151d4:	460d      	mov	r5, r1
 80151d6:	d9f4      	bls.n	80151c2 <_printf_i+0x112>
 80151d8:	2b08      	cmp	r3, #8
 80151da:	d10b      	bne.n	80151f4 <_printf_i+0x144>
 80151dc:	6823      	ldr	r3, [r4, #0]
 80151de:	07df      	lsls	r7, r3, #31
 80151e0:	d508      	bpl.n	80151f4 <_printf_i+0x144>
 80151e2:	6923      	ldr	r3, [r4, #16]
 80151e4:	6861      	ldr	r1, [r4, #4]
 80151e6:	4299      	cmp	r1, r3
 80151e8:	bfde      	ittt	le
 80151ea:	2330      	movle	r3, #48	@ 0x30
 80151ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80151f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80151f4:	1b92      	subs	r2, r2, r6
 80151f6:	6122      	str	r2, [r4, #16]
 80151f8:	f8cd a000 	str.w	sl, [sp]
 80151fc:	464b      	mov	r3, r9
 80151fe:	aa03      	add	r2, sp, #12
 8015200:	4621      	mov	r1, r4
 8015202:	4640      	mov	r0, r8
 8015204:	f7ff fee6 	bl	8014fd4 <_printf_common>
 8015208:	3001      	adds	r0, #1
 801520a:	d14a      	bne.n	80152a2 <_printf_i+0x1f2>
 801520c:	f04f 30ff 	mov.w	r0, #4294967295
 8015210:	b004      	add	sp, #16
 8015212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015216:	6823      	ldr	r3, [r4, #0]
 8015218:	f043 0320 	orr.w	r3, r3, #32
 801521c:	6023      	str	r3, [r4, #0]
 801521e:	4833      	ldr	r0, [pc, #204]	@ (80152ec <_printf_i+0x23c>)
 8015220:	2778      	movs	r7, #120	@ 0x78
 8015222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015226:	6823      	ldr	r3, [r4, #0]
 8015228:	6831      	ldr	r1, [r6, #0]
 801522a:	061f      	lsls	r7, r3, #24
 801522c:	f851 5b04 	ldr.w	r5, [r1], #4
 8015230:	d402      	bmi.n	8015238 <_printf_i+0x188>
 8015232:	065f      	lsls	r7, r3, #25
 8015234:	bf48      	it	mi
 8015236:	b2ad      	uxthmi	r5, r5
 8015238:	6031      	str	r1, [r6, #0]
 801523a:	07d9      	lsls	r1, r3, #31
 801523c:	bf44      	itt	mi
 801523e:	f043 0320 	orrmi.w	r3, r3, #32
 8015242:	6023      	strmi	r3, [r4, #0]
 8015244:	b11d      	cbz	r5, 801524e <_printf_i+0x19e>
 8015246:	2310      	movs	r3, #16
 8015248:	e7ac      	b.n	80151a4 <_printf_i+0xf4>
 801524a:	4827      	ldr	r0, [pc, #156]	@ (80152e8 <_printf_i+0x238>)
 801524c:	e7e9      	b.n	8015222 <_printf_i+0x172>
 801524e:	6823      	ldr	r3, [r4, #0]
 8015250:	f023 0320 	bic.w	r3, r3, #32
 8015254:	6023      	str	r3, [r4, #0]
 8015256:	e7f6      	b.n	8015246 <_printf_i+0x196>
 8015258:	4616      	mov	r6, r2
 801525a:	e7bd      	b.n	80151d8 <_printf_i+0x128>
 801525c:	6833      	ldr	r3, [r6, #0]
 801525e:	6825      	ldr	r5, [r4, #0]
 8015260:	6961      	ldr	r1, [r4, #20]
 8015262:	1d18      	adds	r0, r3, #4
 8015264:	6030      	str	r0, [r6, #0]
 8015266:	062e      	lsls	r6, r5, #24
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	d501      	bpl.n	8015270 <_printf_i+0x1c0>
 801526c:	6019      	str	r1, [r3, #0]
 801526e:	e002      	b.n	8015276 <_printf_i+0x1c6>
 8015270:	0668      	lsls	r0, r5, #25
 8015272:	d5fb      	bpl.n	801526c <_printf_i+0x1bc>
 8015274:	8019      	strh	r1, [r3, #0]
 8015276:	2300      	movs	r3, #0
 8015278:	6123      	str	r3, [r4, #16]
 801527a:	4616      	mov	r6, r2
 801527c:	e7bc      	b.n	80151f8 <_printf_i+0x148>
 801527e:	6833      	ldr	r3, [r6, #0]
 8015280:	1d1a      	adds	r2, r3, #4
 8015282:	6032      	str	r2, [r6, #0]
 8015284:	681e      	ldr	r6, [r3, #0]
 8015286:	6862      	ldr	r2, [r4, #4]
 8015288:	2100      	movs	r1, #0
 801528a:	4630      	mov	r0, r6
 801528c:	f7ea ffc0 	bl	8000210 <memchr>
 8015290:	b108      	cbz	r0, 8015296 <_printf_i+0x1e6>
 8015292:	1b80      	subs	r0, r0, r6
 8015294:	6060      	str	r0, [r4, #4]
 8015296:	6863      	ldr	r3, [r4, #4]
 8015298:	6123      	str	r3, [r4, #16]
 801529a:	2300      	movs	r3, #0
 801529c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80152a0:	e7aa      	b.n	80151f8 <_printf_i+0x148>
 80152a2:	6923      	ldr	r3, [r4, #16]
 80152a4:	4632      	mov	r2, r6
 80152a6:	4649      	mov	r1, r9
 80152a8:	4640      	mov	r0, r8
 80152aa:	47d0      	blx	sl
 80152ac:	3001      	adds	r0, #1
 80152ae:	d0ad      	beq.n	801520c <_printf_i+0x15c>
 80152b0:	6823      	ldr	r3, [r4, #0]
 80152b2:	079b      	lsls	r3, r3, #30
 80152b4:	d413      	bmi.n	80152de <_printf_i+0x22e>
 80152b6:	68e0      	ldr	r0, [r4, #12]
 80152b8:	9b03      	ldr	r3, [sp, #12]
 80152ba:	4298      	cmp	r0, r3
 80152bc:	bfb8      	it	lt
 80152be:	4618      	movlt	r0, r3
 80152c0:	e7a6      	b.n	8015210 <_printf_i+0x160>
 80152c2:	2301      	movs	r3, #1
 80152c4:	4632      	mov	r2, r6
 80152c6:	4649      	mov	r1, r9
 80152c8:	4640      	mov	r0, r8
 80152ca:	47d0      	blx	sl
 80152cc:	3001      	adds	r0, #1
 80152ce:	d09d      	beq.n	801520c <_printf_i+0x15c>
 80152d0:	3501      	adds	r5, #1
 80152d2:	68e3      	ldr	r3, [r4, #12]
 80152d4:	9903      	ldr	r1, [sp, #12]
 80152d6:	1a5b      	subs	r3, r3, r1
 80152d8:	42ab      	cmp	r3, r5
 80152da:	dcf2      	bgt.n	80152c2 <_printf_i+0x212>
 80152dc:	e7eb      	b.n	80152b6 <_printf_i+0x206>
 80152de:	2500      	movs	r5, #0
 80152e0:	f104 0619 	add.w	r6, r4, #25
 80152e4:	e7f5      	b.n	80152d2 <_printf_i+0x222>
 80152e6:	bf00      	nop
 80152e8:	080185f0 	.word	0x080185f0
 80152ec:	08018601 	.word	0x08018601

080152f0 <__sflush_r>:
 80152f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80152f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152f8:	0716      	lsls	r6, r2, #28
 80152fa:	4605      	mov	r5, r0
 80152fc:	460c      	mov	r4, r1
 80152fe:	d454      	bmi.n	80153aa <__sflush_r+0xba>
 8015300:	684b      	ldr	r3, [r1, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	dc02      	bgt.n	801530c <__sflush_r+0x1c>
 8015306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015308:	2b00      	cmp	r3, #0
 801530a:	dd48      	ble.n	801539e <__sflush_r+0xae>
 801530c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801530e:	2e00      	cmp	r6, #0
 8015310:	d045      	beq.n	801539e <__sflush_r+0xae>
 8015312:	2300      	movs	r3, #0
 8015314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015318:	682f      	ldr	r7, [r5, #0]
 801531a:	6a21      	ldr	r1, [r4, #32]
 801531c:	602b      	str	r3, [r5, #0]
 801531e:	d030      	beq.n	8015382 <__sflush_r+0x92>
 8015320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015322:	89a3      	ldrh	r3, [r4, #12]
 8015324:	0759      	lsls	r1, r3, #29
 8015326:	d505      	bpl.n	8015334 <__sflush_r+0x44>
 8015328:	6863      	ldr	r3, [r4, #4]
 801532a:	1ad2      	subs	r2, r2, r3
 801532c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801532e:	b10b      	cbz	r3, 8015334 <__sflush_r+0x44>
 8015330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015332:	1ad2      	subs	r2, r2, r3
 8015334:	2300      	movs	r3, #0
 8015336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015338:	6a21      	ldr	r1, [r4, #32]
 801533a:	4628      	mov	r0, r5
 801533c:	47b0      	blx	r6
 801533e:	1c43      	adds	r3, r0, #1
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	d106      	bne.n	8015352 <__sflush_r+0x62>
 8015344:	6829      	ldr	r1, [r5, #0]
 8015346:	291d      	cmp	r1, #29
 8015348:	d82b      	bhi.n	80153a2 <__sflush_r+0xb2>
 801534a:	4a2a      	ldr	r2, [pc, #168]	@ (80153f4 <__sflush_r+0x104>)
 801534c:	410a      	asrs	r2, r1
 801534e:	07d6      	lsls	r6, r2, #31
 8015350:	d427      	bmi.n	80153a2 <__sflush_r+0xb2>
 8015352:	2200      	movs	r2, #0
 8015354:	6062      	str	r2, [r4, #4]
 8015356:	04d9      	lsls	r1, r3, #19
 8015358:	6922      	ldr	r2, [r4, #16]
 801535a:	6022      	str	r2, [r4, #0]
 801535c:	d504      	bpl.n	8015368 <__sflush_r+0x78>
 801535e:	1c42      	adds	r2, r0, #1
 8015360:	d101      	bne.n	8015366 <__sflush_r+0x76>
 8015362:	682b      	ldr	r3, [r5, #0]
 8015364:	b903      	cbnz	r3, 8015368 <__sflush_r+0x78>
 8015366:	6560      	str	r0, [r4, #84]	@ 0x54
 8015368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801536a:	602f      	str	r7, [r5, #0]
 801536c:	b1b9      	cbz	r1, 801539e <__sflush_r+0xae>
 801536e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015372:	4299      	cmp	r1, r3
 8015374:	d002      	beq.n	801537c <__sflush_r+0x8c>
 8015376:	4628      	mov	r0, r5
 8015378:	f000 f924 	bl	80155c4 <_free_r>
 801537c:	2300      	movs	r3, #0
 801537e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015380:	e00d      	b.n	801539e <__sflush_r+0xae>
 8015382:	2301      	movs	r3, #1
 8015384:	4628      	mov	r0, r5
 8015386:	47b0      	blx	r6
 8015388:	4602      	mov	r2, r0
 801538a:	1c50      	adds	r0, r2, #1
 801538c:	d1c9      	bne.n	8015322 <__sflush_r+0x32>
 801538e:	682b      	ldr	r3, [r5, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d0c6      	beq.n	8015322 <__sflush_r+0x32>
 8015394:	2b1d      	cmp	r3, #29
 8015396:	d001      	beq.n	801539c <__sflush_r+0xac>
 8015398:	2b16      	cmp	r3, #22
 801539a:	d11e      	bne.n	80153da <__sflush_r+0xea>
 801539c:	602f      	str	r7, [r5, #0]
 801539e:	2000      	movs	r0, #0
 80153a0:	e022      	b.n	80153e8 <__sflush_r+0xf8>
 80153a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153a6:	b21b      	sxth	r3, r3
 80153a8:	e01b      	b.n	80153e2 <__sflush_r+0xf2>
 80153aa:	690f      	ldr	r7, [r1, #16]
 80153ac:	2f00      	cmp	r7, #0
 80153ae:	d0f6      	beq.n	801539e <__sflush_r+0xae>
 80153b0:	0793      	lsls	r3, r2, #30
 80153b2:	680e      	ldr	r6, [r1, #0]
 80153b4:	bf08      	it	eq
 80153b6:	694b      	ldreq	r3, [r1, #20]
 80153b8:	600f      	str	r7, [r1, #0]
 80153ba:	bf18      	it	ne
 80153bc:	2300      	movne	r3, #0
 80153be:	eba6 0807 	sub.w	r8, r6, r7
 80153c2:	608b      	str	r3, [r1, #8]
 80153c4:	f1b8 0f00 	cmp.w	r8, #0
 80153c8:	dde9      	ble.n	801539e <__sflush_r+0xae>
 80153ca:	6a21      	ldr	r1, [r4, #32]
 80153cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80153ce:	4643      	mov	r3, r8
 80153d0:	463a      	mov	r2, r7
 80153d2:	4628      	mov	r0, r5
 80153d4:	47b0      	blx	r6
 80153d6:	2800      	cmp	r0, #0
 80153d8:	dc08      	bgt.n	80153ec <__sflush_r+0xfc>
 80153da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153e2:	81a3      	strh	r3, [r4, #12]
 80153e4:	f04f 30ff 	mov.w	r0, #4294967295
 80153e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153ec:	4407      	add	r7, r0
 80153ee:	eba8 0800 	sub.w	r8, r8, r0
 80153f2:	e7e7      	b.n	80153c4 <__sflush_r+0xd4>
 80153f4:	dfbffffe 	.word	0xdfbffffe

080153f8 <_fflush_r>:
 80153f8:	b538      	push	{r3, r4, r5, lr}
 80153fa:	690b      	ldr	r3, [r1, #16]
 80153fc:	4605      	mov	r5, r0
 80153fe:	460c      	mov	r4, r1
 8015400:	b913      	cbnz	r3, 8015408 <_fflush_r+0x10>
 8015402:	2500      	movs	r5, #0
 8015404:	4628      	mov	r0, r5
 8015406:	bd38      	pop	{r3, r4, r5, pc}
 8015408:	b118      	cbz	r0, 8015412 <_fflush_r+0x1a>
 801540a:	6a03      	ldr	r3, [r0, #32]
 801540c:	b90b      	cbnz	r3, 8015412 <_fflush_r+0x1a>
 801540e:	f7ff faab 	bl	8014968 <__sinit>
 8015412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d0f3      	beq.n	8015402 <_fflush_r+0xa>
 801541a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801541c:	07d0      	lsls	r0, r2, #31
 801541e:	d404      	bmi.n	801542a <_fflush_r+0x32>
 8015420:	0599      	lsls	r1, r3, #22
 8015422:	d402      	bmi.n	801542a <_fflush_r+0x32>
 8015424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015426:	f7ff fbae 	bl	8014b86 <__retarget_lock_acquire_recursive>
 801542a:	4628      	mov	r0, r5
 801542c:	4621      	mov	r1, r4
 801542e:	f7ff ff5f 	bl	80152f0 <__sflush_r>
 8015432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015434:	07da      	lsls	r2, r3, #31
 8015436:	4605      	mov	r5, r0
 8015438:	d4e4      	bmi.n	8015404 <_fflush_r+0xc>
 801543a:	89a3      	ldrh	r3, [r4, #12]
 801543c:	059b      	lsls	r3, r3, #22
 801543e:	d4e1      	bmi.n	8015404 <_fflush_r+0xc>
 8015440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015442:	f7ff fba1 	bl	8014b88 <__retarget_lock_release_recursive>
 8015446:	e7dd      	b.n	8015404 <_fflush_r+0xc>

08015448 <fiprintf>:
 8015448:	b40e      	push	{r1, r2, r3}
 801544a:	b503      	push	{r0, r1, lr}
 801544c:	4601      	mov	r1, r0
 801544e:	ab03      	add	r3, sp, #12
 8015450:	4805      	ldr	r0, [pc, #20]	@ (8015468 <fiprintf+0x20>)
 8015452:	f853 2b04 	ldr.w	r2, [r3], #4
 8015456:	6800      	ldr	r0, [r0, #0]
 8015458:	9301      	str	r3, [sp, #4]
 801545a:	f7ff fca3 	bl	8014da4 <_vfiprintf_r>
 801545e:	b002      	add	sp, #8
 8015460:	f85d eb04 	ldr.w	lr, [sp], #4
 8015464:	b003      	add	sp, #12
 8015466:	4770      	bx	lr
 8015468:	2000003c 	.word	0x2000003c

0801546c <__swbuf_r>:
 801546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801546e:	460e      	mov	r6, r1
 8015470:	4614      	mov	r4, r2
 8015472:	4605      	mov	r5, r0
 8015474:	b118      	cbz	r0, 801547e <__swbuf_r+0x12>
 8015476:	6a03      	ldr	r3, [r0, #32]
 8015478:	b90b      	cbnz	r3, 801547e <__swbuf_r+0x12>
 801547a:	f7ff fa75 	bl	8014968 <__sinit>
 801547e:	69a3      	ldr	r3, [r4, #24]
 8015480:	60a3      	str	r3, [r4, #8]
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	071a      	lsls	r2, r3, #28
 8015486:	d501      	bpl.n	801548c <__swbuf_r+0x20>
 8015488:	6923      	ldr	r3, [r4, #16]
 801548a:	b943      	cbnz	r3, 801549e <__swbuf_r+0x32>
 801548c:	4621      	mov	r1, r4
 801548e:	4628      	mov	r0, r5
 8015490:	f000 f82a 	bl	80154e8 <__swsetup_r>
 8015494:	b118      	cbz	r0, 801549e <__swbuf_r+0x32>
 8015496:	f04f 37ff 	mov.w	r7, #4294967295
 801549a:	4638      	mov	r0, r7
 801549c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801549e:	6823      	ldr	r3, [r4, #0]
 80154a0:	6922      	ldr	r2, [r4, #16]
 80154a2:	1a98      	subs	r0, r3, r2
 80154a4:	6963      	ldr	r3, [r4, #20]
 80154a6:	b2f6      	uxtb	r6, r6
 80154a8:	4283      	cmp	r3, r0
 80154aa:	4637      	mov	r7, r6
 80154ac:	dc05      	bgt.n	80154ba <__swbuf_r+0x4e>
 80154ae:	4621      	mov	r1, r4
 80154b0:	4628      	mov	r0, r5
 80154b2:	f7ff ffa1 	bl	80153f8 <_fflush_r>
 80154b6:	2800      	cmp	r0, #0
 80154b8:	d1ed      	bne.n	8015496 <__swbuf_r+0x2a>
 80154ba:	68a3      	ldr	r3, [r4, #8]
 80154bc:	3b01      	subs	r3, #1
 80154be:	60a3      	str	r3, [r4, #8]
 80154c0:	6823      	ldr	r3, [r4, #0]
 80154c2:	1c5a      	adds	r2, r3, #1
 80154c4:	6022      	str	r2, [r4, #0]
 80154c6:	701e      	strb	r6, [r3, #0]
 80154c8:	6962      	ldr	r2, [r4, #20]
 80154ca:	1c43      	adds	r3, r0, #1
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d004      	beq.n	80154da <__swbuf_r+0x6e>
 80154d0:	89a3      	ldrh	r3, [r4, #12]
 80154d2:	07db      	lsls	r3, r3, #31
 80154d4:	d5e1      	bpl.n	801549a <__swbuf_r+0x2e>
 80154d6:	2e0a      	cmp	r6, #10
 80154d8:	d1df      	bne.n	801549a <__swbuf_r+0x2e>
 80154da:	4621      	mov	r1, r4
 80154dc:	4628      	mov	r0, r5
 80154de:	f7ff ff8b 	bl	80153f8 <_fflush_r>
 80154e2:	2800      	cmp	r0, #0
 80154e4:	d0d9      	beq.n	801549a <__swbuf_r+0x2e>
 80154e6:	e7d6      	b.n	8015496 <__swbuf_r+0x2a>

080154e8 <__swsetup_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4b29      	ldr	r3, [pc, #164]	@ (8015590 <__swsetup_r+0xa8>)
 80154ec:	4605      	mov	r5, r0
 80154ee:	6818      	ldr	r0, [r3, #0]
 80154f0:	460c      	mov	r4, r1
 80154f2:	b118      	cbz	r0, 80154fc <__swsetup_r+0x14>
 80154f4:	6a03      	ldr	r3, [r0, #32]
 80154f6:	b90b      	cbnz	r3, 80154fc <__swsetup_r+0x14>
 80154f8:	f7ff fa36 	bl	8014968 <__sinit>
 80154fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015500:	0719      	lsls	r1, r3, #28
 8015502:	d422      	bmi.n	801554a <__swsetup_r+0x62>
 8015504:	06da      	lsls	r2, r3, #27
 8015506:	d407      	bmi.n	8015518 <__swsetup_r+0x30>
 8015508:	2209      	movs	r2, #9
 801550a:	602a      	str	r2, [r5, #0]
 801550c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015510:	81a3      	strh	r3, [r4, #12]
 8015512:	f04f 30ff 	mov.w	r0, #4294967295
 8015516:	e033      	b.n	8015580 <__swsetup_r+0x98>
 8015518:	0758      	lsls	r0, r3, #29
 801551a:	d512      	bpl.n	8015542 <__swsetup_r+0x5a>
 801551c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801551e:	b141      	cbz	r1, 8015532 <__swsetup_r+0x4a>
 8015520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015524:	4299      	cmp	r1, r3
 8015526:	d002      	beq.n	801552e <__swsetup_r+0x46>
 8015528:	4628      	mov	r0, r5
 801552a:	f000 f84b 	bl	80155c4 <_free_r>
 801552e:	2300      	movs	r3, #0
 8015530:	6363      	str	r3, [r4, #52]	@ 0x34
 8015532:	89a3      	ldrh	r3, [r4, #12]
 8015534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015538:	81a3      	strh	r3, [r4, #12]
 801553a:	2300      	movs	r3, #0
 801553c:	6063      	str	r3, [r4, #4]
 801553e:	6923      	ldr	r3, [r4, #16]
 8015540:	6023      	str	r3, [r4, #0]
 8015542:	89a3      	ldrh	r3, [r4, #12]
 8015544:	f043 0308 	orr.w	r3, r3, #8
 8015548:	81a3      	strh	r3, [r4, #12]
 801554a:	6923      	ldr	r3, [r4, #16]
 801554c:	b94b      	cbnz	r3, 8015562 <__swsetup_r+0x7a>
 801554e:	89a3      	ldrh	r3, [r4, #12]
 8015550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015558:	d003      	beq.n	8015562 <__swsetup_r+0x7a>
 801555a:	4621      	mov	r1, r4
 801555c:	4628      	mov	r0, r5
 801555e:	f000 f8a1 	bl	80156a4 <__smakebuf_r>
 8015562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015566:	f013 0201 	ands.w	r2, r3, #1
 801556a:	d00a      	beq.n	8015582 <__swsetup_r+0x9a>
 801556c:	2200      	movs	r2, #0
 801556e:	60a2      	str	r2, [r4, #8]
 8015570:	6962      	ldr	r2, [r4, #20]
 8015572:	4252      	negs	r2, r2
 8015574:	61a2      	str	r2, [r4, #24]
 8015576:	6922      	ldr	r2, [r4, #16]
 8015578:	b942      	cbnz	r2, 801558c <__swsetup_r+0xa4>
 801557a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801557e:	d1c5      	bne.n	801550c <__swsetup_r+0x24>
 8015580:	bd38      	pop	{r3, r4, r5, pc}
 8015582:	0799      	lsls	r1, r3, #30
 8015584:	bf58      	it	pl
 8015586:	6962      	ldrpl	r2, [r4, #20]
 8015588:	60a2      	str	r2, [r4, #8]
 801558a:	e7f4      	b.n	8015576 <__swsetup_r+0x8e>
 801558c:	2000      	movs	r0, #0
 801558e:	e7f7      	b.n	8015580 <__swsetup_r+0x98>
 8015590:	2000003c 	.word	0x2000003c

08015594 <_sbrk_r>:
 8015594:	b538      	push	{r3, r4, r5, lr}
 8015596:	4d06      	ldr	r5, [pc, #24]	@ (80155b0 <_sbrk_r+0x1c>)
 8015598:	2300      	movs	r3, #0
 801559a:	4604      	mov	r4, r0
 801559c:	4608      	mov	r0, r1
 801559e:	602b      	str	r3, [r5, #0]
 80155a0:	f7eb fd9e 	bl	80010e0 <_sbrk>
 80155a4:	1c43      	adds	r3, r0, #1
 80155a6:	d102      	bne.n	80155ae <_sbrk_r+0x1a>
 80155a8:	682b      	ldr	r3, [r5, #0]
 80155aa:	b103      	cbz	r3, 80155ae <_sbrk_r+0x1a>
 80155ac:	6023      	str	r3, [r4, #0]
 80155ae:	bd38      	pop	{r3, r4, r5, pc}
 80155b0:	2000d950 	.word	0x2000d950

080155b4 <abort>:
 80155b4:	b508      	push	{r3, lr}
 80155b6:	2006      	movs	r0, #6
 80155b8:	f000 f8d8 	bl	801576c <raise>
 80155bc:	2001      	movs	r0, #1
 80155be:	f7eb fd17 	bl	8000ff0 <_exit>
	...

080155c4 <_free_r>:
 80155c4:	b538      	push	{r3, r4, r5, lr}
 80155c6:	4605      	mov	r5, r0
 80155c8:	2900      	cmp	r1, #0
 80155ca:	d041      	beq.n	8015650 <_free_r+0x8c>
 80155cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155d0:	1f0c      	subs	r4, r1, #4
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	bfb8      	it	lt
 80155d6:	18e4      	addlt	r4, r4, r3
 80155d8:	f7ff fbae 	bl	8014d38 <__malloc_lock>
 80155dc:	4a1d      	ldr	r2, [pc, #116]	@ (8015654 <_free_r+0x90>)
 80155de:	6813      	ldr	r3, [r2, #0]
 80155e0:	b933      	cbnz	r3, 80155f0 <_free_r+0x2c>
 80155e2:	6063      	str	r3, [r4, #4]
 80155e4:	6014      	str	r4, [r2, #0]
 80155e6:	4628      	mov	r0, r5
 80155e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155ec:	f7ff bbaa 	b.w	8014d44 <__malloc_unlock>
 80155f0:	42a3      	cmp	r3, r4
 80155f2:	d908      	bls.n	8015606 <_free_r+0x42>
 80155f4:	6820      	ldr	r0, [r4, #0]
 80155f6:	1821      	adds	r1, r4, r0
 80155f8:	428b      	cmp	r3, r1
 80155fa:	bf01      	itttt	eq
 80155fc:	6819      	ldreq	r1, [r3, #0]
 80155fe:	685b      	ldreq	r3, [r3, #4]
 8015600:	1809      	addeq	r1, r1, r0
 8015602:	6021      	streq	r1, [r4, #0]
 8015604:	e7ed      	b.n	80155e2 <_free_r+0x1e>
 8015606:	461a      	mov	r2, r3
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	b10b      	cbz	r3, 8015610 <_free_r+0x4c>
 801560c:	42a3      	cmp	r3, r4
 801560e:	d9fa      	bls.n	8015606 <_free_r+0x42>
 8015610:	6811      	ldr	r1, [r2, #0]
 8015612:	1850      	adds	r0, r2, r1
 8015614:	42a0      	cmp	r0, r4
 8015616:	d10b      	bne.n	8015630 <_free_r+0x6c>
 8015618:	6820      	ldr	r0, [r4, #0]
 801561a:	4401      	add	r1, r0
 801561c:	1850      	adds	r0, r2, r1
 801561e:	4283      	cmp	r3, r0
 8015620:	6011      	str	r1, [r2, #0]
 8015622:	d1e0      	bne.n	80155e6 <_free_r+0x22>
 8015624:	6818      	ldr	r0, [r3, #0]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	6053      	str	r3, [r2, #4]
 801562a:	4408      	add	r0, r1
 801562c:	6010      	str	r0, [r2, #0]
 801562e:	e7da      	b.n	80155e6 <_free_r+0x22>
 8015630:	d902      	bls.n	8015638 <_free_r+0x74>
 8015632:	230c      	movs	r3, #12
 8015634:	602b      	str	r3, [r5, #0]
 8015636:	e7d6      	b.n	80155e6 <_free_r+0x22>
 8015638:	6820      	ldr	r0, [r4, #0]
 801563a:	1821      	adds	r1, r4, r0
 801563c:	428b      	cmp	r3, r1
 801563e:	bf04      	itt	eq
 8015640:	6819      	ldreq	r1, [r3, #0]
 8015642:	685b      	ldreq	r3, [r3, #4]
 8015644:	6063      	str	r3, [r4, #4]
 8015646:	bf04      	itt	eq
 8015648:	1809      	addeq	r1, r1, r0
 801564a:	6021      	streq	r1, [r4, #0]
 801564c:	6054      	str	r4, [r2, #4]
 801564e:	e7ca      	b.n	80155e6 <_free_r+0x22>
 8015650:	bd38      	pop	{r3, r4, r5, pc}
 8015652:	bf00      	nop
 8015654:	2000da9c 	.word	0x2000da9c

08015658 <__swhatbuf_r>:
 8015658:	b570      	push	{r4, r5, r6, lr}
 801565a:	460c      	mov	r4, r1
 801565c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015660:	2900      	cmp	r1, #0
 8015662:	b096      	sub	sp, #88	@ 0x58
 8015664:	4615      	mov	r5, r2
 8015666:	461e      	mov	r6, r3
 8015668:	da0d      	bge.n	8015686 <__swhatbuf_r+0x2e>
 801566a:	89a3      	ldrh	r3, [r4, #12]
 801566c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015670:	f04f 0100 	mov.w	r1, #0
 8015674:	bf14      	ite	ne
 8015676:	2340      	movne	r3, #64	@ 0x40
 8015678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801567c:	2000      	movs	r0, #0
 801567e:	6031      	str	r1, [r6, #0]
 8015680:	602b      	str	r3, [r5, #0]
 8015682:	b016      	add	sp, #88	@ 0x58
 8015684:	bd70      	pop	{r4, r5, r6, pc}
 8015686:	466a      	mov	r2, sp
 8015688:	f000 f878 	bl	801577c <_fstat_r>
 801568c:	2800      	cmp	r0, #0
 801568e:	dbec      	blt.n	801566a <__swhatbuf_r+0x12>
 8015690:	9901      	ldr	r1, [sp, #4]
 8015692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801569a:	4259      	negs	r1, r3
 801569c:	4159      	adcs	r1, r3
 801569e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80156a2:	e7eb      	b.n	801567c <__swhatbuf_r+0x24>

080156a4 <__smakebuf_r>:
 80156a4:	898b      	ldrh	r3, [r1, #12]
 80156a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156a8:	079d      	lsls	r5, r3, #30
 80156aa:	4606      	mov	r6, r0
 80156ac:	460c      	mov	r4, r1
 80156ae:	d507      	bpl.n	80156c0 <__smakebuf_r+0x1c>
 80156b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80156b4:	6023      	str	r3, [r4, #0]
 80156b6:	6123      	str	r3, [r4, #16]
 80156b8:	2301      	movs	r3, #1
 80156ba:	6163      	str	r3, [r4, #20]
 80156bc:	b003      	add	sp, #12
 80156be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c0:	ab01      	add	r3, sp, #4
 80156c2:	466a      	mov	r2, sp
 80156c4:	f7ff ffc8 	bl	8015658 <__swhatbuf_r>
 80156c8:	9f00      	ldr	r7, [sp, #0]
 80156ca:	4605      	mov	r5, r0
 80156cc:	4639      	mov	r1, r7
 80156ce:	4630      	mov	r0, r6
 80156d0:	f7ff fab2 	bl	8014c38 <_malloc_r>
 80156d4:	b948      	cbnz	r0, 80156ea <__smakebuf_r+0x46>
 80156d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156da:	059a      	lsls	r2, r3, #22
 80156dc:	d4ee      	bmi.n	80156bc <__smakebuf_r+0x18>
 80156de:	f023 0303 	bic.w	r3, r3, #3
 80156e2:	f043 0302 	orr.w	r3, r3, #2
 80156e6:	81a3      	strh	r3, [r4, #12]
 80156e8:	e7e2      	b.n	80156b0 <__smakebuf_r+0xc>
 80156ea:	89a3      	ldrh	r3, [r4, #12]
 80156ec:	6020      	str	r0, [r4, #0]
 80156ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80156f2:	81a3      	strh	r3, [r4, #12]
 80156f4:	9b01      	ldr	r3, [sp, #4]
 80156f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80156fa:	b15b      	cbz	r3, 8015714 <__smakebuf_r+0x70>
 80156fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015700:	4630      	mov	r0, r6
 8015702:	f000 f84d 	bl	80157a0 <_isatty_r>
 8015706:	b128      	cbz	r0, 8015714 <__smakebuf_r+0x70>
 8015708:	89a3      	ldrh	r3, [r4, #12]
 801570a:	f023 0303 	bic.w	r3, r3, #3
 801570e:	f043 0301 	orr.w	r3, r3, #1
 8015712:	81a3      	strh	r3, [r4, #12]
 8015714:	89a3      	ldrh	r3, [r4, #12]
 8015716:	431d      	orrs	r5, r3
 8015718:	81a5      	strh	r5, [r4, #12]
 801571a:	e7cf      	b.n	80156bc <__smakebuf_r+0x18>

0801571c <_raise_r>:
 801571c:	291f      	cmp	r1, #31
 801571e:	b538      	push	{r3, r4, r5, lr}
 8015720:	4605      	mov	r5, r0
 8015722:	460c      	mov	r4, r1
 8015724:	d904      	bls.n	8015730 <_raise_r+0x14>
 8015726:	2316      	movs	r3, #22
 8015728:	6003      	str	r3, [r0, #0]
 801572a:	f04f 30ff 	mov.w	r0, #4294967295
 801572e:	bd38      	pop	{r3, r4, r5, pc}
 8015730:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015732:	b112      	cbz	r2, 801573a <_raise_r+0x1e>
 8015734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015738:	b94b      	cbnz	r3, 801574e <_raise_r+0x32>
 801573a:	4628      	mov	r0, r5
 801573c:	f000 f852 	bl	80157e4 <_getpid_r>
 8015740:	4622      	mov	r2, r4
 8015742:	4601      	mov	r1, r0
 8015744:	4628      	mov	r0, r5
 8015746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801574a:	f000 b839 	b.w	80157c0 <_kill_r>
 801574e:	2b01      	cmp	r3, #1
 8015750:	d00a      	beq.n	8015768 <_raise_r+0x4c>
 8015752:	1c59      	adds	r1, r3, #1
 8015754:	d103      	bne.n	801575e <_raise_r+0x42>
 8015756:	2316      	movs	r3, #22
 8015758:	6003      	str	r3, [r0, #0]
 801575a:	2001      	movs	r0, #1
 801575c:	e7e7      	b.n	801572e <_raise_r+0x12>
 801575e:	2100      	movs	r1, #0
 8015760:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015764:	4620      	mov	r0, r4
 8015766:	4798      	blx	r3
 8015768:	2000      	movs	r0, #0
 801576a:	e7e0      	b.n	801572e <_raise_r+0x12>

0801576c <raise>:
 801576c:	4b02      	ldr	r3, [pc, #8]	@ (8015778 <raise+0xc>)
 801576e:	4601      	mov	r1, r0
 8015770:	6818      	ldr	r0, [r3, #0]
 8015772:	f7ff bfd3 	b.w	801571c <_raise_r>
 8015776:	bf00      	nop
 8015778:	2000003c 	.word	0x2000003c

0801577c <_fstat_r>:
 801577c:	b538      	push	{r3, r4, r5, lr}
 801577e:	4d07      	ldr	r5, [pc, #28]	@ (801579c <_fstat_r+0x20>)
 8015780:	2300      	movs	r3, #0
 8015782:	4604      	mov	r4, r0
 8015784:	4608      	mov	r0, r1
 8015786:	4611      	mov	r1, r2
 8015788:	602b      	str	r3, [r5, #0]
 801578a:	f7eb fc81 	bl	8001090 <_fstat>
 801578e:	1c43      	adds	r3, r0, #1
 8015790:	d102      	bne.n	8015798 <_fstat_r+0x1c>
 8015792:	682b      	ldr	r3, [r5, #0]
 8015794:	b103      	cbz	r3, 8015798 <_fstat_r+0x1c>
 8015796:	6023      	str	r3, [r4, #0]
 8015798:	bd38      	pop	{r3, r4, r5, pc}
 801579a:	bf00      	nop
 801579c:	2000d950 	.word	0x2000d950

080157a0 <_isatty_r>:
 80157a0:	b538      	push	{r3, r4, r5, lr}
 80157a2:	4d06      	ldr	r5, [pc, #24]	@ (80157bc <_isatty_r+0x1c>)
 80157a4:	2300      	movs	r3, #0
 80157a6:	4604      	mov	r4, r0
 80157a8:	4608      	mov	r0, r1
 80157aa:	602b      	str	r3, [r5, #0]
 80157ac:	f7eb fc80 	bl	80010b0 <_isatty>
 80157b0:	1c43      	adds	r3, r0, #1
 80157b2:	d102      	bne.n	80157ba <_isatty_r+0x1a>
 80157b4:	682b      	ldr	r3, [r5, #0]
 80157b6:	b103      	cbz	r3, 80157ba <_isatty_r+0x1a>
 80157b8:	6023      	str	r3, [r4, #0]
 80157ba:	bd38      	pop	{r3, r4, r5, pc}
 80157bc:	2000d950 	.word	0x2000d950

080157c0 <_kill_r>:
 80157c0:	b538      	push	{r3, r4, r5, lr}
 80157c2:	4d07      	ldr	r5, [pc, #28]	@ (80157e0 <_kill_r+0x20>)
 80157c4:	2300      	movs	r3, #0
 80157c6:	4604      	mov	r4, r0
 80157c8:	4608      	mov	r0, r1
 80157ca:	4611      	mov	r1, r2
 80157cc:	602b      	str	r3, [r5, #0]
 80157ce:	f7eb fbfd 	bl	8000fcc <_kill>
 80157d2:	1c43      	adds	r3, r0, #1
 80157d4:	d102      	bne.n	80157dc <_kill_r+0x1c>
 80157d6:	682b      	ldr	r3, [r5, #0]
 80157d8:	b103      	cbz	r3, 80157dc <_kill_r+0x1c>
 80157da:	6023      	str	r3, [r4, #0]
 80157dc:	bd38      	pop	{r3, r4, r5, pc}
 80157de:	bf00      	nop
 80157e0:	2000d950 	.word	0x2000d950

080157e4 <_getpid_r>:
 80157e4:	f7eb bbea 	b.w	8000fbc <_getpid>

080157e8 <_init>:
 80157e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ea:	bf00      	nop
 80157ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157ee:	bc08      	pop	{r3}
 80157f0:	469e      	mov	lr, r3
 80157f2:	4770      	bx	lr

080157f4 <_fini>:
 80157f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157f6:	bf00      	nop
 80157f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157fa:	bc08      	pop	{r3}
 80157fc:	469e      	mov	lr, r3
 80157fe:	4770      	bx	lr
